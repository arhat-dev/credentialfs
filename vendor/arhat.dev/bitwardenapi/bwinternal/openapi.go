// Package bwinternal provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package bwinternal

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/pkg/errors"
)

const (
	OAuth2_Client_CredentialsScopes = "OAuth2_Client_Credentials.Scopes"
)

// Defines values for AttestationConveyancePreference.
const (
	AttestationConveyancePreference0_ AttestationConveyancePreference = 0

	AttestationConveyancePreference1 AttestationConveyancePreference = 1

	AttestationConveyancePreference2 AttestationConveyancePreference = 2
)

// Defines values for AuthenticatorAttachment.
const (
	AuthenticatorAttachment0_ AuthenticatorAttachment = 0

	AuthenticatorAttachment1 AuthenticatorAttachment = 1
)

// Defines values for AuthenticatorTransport.
const (
	AuthenticatorTransport0_ AuthenticatorTransport = 0

	AuthenticatorTransport1 AuthenticatorTransport = 1

	AuthenticatorTransport2 AuthenticatorTransport = 2

	AuthenticatorTransport3 AuthenticatorTransport = 3

	AuthenticatorTransport4 AuthenticatorTransport = 4
)

// Defines values for CipherRepromptType.
const (
	CipherRepromptType0_ CipherRepromptType = 0

	CipherRepromptType1 CipherRepromptType = 1
)

// Defines values for CipherType.
const (
	CipherType1_ CipherType = 1

	CipherType1 CipherType = 2

	CipherType2 CipherType = 3

	CipherType3 CipherType = 4
)

// Defines values for DeviceType.
const (
	DeviceType0_ DeviceType = 0

	DeviceType1 DeviceType = 1

	DeviceType2 DeviceType = 2

	DeviceType3 DeviceType = 3

	DeviceType4 DeviceType = 4

	DeviceType5 DeviceType = 5

	DeviceType6 DeviceType = 6

	DeviceType7 DeviceType = 7

	DeviceType8 DeviceType = 8

	DeviceType9 DeviceType = 9

	DeviceTypeN0 DeviceType = 10

	DeviceTypeN01 DeviceType = 20

	DeviceTypeN1 DeviceType = 11

	DeviceTypeN2 DeviceType = 12

	DeviceTypeN3 DeviceType = 13

	DeviceTypeN4 DeviceType = 14

	DeviceTypeN5 DeviceType = 15

	DeviceTypeN6 DeviceType = 16

	DeviceTypeN7 DeviceType = 17

	DeviceTypeN8 DeviceType = 18

	DeviceTypeN9 DeviceType = 19
)

// Defines values for EmergencyAccessStatusType.
const (
	EmergencyAccessStatusType0_ EmergencyAccessStatusType = 0

	EmergencyAccessStatusType1 EmergencyAccessStatusType = 1

	EmergencyAccessStatusType2 EmergencyAccessStatusType = 2

	EmergencyAccessStatusType3 EmergencyAccessStatusType = 3

	EmergencyAccessStatusType4 EmergencyAccessStatusType = 4
)

// Defines values for EmergencyAccessType.
const (
	EmergencyAccessType0_ EmergencyAccessType = 0

	EmergencyAccessType1 EmergencyAccessType = 1
)

// Defines values for EventType.
const (
	EventTypeN000 EventType = 1000

	EventTypeN001 EventType = 1001

	EventTypeN002 EventType = 1002

	EventTypeN003 EventType = 1003

	EventTypeN004 EventType = 1004

	EventTypeN005 EventType = 1005

	EventTypeN006 EventType = 1006

	EventTypeN007 EventType = 1007

	EventTypeN100 EventType = 1100

	EventTypeN101 EventType = 1101

	EventTypeN102 EventType = 1102

	EventTypeN103 EventType = 1103

	EventTypeN104 EventType = 1104

	EventTypeN105 EventType = 1105

	EventTypeN106 EventType = 1106

	EventTypeN107 EventType = 1107

	EventTypeN108 EventType = 1108

	EventTypeN109 EventType = 1109

	EventTypeN110 EventType = 1110

	EventTypeN111 EventType = 1111

	EventTypeN112 EventType = 1112

	EventTypeN113 EventType = 1113

	EventTypeN114 EventType = 1114

	EventTypeN115 EventType = 1115

	EventTypeN116 EventType = 1116

	EventTypeN117 EventType = 1117

	EventTypeN300 EventType = 1300

	EventTypeN301 EventType = 1301

	EventTypeN302 EventType = 1302

	EventTypeN400 EventType = 1400

	EventTypeN401 EventType = 1401

	EventTypeN402 EventType = 1402

	EventTypeN500 EventType = 1500

	EventTypeN501 EventType = 1501

	EventTypeN502 EventType = 1502

	EventTypeN503 EventType = 1503

	EventTypeN504 EventType = 1504

	EventTypeN505 EventType = 1505

	EventTypeN506 EventType = 1506

	EventTypeN507 EventType = 1507

	EventTypeN508 EventType = 1508

	EventTypeN600 EventType = 1600

	EventTypeN601 EventType = 1601

	EventTypeN700 EventType = 1700
)

// Defines values for FieldType.
const (
	FieldType0_ FieldType = 0

	FieldType1 FieldType = 1

	FieldType2 FieldType = 2
)

// Defines values for FileUploadType.
const (
	FileUploadType0_ FileUploadType = 0

	FileUploadType1 FileUploadType = 1
)

// Defines values for GlobalEquivalentDomainsType.
const (
	GlobalEquivalentDomainsType0_ GlobalEquivalentDomainsType = 0

	GlobalEquivalentDomainsType1 GlobalEquivalentDomainsType = 1

	GlobalEquivalentDomainsType2 GlobalEquivalentDomainsType = 2

	GlobalEquivalentDomainsType3 GlobalEquivalentDomainsType = 3

	GlobalEquivalentDomainsType4 GlobalEquivalentDomainsType = 4

	GlobalEquivalentDomainsType5 GlobalEquivalentDomainsType = 5

	GlobalEquivalentDomainsType6 GlobalEquivalentDomainsType = 6

	GlobalEquivalentDomainsType7 GlobalEquivalentDomainsType = 7

	GlobalEquivalentDomainsType8 GlobalEquivalentDomainsType = 8

	GlobalEquivalentDomainsType9 GlobalEquivalentDomainsType = 9

	GlobalEquivalentDomainsTypeN0 GlobalEquivalentDomainsType = 10

	GlobalEquivalentDomainsTypeN01 GlobalEquivalentDomainsType = 20

	GlobalEquivalentDomainsTypeN02 GlobalEquivalentDomainsType = 30

	GlobalEquivalentDomainsTypeN03 GlobalEquivalentDomainsType = 40

	GlobalEquivalentDomainsTypeN04 GlobalEquivalentDomainsType = 50

	GlobalEquivalentDomainsTypeN05 GlobalEquivalentDomainsType = 60

	GlobalEquivalentDomainsTypeN06 GlobalEquivalentDomainsType = 70

	GlobalEquivalentDomainsTypeN07 GlobalEquivalentDomainsType = 80

	GlobalEquivalentDomainsTypeN1 GlobalEquivalentDomainsType = 11

	GlobalEquivalentDomainsTypeN11 GlobalEquivalentDomainsType = 21

	GlobalEquivalentDomainsTypeN12 GlobalEquivalentDomainsType = 31

	GlobalEquivalentDomainsTypeN13 GlobalEquivalentDomainsType = 41

	GlobalEquivalentDomainsTypeN14 GlobalEquivalentDomainsType = 51

	GlobalEquivalentDomainsTypeN15 GlobalEquivalentDomainsType = 61

	GlobalEquivalentDomainsTypeN16 GlobalEquivalentDomainsType = 71

	GlobalEquivalentDomainsTypeN17 GlobalEquivalentDomainsType = 81

	GlobalEquivalentDomainsTypeN2 GlobalEquivalentDomainsType = 12

	GlobalEquivalentDomainsTypeN21 GlobalEquivalentDomainsType = 22

	GlobalEquivalentDomainsTypeN22 GlobalEquivalentDomainsType = 32

	GlobalEquivalentDomainsTypeN23 GlobalEquivalentDomainsType = 42

	GlobalEquivalentDomainsTypeN24 GlobalEquivalentDomainsType = 52

	GlobalEquivalentDomainsTypeN25 GlobalEquivalentDomainsType = 62

	GlobalEquivalentDomainsTypeN26 GlobalEquivalentDomainsType = 72

	GlobalEquivalentDomainsTypeN27 GlobalEquivalentDomainsType = 82

	GlobalEquivalentDomainsTypeN3 GlobalEquivalentDomainsType = 13

	GlobalEquivalentDomainsTypeN31 GlobalEquivalentDomainsType = 23

	GlobalEquivalentDomainsTypeN32 GlobalEquivalentDomainsType = 33

	GlobalEquivalentDomainsTypeN33 GlobalEquivalentDomainsType = 43

	GlobalEquivalentDomainsTypeN34 GlobalEquivalentDomainsType = 53

	GlobalEquivalentDomainsTypeN35 GlobalEquivalentDomainsType = 63

	GlobalEquivalentDomainsTypeN36 GlobalEquivalentDomainsType = 73

	GlobalEquivalentDomainsTypeN37 GlobalEquivalentDomainsType = 83

	GlobalEquivalentDomainsTypeN4 GlobalEquivalentDomainsType = 14

	GlobalEquivalentDomainsTypeN41 GlobalEquivalentDomainsType = 24

	GlobalEquivalentDomainsTypeN42 GlobalEquivalentDomainsType = 34

	GlobalEquivalentDomainsTypeN43 GlobalEquivalentDomainsType = 44

	GlobalEquivalentDomainsTypeN44 GlobalEquivalentDomainsType = 54

	GlobalEquivalentDomainsTypeN45 GlobalEquivalentDomainsType = 64

	GlobalEquivalentDomainsTypeN46 GlobalEquivalentDomainsType = 74

	GlobalEquivalentDomainsTypeN47 GlobalEquivalentDomainsType = 84

	GlobalEquivalentDomainsTypeN5 GlobalEquivalentDomainsType = 15

	GlobalEquivalentDomainsTypeN51 GlobalEquivalentDomainsType = 25

	GlobalEquivalentDomainsTypeN52 GlobalEquivalentDomainsType = 35

	GlobalEquivalentDomainsTypeN53 GlobalEquivalentDomainsType = 45

	GlobalEquivalentDomainsTypeN54 GlobalEquivalentDomainsType = 55

	GlobalEquivalentDomainsTypeN55 GlobalEquivalentDomainsType = 65

	GlobalEquivalentDomainsTypeN56 GlobalEquivalentDomainsType = 75

	GlobalEquivalentDomainsTypeN57 GlobalEquivalentDomainsType = 85

	GlobalEquivalentDomainsTypeN6 GlobalEquivalentDomainsType = 16

	GlobalEquivalentDomainsTypeN61 GlobalEquivalentDomainsType = 26

	GlobalEquivalentDomainsTypeN62 GlobalEquivalentDomainsType = 36

	GlobalEquivalentDomainsTypeN63 GlobalEquivalentDomainsType = 46

	GlobalEquivalentDomainsTypeN64 GlobalEquivalentDomainsType = 56

	GlobalEquivalentDomainsTypeN65 GlobalEquivalentDomainsType = 66

	GlobalEquivalentDomainsTypeN66 GlobalEquivalentDomainsType = 76

	GlobalEquivalentDomainsTypeN7 GlobalEquivalentDomainsType = 17

	GlobalEquivalentDomainsTypeN71 GlobalEquivalentDomainsType = 27

	GlobalEquivalentDomainsTypeN72 GlobalEquivalentDomainsType = 37

	GlobalEquivalentDomainsTypeN73 GlobalEquivalentDomainsType = 47

	GlobalEquivalentDomainsTypeN74 GlobalEquivalentDomainsType = 57

	GlobalEquivalentDomainsTypeN75 GlobalEquivalentDomainsType = 67

	GlobalEquivalentDomainsTypeN76 GlobalEquivalentDomainsType = 77

	GlobalEquivalentDomainsTypeN8 GlobalEquivalentDomainsType = 18

	GlobalEquivalentDomainsTypeN81 GlobalEquivalentDomainsType = 28

	GlobalEquivalentDomainsTypeN82 GlobalEquivalentDomainsType = 38

	GlobalEquivalentDomainsTypeN83 GlobalEquivalentDomainsType = 48

	GlobalEquivalentDomainsTypeN84 GlobalEquivalentDomainsType = 58

	GlobalEquivalentDomainsTypeN85 GlobalEquivalentDomainsType = 68

	GlobalEquivalentDomainsTypeN86 GlobalEquivalentDomainsType = 78

	GlobalEquivalentDomainsTypeN9 GlobalEquivalentDomainsType = 19

	GlobalEquivalentDomainsTypeN91 GlobalEquivalentDomainsType = 29

	GlobalEquivalentDomainsTypeN92 GlobalEquivalentDomainsType = 39

	GlobalEquivalentDomainsTypeN93 GlobalEquivalentDomainsType = 49

	GlobalEquivalentDomainsTypeN94 GlobalEquivalentDomainsType = 59

	GlobalEquivalentDomainsTypeN95 GlobalEquivalentDomainsType = 69

	GlobalEquivalentDomainsTypeN96 GlobalEquivalentDomainsType = 79
)

// Defines values for KdfType.
const (
	KdfType0_ KdfType = 0
)

// Defines values for OrganizationUserStatusType.
const (
	OrganizationUserStatusType0_ OrganizationUserStatusType = 0

	OrganizationUserStatusType1 OrganizationUserStatusType = 1

	OrganizationUserStatusType2 OrganizationUserStatusType = 2
)

// Defines values for OrganizationUserType.
const (
	OrganizationUserType0_ OrganizationUserType = 0

	OrganizationUserType1 OrganizationUserType = 1

	OrganizationUserType2 OrganizationUserType = 2

	OrganizationUserType3 OrganizationUserType = 3

	OrganizationUserType4 OrganizationUserType = 4
)

// Defines values for PaymentMethodType.
const (
	PaymentMethodType0_ PaymentMethodType = 0

	PaymentMethodType1 PaymentMethodType = 1

	PaymentMethodType2 PaymentMethodType = 2

	PaymentMethodType3 PaymentMethodType = 3

	PaymentMethodType4 PaymentMethodType = 4

	PaymentMethodType5 PaymentMethodType = 5

	PaymentMethodType6 PaymentMethodType = 6

	PaymentMethodType7 PaymentMethodType = 7

	PaymentMethodType8 PaymentMethodType = 8
)

// Defines values for PlanType.
const (
	PlanType0_ PlanType = 0

	PlanType1 PlanType = 1

	PlanType2 PlanType = 2

	PlanType3 PlanType = 3

	PlanType4 PlanType = 4

	PlanType5 PlanType = 5

	PlanType6 PlanType = 6

	PlanType7 PlanType = 7

	PlanType8 PlanType = 8

	PlanType9 PlanType = 9

	PlanTypeN0 PlanType = 10

	PlanTypeN1 PlanType = 11
)

// Defines values for PolicyType.
const (
	PolicyType0_ PolicyType = 0

	PolicyType1 PolicyType = 1

	PolicyType2 PolicyType = 2

	PolicyType3 PolicyType = 3

	PolicyType4 PolicyType = 4

	PolicyType5 PolicyType = 5

	PolicyType6 PolicyType = 6

	PolicyType7 PolicyType = 7

	PolicyType8 PolicyType = 8
)

// Defines values for ProductType.
const (
	ProductType0_ ProductType = 0

	ProductType1 ProductType = 1

	ProductType2 ProductType = 2

	ProductType3 ProductType = 3
)

// Defines values for PublicKeyCredentialType.
const (
	PublicKeyCredentialType0_ PublicKeyCredentialType = 0
)

// Defines values for PushType.
const (
	PushType0_ PushType = 0

	PushType1 PushType = 1

	PushType2 PushType = 2

	PushType3 PushType = 3

	PushType4 PushType = 4

	PushType5 PushType = 5

	PushType6 PushType = 6

	PushType7 PushType = 7

	PushType8 PushType = 8

	PushType9 PushType = 9

	PushTypeN0 PushType = 10

	PushTypeN1 PushType = 11

	PushTypeN2 PushType = 12

	PushTypeN3 PushType = 13

	PushTypeN4 PushType = 14
)

// Defines values for SecureNoteType.
const (
	SecureNoteType0_ SecureNoteType = 0
)

// Defines values for SendType.
const (
	SendType0_ SendType = 0

	SendType1 SendType = 1
)

// Defines values for TransactionType.
const (
	TransactionType0_ TransactionType = 0

	TransactionType1 TransactionType = 1

	TransactionType2 TransactionType = 2

	TransactionType3 TransactionType = 3

	TransactionType4 TransactionType = 4
)

// Defines values for TwoFactorProviderType.
const (
	TwoFactorProviderType0_ TwoFactorProviderType = 0

	TwoFactorProviderType1 TwoFactorProviderType = 1

	TwoFactorProviderType2 TwoFactorProviderType = 2

	TwoFactorProviderType3 TwoFactorProviderType = 3

	TwoFactorProviderType4 TwoFactorProviderType = 4

	TwoFactorProviderType5 TwoFactorProviderType = 5

	TwoFactorProviderType6 TwoFactorProviderType = 6

	TwoFactorProviderType7 TwoFactorProviderType = 7
)

// Defines values for UriMatchType.
const (
	UriMatchType0_ UriMatchType = 0

	UriMatchType1 UriMatchType = 1

	UriMatchType2 UriMatchType = 2

	UriMatchType3 UriMatchType = 3

	UriMatchType4 UriMatchType = 4

	UriMatchType5 UriMatchType = 5
)

// Defines values for UserVerificationRequirement.
const (
	UserVerificationRequirement0_ UserVerificationRequirement = 0

	UserVerificationRequirement1 UserVerificationRequirement = 1

	UserVerificationRequirement2 UserVerificationRequirement = 2
)

// ApiKeyRequestModel defines model for ApiKeyRequestModel.
type ApiKeyRequestModel struct {
	MasterPasswordHash string `json:"masterPasswordHash"`
}

// ApiKeyResponseModel defines model for ApiKeyResponseModel.
type ApiKeyResponseModel struct {
	ApiKey *string `json:"apiKey"`
	Object *string `json:"object"`
}

// AttachmentRequestModel defines model for AttachmentRequestModel.
type AttachmentRequestModel struct {
	AdminRequest *bool   `json:"adminRequest,omitempty"`
	FileName     *string `json:"fileName"`
	FileSize     *int64  `json:"fileSize,omitempty"`
	Key          *string `json:"key"`
}

// AttachmentResponseModel defines model for AttachmentResponseModel.
type AttachmentResponseModel struct {
	FileName *string `json:"fileName"`
	Id       *string `json:"id"`
	Key      *string `json:"key"`
	Object   *string `json:"object"`
	Size     *string `json:"size"`
	SizeName *string `json:"sizeName"`
	Url      *string `json:"url"`
}

// AttachmentUploadDataResponseModel defines model for AttachmentUploadDataResponseModel.
type AttachmentUploadDataResponseModel struct {
	AttachmentId       *string                  `json:"attachmentId"`
	CipherMiniResponse *CipherMiniResponseModel `json:"cipherMiniResponse,omitempty"`
	CipherResponse     *CipherResponseModel     `json:"cipherResponse,omitempty"`
	FileUploadType     *FileUploadType          `json:"fileUploadType,omitempty"`
	Object             *string                  `json:"object"`
	Url                *string                  `json:"url"`
}

// AttestationConveyancePreference defines model for AttestationConveyancePreference.
type AttestationConveyancePreference int32

// AuthenticationExtensionsClientInputs defines model for AuthenticationExtensionsClientInputs.
type AuthenticationExtensionsClientInputs struct {
	AppID                                   *string                           `json:"appID"`
	AuthenticatorSelection                  *[][]byte                         `json:"authenticatorSelection"`
	BiometricAuthenticatorPerformanceBounds *AuthenticatorBiometricPerfBounds `json:"biometricAuthenticatorPerformanceBounds,omitempty"`
	Example                                 *map[string]interface{}           `json:"example"`
	Extensions                              *bool                             `json:"extensions"`
	GenericTransactionAuthorization         *TxAuthGenericArg                 `json:"genericTransactionAuthorization,omitempty"`
	Location                                *bool                             `json:"location"`
	SimpleTransactionAuthorization          *string                           `json:"simpleTransactionAuthorization"`
	UserVerificationIndex                   *bool                             `json:"userVerificationIndex"`
	UserVerificationMethod                  *bool                             `json:"userVerificationMethod"`
}

// AuthenticationExtensionsClientOutputs defines model for AuthenticationExtensionsClientOutputs.
type AuthenticationExtensionsClientOutputs struct {
	AppID                                   *bool                   `json:"appID,omitempty"`
	AuthenticatorSelection                  *bool                   `json:"authenticatorSelection,omitempty"`
	BiometricAuthenticatorPerformanceBounds *bool                   `json:"biometricAuthenticatorPerformanceBounds,omitempty"`
	Example                                 *map[string]interface{} `json:"example"`
	Extensions                              *[]string               `json:"extensions"`
	GenericTransactionAuthorization         *[]byte                 `json:"genericTransactionAuthorization"`
	Location                                *GeoCoordinate          `json:"location,omitempty"`
	SimpleTransactionAuthorization          *string                 `json:"simpleTransactionAuthorization"`
	UserVerificationIndex                   *[]byte                 `json:"userVerificationIndex"`
	UserVerificationMethod                  *[][]int64              `json:"userVerificationMethod"`
}

// AuthenticatorAttachment defines model for AuthenticatorAttachment.
type AuthenticatorAttachment int32

// AuthenticatorAttestationRawResponse defines model for AuthenticatorAttestationRawResponse.
type AuthenticatorAttestationRawResponse struct {
	Extensions *AuthenticationExtensionsClientOutputs `json:"extensions,omitempty"`
	Id         *[]byte                                `json:"id"`
	RawId      *[]byte                                `json:"rawId"`
	Response   *ResponseData                          `json:"response,omitempty"`
	Type       *PublicKeyCredentialType               `json:"type,omitempty"`
}

// AuthenticatorBiometricPerfBounds defines model for AuthenticatorBiometricPerfBounds.
type AuthenticatorBiometricPerfBounds struct {
	Far *float32 `json:"far,omitempty"`
	Frr *float32 `json:"frr,omitempty"`
}

// AuthenticatorSelection defines model for AuthenticatorSelection.
type AuthenticatorSelection struct {
	AuthenticatorAttachment *AuthenticatorAttachment     `json:"authenticatorAttachment,omitempty"`
	RequireResidentKey      *bool                        `json:"requireResidentKey,omitempty"`
	UserVerification        *UserVerificationRequirement `json:"userVerification,omitempty"`
}

// AuthenticatorTransport defines model for AuthenticatorTransport.
type AuthenticatorTransport int32

// BillingInvoice defines model for BillingInvoice.
type BillingInvoice struct {
	Amount *float64   `json:"amount,omitempty"`
	Date   *time.Time `json:"date"`
	Number *string    `json:"number"`
	Paid   *bool      `json:"paid,omitempty"`
	PdfUrl *string    `json:"pdfUrl"`
	Url    *string    `json:"url"`
}

// BillingResponseModel defines model for BillingResponseModel.
type BillingResponseModel struct {
	Balance       *float64              `json:"balance,omitempty"`
	Invoices      *[]BillingInvoice     `json:"invoices"`
	Object        *string               `json:"object"`
	PaymentSource *BillingSource        `json:"paymentSource,omitempty"`
	Transactions  *[]BillingTransaction `json:"transactions"`
}

// BillingSource defines model for BillingSource.
type BillingSource struct {
	CardBrand         *string            `json:"cardBrand"`
	Description       *string            `json:"description"`
	NeedsVerification *bool              `json:"needsVerification,omitempty"`
	Type              *PaymentMethodType `json:"type,omitempty"`
}

// BillingSubscription defines model for BillingSubscription.
type BillingSubscription struct {
	CancelAtEndDate *bool                      `json:"cancelAtEndDate,omitempty"`
	Cancelled       *bool                      `json:"cancelled,omitempty"`
	CancelledDate   *time.Time                 `json:"cancelledDate"`
	Items           *[]BillingSubscriptionItem `json:"items"`
	PeriodEndDate   *time.Time                 `json:"periodEndDate"`
	PeriodStartDate *time.Time                 `json:"periodStartDate"`
	Status          *string                    `json:"status"`
	TrialEndDate    *time.Time                 `json:"trialEndDate"`
	TrialStartDate  *time.Time                 `json:"trialStartDate"`
}

// BillingSubscriptionItem defines model for BillingSubscriptionItem.
type BillingSubscriptionItem struct {
	Amount   *float64 `json:"amount,omitempty"`
	Interval *string  `json:"interval"`
	Name     *string  `json:"name"`
	Quantity *int32   `json:"quantity,omitempty"`
}

// BillingSubscriptionUpcomingInvoice defines model for BillingSubscriptionUpcomingInvoice.
type BillingSubscriptionUpcomingInvoice struct {
	Amount *float64   `json:"amount,omitempty"`
	Date   *time.Time `json:"date"`
}

// BillingTransaction defines model for BillingTransaction.
type BillingTransaction struct {
	Amount            *float64           `json:"amount,omitempty"`
	CreatedDate       *time.Time         `json:"createdDate,omitempty"`
	Details           *string            `json:"details"`
	PartiallyRefunded *bool              `json:"partiallyRefunded"`
	PaymentMethodType *PaymentMethodType `json:"paymentMethodType,omitempty"`
	Refunded          *bool              `json:"refunded"`
	RefundedAmount    *float64           `json:"refundedAmount"`
	Type              *TransactionType   `json:"type,omitempty"`
}

// BitPayInvoiceRequestModel defines model for BitPayInvoiceRequestModel.
type BitPayInvoiceRequestModel struct {
	Amount         float64 `json:"amount"`
	Credit         *bool   `json:"credit,omitempty"`
	Email          *string `json:"email"`
	Name           *string `json:"name"`
	OrganizationId *string `json:"organizationId"`
	ReturnUrl      *string `json:"returnUrl"`
	UserId         *string `json:"userId"`
}

// CipherAttachmentModel defines model for CipherAttachmentModel.
type CipherAttachmentModel struct {
	FileName *string `json:"fileName"`
	Key      *string `json:"key"`
}

// CipherBulkDeleteRequestModel defines model for CipherBulkDeleteRequestModel.
type CipherBulkDeleteRequestModel struct {
	Ids            []string `json:"ids"`
	OrganizationId *string  `json:"organizationId"`
}

// CipherBulkMoveRequestModel defines model for CipherBulkMoveRequestModel.
type CipherBulkMoveRequestModel struct {
	FolderId *string  `json:"folderId"`
	Ids      []string `json:"ids"`
}

// CipherBulkRestoreRequestModel defines model for CipherBulkRestoreRequestModel.
type CipherBulkRestoreRequestModel struct {
	Ids []string `json:"ids"`
}

// CipherBulkShareRequestModel defines model for CipherBulkShareRequestModel.
type CipherBulkShareRequestModel struct {
	Ciphers       []CipherWithIdRequestModel `json:"ciphers"`
	CollectionIds []string                   `json:"collectionIds"`
}

// CipherCardModel defines model for CipherCardModel.
type CipherCardModel struct {
	Brand          *string `json:"brand"`
	CardholderName *string `json:"cardholderName"`
	Code           *string `json:"code"`
	ExpMonth       *string `json:"expMonth"`
	ExpYear        *string `json:"expYear"`
	Number         *string `json:"number"`
}

// CipherCollectionsRequestModel defines model for CipherCollectionsRequestModel.
type CipherCollectionsRequestModel struct {
	CollectionIds []string `json:"collectionIds"`
}

// CipherCreateRequestModel defines model for CipherCreateRequestModel.
type CipherCreateRequestModel struct {
	Cipher        CipherRequestModel `json:"cipher"`
	CollectionIds *[]string          `json:"collectionIds"`
}

// CipherDetailsResponseModel defines model for CipherDetailsResponseModel.
type CipherDetailsResponseModel struct {
	Attachments         *[]AttachmentResponseModel    `json:"attachments"`
	Card                *CipherCardModel              `json:"card,omitempty"`
	CollectionIds       *[]string                     `json:"collectionIds"`
	Data                *map[string]interface{}       `json:"data"`
	DeletedDate         *time.Time                    `json:"deletedDate"`
	Edit                *bool                         `json:"edit,omitempty"`
	Favorite            *bool                         `json:"favorite,omitempty"`
	Fields              *[]CipherFieldModel           `json:"fields"`
	FolderId            *string                       `json:"folderId"`
	Id                  *string                       `json:"id"`
	Identity            *CipherIdentityModel          `json:"identity,omitempty"`
	Login               *CipherLoginModel             `json:"login,omitempty"`
	Name                *string                       `json:"name"`
	Notes               *string                       `json:"notes"`
	Object              *string                       `json:"object"`
	OrganizationId      *string                       `json:"organizationId"`
	OrganizationUseTotp *bool                         `json:"organizationUseTotp,omitempty"`
	PasswordHistory     *[]CipherPasswordHistoryModel `json:"passwordHistory"`
	Reprompt            *CipherRepromptType           `json:"reprompt,omitempty"`
	RevisionDate        *time.Time                    `json:"revisionDate,omitempty"`
	SecureNote          *CipherSecureNoteModel        `json:"secureNote,omitempty"`
	Type                *CipherType                   `json:"type,omitempty"`
	ViewPassword        *bool                         `json:"viewPassword,omitempty"`
}

// CipherDetailsResponseModelListResponseModel defines model for CipherDetailsResponseModelListResponseModel.
type CipherDetailsResponseModelListResponseModel struct {
	ContinuationToken *string                       `json:"continuationToken"`
	Data              *[]CipherDetailsResponseModel `json:"data"`
	Object            *string                       `json:"object"`
}

// CipherFieldModel defines model for CipherFieldModel.
type CipherFieldModel struct {
	Name  *string    `json:"name"`
	Type  *FieldType `json:"type,omitempty"`
	Value *string    `json:"value"`
}

// CipherIdentityModel defines model for CipherIdentityModel.
type CipherIdentityModel struct {
	Address1       *string `json:"address1"`
	Address2       *string `json:"address2"`
	Address3       *string `json:"address3"`
	City           *string `json:"city"`
	Company        *string `json:"company"`
	Country        *string `json:"country"`
	Email          *string `json:"email"`
	FirstName      *string `json:"firstName"`
	LastName       *string `json:"lastName"`
	LicenseNumber  *string `json:"licenseNumber"`
	MiddleName     *string `json:"middleName"`
	PassportNumber *string `json:"passportNumber"`
	Phone          *string `json:"phone"`
	PostalCode     *string `json:"postalCode"`
	Ssn            *string `json:"ssn"`
	State          *string `json:"state"`
	Title          *string `json:"title"`
	Username       *string `json:"username"`
}

// CipherLoginModel defines model for CipherLoginModel.
type CipherLoginModel struct {
	AutofillOnPageLoad   *bool                  `json:"autofillOnPageLoad"`
	Password             *string                `json:"password"`
	PasswordRevisionDate *time.Time             `json:"passwordRevisionDate"`
	Totp                 *string                `json:"totp"`
	Uri                  *string                `json:"uri"`
	Uris                 *[]CipherLoginUriModel `json:"uris"`
	Username             *string                `json:"username"`
}

// CipherLoginUriModel defines model for CipherLoginUriModel.
type CipherLoginUriModel struct {
	Match *UriMatchType `json:"match,omitempty"`
	Uri   *string       `json:"uri"`
}

// CipherMiniDetailsResponseModel defines model for CipherMiniDetailsResponseModel.
type CipherMiniDetailsResponseModel struct {
	Attachments         *[]AttachmentResponseModel    `json:"attachments"`
	Card                *CipherCardModel              `json:"card,omitempty"`
	CollectionIds       *[]string                     `json:"collectionIds"`
	Data                *map[string]interface{}       `json:"data"`
	DeletedDate         *time.Time                    `json:"deletedDate"`
	Fields              *[]CipherFieldModel           `json:"fields"`
	Id                  *string                       `json:"id"`
	Identity            *CipherIdentityModel          `json:"identity,omitempty"`
	Login               *CipherLoginModel             `json:"login,omitempty"`
	Name                *string                       `json:"name"`
	Notes               *string                       `json:"notes"`
	Object              *string                       `json:"object"`
	OrganizationId      *string                       `json:"organizationId"`
	OrganizationUseTotp *bool                         `json:"organizationUseTotp,omitempty"`
	PasswordHistory     *[]CipherPasswordHistoryModel `json:"passwordHistory"`
	Reprompt            *CipherRepromptType           `json:"reprompt,omitempty"`
	RevisionDate        *time.Time                    `json:"revisionDate,omitempty"`
	SecureNote          *CipherSecureNoteModel        `json:"secureNote,omitempty"`
	Type                *CipherType                   `json:"type,omitempty"`
}

// CipherMiniDetailsResponseModelListResponseModel defines model for CipherMiniDetailsResponseModelListResponseModel.
type CipherMiniDetailsResponseModelListResponseModel struct {
	ContinuationToken *string                           `json:"continuationToken"`
	Data              *[]CipherMiniDetailsResponseModel `json:"data"`
	Object            *string                           `json:"object"`
}

// CipherMiniResponseModel defines model for CipherMiniResponseModel.
type CipherMiniResponseModel struct {
	Attachments         *[]AttachmentResponseModel    `json:"attachments"`
	Card                *CipherCardModel              `json:"card,omitempty"`
	Data                *map[string]interface{}       `json:"data"`
	DeletedDate         *time.Time                    `json:"deletedDate"`
	Fields              *[]CipherFieldModel           `json:"fields"`
	Id                  *string                       `json:"id"`
	Identity            *CipherIdentityModel          `json:"identity,omitempty"`
	Login               *CipherLoginModel             `json:"login,omitempty"`
	Name                *string                       `json:"name"`
	Notes               *string                       `json:"notes"`
	Object              *string                       `json:"object"`
	OrganizationId      *string                       `json:"organizationId"`
	OrganizationUseTotp *bool                         `json:"organizationUseTotp,omitempty"`
	PasswordHistory     *[]CipherPasswordHistoryModel `json:"passwordHistory"`
	Reprompt            *CipherRepromptType           `json:"reprompt,omitempty"`
	RevisionDate        *time.Time                    `json:"revisionDate,omitempty"`
	SecureNote          *CipherSecureNoteModel        `json:"secureNote,omitempty"`
	Type                *CipherType                   `json:"type,omitempty"`
}

// CipherPartialRequestModel defines model for CipherPartialRequestModel.
type CipherPartialRequestModel struct {
	Favorite *bool   `json:"favorite,omitempty"`
	FolderId *string `json:"folderId"`
}

// CipherPasswordHistoryModel defines model for CipherPasswordHistoryModel.
type CipherPasswordHistoryModel struct {
	LastUsedDate time.Time `json:"lastUsedDate"`
	Password     string    `json:"password"`
}

// CipherPurgeRequestModel defines model for CipherPurgeRequestModel.
type CipherPurgeRequestModel struct {
	MasterPasswordHash string `json:"masterPasswordHash"`
}

// CipherRepromptType defines model for CipherRepromptType.
type CipherRepromptType int32

// CipherRequestModel defines model for CipherRequestModel.
type CipherRequestModel struct {
	Attachments           *CipherRequestModel_Attachments  `json:"attachments"`
	Attachments2          *CipherRequestModel_Attachments2 `json:"attachments2"`
	Card                  *CipherCardModel                 `json:"card,omitempty"`
	Favorite              *bool                            `json:"favorite,omitempty"`
	Fields                *[]CipherFieldModel              `json:"fields"`
	FolderId              *string                          `json:"folderId"`
	Identity              *CipherIdentityModel             `json:"identity,omitempty"`
	LastKnownRevisionDate *time.Time                       `json:"lastKnownRevisionDate"`
	Login                 *CipherLoginModel                `json:"login,omitempty"`
	Name                  string                           `json:"name"`
	Notes                 *string                          `json:"notes"`
	OrganizationId        *string                          `json:"organizationId"`
	PasswordHistory       *[]CipherPasswordHistoryModel    `json:"passwordHistory"`
	Reprompt              *CipherRepromptType              `json:"reprompt,omitempty"`
	SecureNote            *CipherSecureNoteModel           `json:"secureNote,omitempty"`
	Type                  *CipherType                      `json:"type,omitempty"`
}

// CipherRequestModel_Attachments defines model for CipherRequestModel.Attachments.
type CipherRequestModel_Attachments struct {
	AdditionalProperties map[string]string `json:"-"`
}

// CipherRequestModel_Attachments2 defines model for CipherRequestModel.Attachments2.
type CipherRequestModel_Attachments2 struct {
	AdditionalProperties map[string]CipherAttachmentModel `json:"-"`
}

// CipherResponseModel defines model for CipherResponseModel.
type CipherResponseModel struct {
	Attachments         *[]AttachmentResponseModel    `json:"attachments"`
	Card                *CipherCardModel              `json:"card,omitempty"`
	Data                *map[string]interface{}       `json:"data"`
	DeletedDate         *time.Time                    `json:"deletedDate"`
	Edit                *bool                         `json:"edit,omitempty"`
	Favorite            *bool                         `json:"favorite,omitempty"`
	Fields              *[]CipherFieldModel           `json:"fields"`
	FolderId            *string                       `json:"folderId"`
	Id                  *string                       `json:"id"`
	Identity            *CipherIdentityModel          `json:"identity,omitempty"`
	Login               *CipherLoginModel             `json:"login,omitempty"`
	Name                *string                       `json:"name"`
	Notes               *string                       `json:"notes"`
	Object              *string                       `json:"object"`
	OrganizationId      *string                       `json:"organizationId"`
	OrganizationUseTotp *bool                         `json:"organizationUseTotp,omitempty"`
	PasswordHistory     *[]CipherPasswordHistoryModel `json:"passwordHistory"`
	Reprompt            *CipherRepromptType           `json:"reprompt,omitempty"`
	RevisionDate        *time.Time                    `json:"revisionDate,omitempty"`
	SecureNote          *CipherSecureNoteModel        `json:"secureNote,omitempty"`
	Type                *CipherType                   `json:"type,omitempty"`
	ViewPassword        *bool                         `json:"viewPassword,omitempty"`
}

// CipherResponseModelListResponseModel defines model for CipherResponseModelListResponseModel.
type CipherResponseModelListResponseModel struct {
	ContinuationToken *string                `json:"continuationToken"`
	Data              *[]CipherResponseModel `json:"data"`
	Object            *string                `json:"object"`
}

// CipherSecureNoteModel defines model for CipherSecureNoteModel.
type CipherSecureNoteModel struct {
	Type *SecureNoteType `json:"type,omitempty"`
}

// CipherShareRequestModel defines model for CipherShareRequestModel.
type CipherShareRequestModel struct {
	Cipher        CipherRequestModel `json:"cipher"`
	CollectionIds []string           `json:"collectionIds"`
}

// CipherType defines model for CipherType.
type CipherType int32

// CipherWithIdRequestModel defines model for CipherWithIdRequestModel.
type CipherWithIdRequestModel struct {
	Attachments           *CipherWithIdRequestModel_Attachments  `json:"attachments"`
	Attachments2          *CipherWithIdRequestModel_Attachments2 `json:"attachments2"`
	Card                  *CipherCardModel                       `json:"card,omitempty"`
	Favorite              *bool                                  `json:"favorite,omitempty"`
	Fields                *[]CipherFieldModel                    `json:"fields"`
	FolderId              *string                                `json:"folderId"`
	Id                    string                                 `json:"id"`
	Identity              *CipherIdentityModel                   `json:"identity,omitempty"`
	LastKnownRevisionDate *time.Time                             `json:"lastKnownRevisionDate"`
	Login                 *CipherLoginModel                      `json:"login,omitempty"`
	Name                  string                                 `json:"name"`
	Notes                 *string                                `json:"notes"`
	OrganizationId        *string                                `json:"organizationId"`
	PasswordHistory       *[]CipherPasswordHistoryModel          `json:"passwordHistory"`
	Reprompt              *CipherRepromptType                    `json:"reprompt,omitempty"`
	SecureNote            *CipherSecureNoteModel                 `json:"secureNote,omitempty"`
	Type                  *CipherType                            `json:"type,omitempty"`
}

// CipherWithIdRequestModel_Attachments defines model for CipherWithIdRequestModel.Attachments.
type CipherWithIdRequestModel_Attachments struct {
	AdditionalProperties map[string]string `json:"-"`
}

// CipherWithIdRequestModel_Attachments2 defines model for CipherWithIdRequestModel.Attachments2.
type CipherWithIdRequestModel_Attachments2 struct {
	AdditionalProperties map[string]CipherAttachmentModel `json:"-"`
}

// CollectionDetailsResponseModel defines model for CollectionDetailsResponseModel.
type CollectionDetailsResponseModel struct {
	ExternalId     *string `json:"externalId"`
	HidePasswords  *bool   `json:"hidePasswords,omitempty"`
	Id             *string `json:"id"`
	Name           *string `json:"name"`
	Object         *string `json:"object"`
	OrganizationId *string `json:"organizationId"`
	ReadOnly       *bool   `json:"readOnly,omitempty"`
}

// CollectionDetailsResponseModelListResponseModel defines model for CollectionDetailsResponseModelListResponseModel.
type CollectionDetailsResponseModelListResponseModel struct {
	ContinuationToken *string                           `json:"continuationToken"`
	Data              *[]CollectionDetailsResponseModel `json:"data"`
	Object            *string                           `json:"object"`
}

// CollectionGroupDetailsResponseModel defines model for CollectionGroupDetailsResponseModel.
type CollectionGroupDetailsResponseModel struct {
	ExternalId     *string                           `json:"externalId"`
	Groups         *[]SelectionReadOnlyResponseModel `json:"groups"`
	Id             *string                           `json:"id"`
	Name           *string                           `json:"name"`
	Object         *string                           `json:"object"`
	OrganizationId *string                           `json:"organizationId"`
}

// CollectionRequestModel defines model for CollectionRequestModel.
type CollectionRequestModel struct {
	ExternalId *string                          `json:"externalId"`
	Groups     *[]SelectionReadOnlyRequestModel `json:"groups"`
	Name       string                           `json:"name"`
}

// CollectionResponseModel defines model for CollectionResponseModel.
type CollectionResponseModel struct {
	ExternalId     *string `json:"externalId"`
	Id             *string `json:"id"`
	Name           *string `json:"name"`
	Object         *string `json:"object"`
	OrganizationId *string `json:"organizationId"`
}

// CollectionResponseModelListResponseModel defines model for CollectionResponseModelListResponseModel.
type CollectionResponseModelListResponseModel struct {
	ContinuationToken *string                    `json:"continuationToken"`
	Data              *[]CollectionResponseModel `json:"data"`
	Object            *string                    `json:"object"`
}

// CredentialCreateOptions defines model for CredentialCreateOptions.
type CredentialCreateOptions struct {
	Attestation            *AttestationConveyancePreference      `json:"attestation,omitempty"`
	AuthenticatorSelection *AuthenticatorSelection               `json:"authenticatorSelection,omitempty"`
	Challenge              *[]byte                               `json:"challenge"`
	ErrorMessage           *string                               `json:"errorMessage"`
	ExcludeCredentials     *[]PublicKeyCredentialDescriptor      `json:"excludeCredentials"`
	Extensions             *AuthenticationExtensionsClientInputs `json:"extensions,omitempty"`
	PubKeyCredParams       *[]PubKeyCredParam                    `json:"pubKeyCredParams"`
	Rp                     *PublicKeyCredentialRpEntity          `json:"rp,omitempty"`
	Status                 *string                               `json:"status"`
	Timeout                *int64                                `json:"timeout,omitempty"`
	User                   *Fido2User                            `json:"user,omitempty"`
}

// DeleteAccountRequestModel defines model for DeleteAccountRequestModel.
type DeleteAccountRequestModel struct {
	MasterPasswordHash string `json:"masterPasswordHash"`
}

// DeleteRecoverRequestModel defines model for DeleteRecoverRequestModel.
type DeleteRecoverRequestModel struct {
	Email openapi_types.Email `json:"email"`
}

// DeviceRequestModel defines model for DeviceRequestModel.
type DeviceRequestModel struct {
	Identifier string     `json:"identifier"`
	Name       string     `json:"name"`
	PushToken  *string    `json:"pushToken"`
	Type       DeviceType `json:"type"`
}

// DeviceResponseModel defines model for DeviceResponseModel.
type DeviceResponseModel struct {
	CreationDate *time.Time  `json:"creationDate,omitempty"`
	Id           *string     `json:"id"`
	Identifier   *string     `json:"identifier"`
	Name         *string     `json:"name"`
	Object       *string     `json:"object"`
	Type         *DeviceType `json:"type,omitempty"`
}

// DeviceResponseModelListResponseModel defines model for DeviceResponseModelListResponseModel.
type DeviceResponseModelListResponseModel struct {
	ContinuationToken *string                `json:"continuationToken"`
	Data              *[]DeviceResponseModel `json:"data"`
	Object            *string                `json:"object"`
}

// DeviceTokenRequestModel defines model for DeviceTokenRequestModel.
type DeviceTokenRequestModel struct {
	PushToken *string `json:"pushToken"`
}

// DeviceType defines model for DeviceType.
type DeviceType int32

// DomainsResponseModel defines model for DomainsResponseModel.
type DomainsResponseModel struct {
	EquivalentDomains       *[][]string      `json:"equivalentDomains"`
	GlobalEquivalentDomains *[]GlobalDomains `json:"globalEquivalentDomains"`
	Object                  *string          `json:"object"`
}

// EmailRequestModel defines model for EmailRequestModel.
type EmailRequestModel struct {
	Key                   string              `json:"key"`
	MasterPasswordHash    string              `json:"masterPasswordHash"`
	NewEmail              openapi_types.Email `json:"newEmail"`
	NewMasterPasswordHash string              `json:"newMasterPasswordHash"`
	Token                 string              `json:"token"`
}

// EmailTokenRequestModel defines model for EmailTokenRequestModel.
type EmailTokenRequestModel struct {
	MasterPasswordHash string              `json:"masterPasswordHash"`
	NewEmail           openapi_types.Email `json:"newEmail"`
}

// EmergencyAccessGranteeDetailsResponseModel defines model for EmergencyAccessGranteeDetailsResponseModel.
type EmergencyAccessGranteeDetailsResponseModel struct {
	Email        *string                    `json:"email"`
	GranteeId    *string                    `json:"granteeId"`
	Id           *string                    `json:"id"`
	Name         *string                    `json:"name"`
	Object       *string                    `json:"object"`
	Status       *EmergencyAccessStatusType `json:"status,omitempty"`
	Type         *EmergencyAccessType       `json:"type,omitempty"`
	WaitTimeDays *int32                     `json:"waitTimeDays,omitempty"`
}

// EmergencyAccessGranteeDetailsResponseModelListResponseModel defines model for EmergencyAccessGranteeDetailsResponseModelListResponseModel.
type EmergencyAccessGranteeDetailsResponseModelListResponseModel struct {
	ContinuationToken *string                                       `json:"continuationToken"`
	Data              *[]EmergencyAccessGranteeDetailsResponseModel `json:"data"`
	Object            *string                                       `json:"object"`
}

// EmergencyAccessGrantorDetailsResponseModel defines model for EmergencyAccessGrantorDetailsResponseModel.
type EmergencyAccessGrantorDetailsResponseModel struct {
	Email        *string                    `json:"email"`
	GrantorId    *string                    `json:"grantorId"`
	Id           *string                    `json:"id"`
	Name         *string                    `json:"name"`
	Object       *string                    `json:"object"`
	Status       *EmergencyAccessStatusType `json:"status,omitempty"`
	Type         *EmergencyAccessType       `json:"type,omitempty"`
	WaitTimeDays *int32                     `json:"waitTimeDays,omitempty"`
}

// EmergencyAccessGrantorDetailsResponseModelListResponseModel defines model for EmergencyAccessGrantorDetailsResponseModelListResponseModel.
type EmergencyAccessGrantorDetailsResponseModelListResponseModel struct {
	ContinuationToken *string                                       `json:"continuationToken"`
	Data              *[]EmergencyAccessGrantorDetailsResponseModel `json:"data"`
	Object            *string                                       `json:"object"`
}

// EmergencyAccessInviteRequestModel defines model for EmergencyAccessInviteRequestModel.
type EmergencyAccessInviteRequestModel struct {
	Email        openapi_types.Email `json:"email"`
	Type         EmergencyAccessType `json:"type"`
	WaitTimeDays int32               `json:"waitTimeDays"`
}

// EmergencyAccessPasswordRequestModel defines model for EmergencyAccessPasswordRequestModel.
type EmergencyAccessPasswordRequestModel struct {
	Key                   string `json:"key"`
	NewMasterPasswordHash string `json:"newMasterPasswordHash"`
}

// EmergencyAccessStatusType defines model for EmergencyAccessStatusType.
type EmergencyAccessStatusType int32

// EmergencyAccessTakeoverResponseModel defines model for EmergencyAccessTakeoverResponseModel.
type EmergencyAccessTakeoverResponseModel struct {
	Kdf           *KdfType `json:"kdf,omitempty"`
	KdfIterations *int32   `json:"kdfIterations,omitempty"`
	KeyEncrypted  *string  `json:"keyEncrypted"`
	Object        *string  `json:"object"`
}

// EmergencyAccessType defines model for EmergencyAccessType.
type EmergencyAccessType int32

// EmergencyAccessUpdateRequestModel defines model for EmergencyAccessUpdateRequestModel.
type EmergencyAccessUpdateRequestModel struct {
	KeyEncrypted *string             `json:"keyEncrypted"`
	Type         EmergencyAccessType `json:"type"`
	WaitTimeDays int32               `json:"waitTimeDays"`
}

// EmergencyAccessViewResponseModel defines model for EmergencyAccessViewResponseModel.
type EmergencyAccessViewResponseModel struct {
	Ciphers      *[]CipherResponseModel `json:"ciphers"`
	KeyEncrypted *string                `json:"keyEncrypted"`
	Object       *string                `json:"object"`
}

// EventResponseModel defines model for EventResponseModel.
type EventResponseModel struct {
	ActingUserId       *string     `json:"actingUserId"`
	CipherId           *string     `json:"cipherId"`
	CollectionId       *string     `json:"collectionId"`
	Date               *time.Time  `json:"date,omitempty"`
	DeviceType         *DeviceType `json:"deviceType,omitempty"`
	GroupId            *string     `json:"groupId"`
	IpAddress          *string     `json:"ipAddress"`
	Object             *string     `json:"object"`
	OrganizationId     *string     `json:"organizationId"`
	OrganizationUserId *string     `json:"organizationUserId"`
	PolicyId           *string     `json:"policyId"`
	Type               *EventType  `json:"type,omitempty"`
	UserId             *string     `json:"userId"`
}

// EventResponseModelListResponseModel defines model for EventResponseModelListResponseModel.
type EventResponseModelListResponseModel struct {
	ContinuationToken *string               `json:"continuationToken"`
	Data              *[]EventResponseModel `json:"data"`
	Object            *string               `json:"object"`
}

// EventType defines model for EventType.
type EventType int32

// Fido2User defines model for Fido2User.
type Fido2User struct {
	DisplayName *string `json:"displayName"`
	Id          *[]byte `json:"id"`
	Name        *string `json:"name"`
}

// FieldType defines model for FieldType.
type FieldType int32

// FileUploadType defines model for FileUploadType.
type FileUploadType int32

// FolderRequestModel defines model for FolderRequestModel.
type FolderRequestModel struct {
	Name string `json:"name"`
}

// FolderResponseModel defines model for FolderResponseModel.
type FolderResponseModel struct {
	Id           *string    `json:"id"`
	Name         *string    `json:"name"`
	Object       *string    `json:"object"`
	RevisionDate *time.Time `json:"revisionDate,omitempty"`
}

// FolderResponseModelListResponseModel defines model for FolderResponseModelListResponseModel.
type FolderResponseModelListResponseModel struct {
	ContinuationToken *string                `json:"continuationToken"`
	Data              *[]FolderResponseModel `json:"data"`
	Object            *string                `json:"object"`
}

// FolderWithIdRequestModel defines model for FolderWithIdRequestModel.
type FolderWithIdRequestModel struct {
	Id   *string `json:"id,omitempty"`
	Name string  `json:"name"`
}

// GeoCoordinate defines model for GeoCoordinate.
type GeoCoordinate struct {
	Altitude           *float64 `json:"altitude,omitempty"`
	Course             *float64 `json:"course,omitempty"`
	HorizontalAccuracy *float64 `json:"horizontalAccuracy,omitempty"`
	IsUnknown          *bool    `json:"isUnknown,omitempty"`
	Latitude           *float64 `json:"latitude,omitempty"`
	Longitude          *float64 `json:"longitude,omitempty"`
	Speed              *float64 `json:"speed,omitempty"`
	VerticalAccuracy   *float64 `json:"verticalAccuracy,omitempty"`
}

// GlobalDomains defines model for GlobalDomains.
type GlobalDomains struct {
	Domains  *[]string                    `json:"domains"`
	Excluded *bool                        `json:"excluded,omitempty"`
	Type     *GlobalEquivalentDomainsType `json:"type,omitempty"`
}

// GlobalEquivalentDomainsType defines model for GlobalEquivalentDomainsType.
type GlobalEquivalentDomainsType int32

// Group defines model for Group.
type Group struct {
	ExternalId string    `json:"externalId"`
	Name       string    `json:"name"`
	Users      *[]string `json:"users"`
}

// GroupDetailsResponseModel defines model for GroupDetailsResponseModel.
type GroupDetailsResponseModel struct {
	AccessAll      *bool                             `json:"accessAll,omitempty"`
	Collections    *[]SelectionReadOnlyResponseModel `json:"collections"`
	ExternalId     *string                           `json:"externalId"`
	Id             *string                           `json:"id"`
	Name           *string                           `json:"name"`
	Object         *string                           `json:"object"`
	OrganizationId *string                           `json:"organizationId"`
}

// GroupRequestModel defines model for GroupRequestModel.
type GroupRequestModel struct {
	AccessAll   bool                             `json:"accessAll"`
	Collections *[]SelectionReadOnlyRequestModel `json:"collections"`
	ExternalId  *string                          `json:"externalId"`
	Name        string                           `json:"name"`
}

// GroupResponseModel defines model for GroupResponseModel.
type GroupResponseModel struct {
	AccessAll      *bool   `json:"accessAll,omitempty"`
	ExternalId     *string `json:"externalId"`
	Id             *string `json:"id"`
	Name           *string `json:"name"`
	Object         *string `json:"object"`
	OrganizationId *string `json:"organizationId"`
}

// GroupResponseModelListResponseModel defines model for GroupResponseModelListResponseModel.
type GroupResponseModelListResponseModel struct {
	ContinuationToken *string               `json:"continuationToken"`
	Data              *[]GroupResponseModel `json:"data"`
	Object            *string               `json:"object"`
}

// IapCheckRequestModel defines model for IapCheckRequestModel.
type IapCheckRequestModel struct {
	PaymentMethodType PaymentMethodType `json:"paymentMethodType"`
}

// ImportCiphersRequestModel defines model for ImportCiphersRequestModel.
type ImportCiphersRequestModel struct {
	Ciphers             *[]CipherRequestModel     `json:"ciphers"`
	FolderRelationships *[]Int32Int32KeyValuePair `json:"folderRelationships"`
	Folders             *[]FolderRequestModel     `json:"folders"`
}

// ImportOrganizationCiphersRequestModel defines model for ImportOrganizationCiphersRequestModel.
type ImportOrganizationCiphersRequestModel struct {
	Ciphers                 *[]CipherRequestModel     `json:"ciphers"`
	CollectionRelationships *[]Int32Int32KeyValuePair `json:"collectionRelationships"`
	Collections             *[]CollectionRequestModel `json:"collections"`
}

// ImportOrganizationUsersRequestModel defines model for ImportOrganizationUsersRequestModel.
type ImportOrganizationUsersRequestModel struct {
	Groups            *[]Group `json:"groups"`
	LargeImport       *bool    `json:"largeImport,omitempty"`
	OverwriteExisting *bool    `json:"overwriteExisting,omitempty"`
	Users             *[]User  `json:"users"`
}

// InstallationRequestModel defines model for InstallationRequestModel.
type InstallationRequestModel struct {
	Email openapi_types.Email `json:"email"`
}

// InstallationResponseModel defines model for InstallationResponseModel.
type InstallationResponseModel struct {
	Enabled *bool   `json:"enabled,omitempty"`
	Id      *string `json:"id"`
	Key     *string `json:"key"`
	Object  *string `json:"object"`
}

// Int32Int32KeyValuePair defines model for Int32Int32KeyValuePair.
type Int32Int32KeyValuePair struct {
	Key   *int32 `json:"key,omitempty"`
	Value *int32 `json:"value,omitempty"`
}

// KdfRequestModel defines model for KdfRequestModel.
type KdfRequestModel struct {
	Kdf                   KdfType `json:"kdf"`
	KdfIterations         int32   `json:"kdfIterations"`
	Key                   string  `json:"key"`
	MasterPasswordHash    string  `json:"masterPasswordHash"`
	NewMasterPasswordHash string  `json:"newMasterPasswordHash"`
}

// KdfType defines model for KdfType.
type KdfType int32

// KeyModel defines model for KeyModel.
type KeyModel struct {
	Id       *int32  `json:"id,omitempty"`
	Migrated *bool   `json:"migrated,omitempty"`
	Name     *string `json:"name"`
}

// KeysRequestModel defines model for KeysRequestModel.
type KeysRequestModel struct {
	EncryptedPrivateKey string  `json:"encryptedPrivateKey"`
	PublicKey           *string `json:"publicKey"`
}

// KeysResponseModel defines model for KeysResponseModel.
type KeysResponseModel struct {
	Key        *string `json:"key"`
	Object     *string `json:"object"`
	PrivateKey *string `json:"privateKey"`
	PublicKey  *string `json:"publicKey"`
}

// OrganizationCreateRequestModel defines model for OrganizationCreateRequestModel.
type OrganizationCreateRequestModel struct {
	AdditionalSeats          *int32                        `json:"additionalSeats,omitempty"`
	AdditionalStorageGb      *int32                        `json:"additionalStorageGb"`
	BillingAddressCity       *string                       `json:"billingAddressCity"`
	BillingAddressCountry    *string                       `json:"billingAddressCountry"`
	BillingAddressLine1      *string                       `json:"billingAddressLine1"`
	BillingAddressLine2      *string                       `json:"billingAddressLine2"`
	BillingAddressPostalCode *string                       `json:"billingAddressPostalCode"`
	BillingAddressState      *string                       `json:"billingAddressState"`
	BillingEmail             openapi_types.Email           `json:"billingEmail"`
	BusinessName             *string                       `json:"businessName"`
	CollectionName           *string                       `json:"collectionName"`
	Key                      string                        `json:"key"`
	Keys                     *OrganizationKeysRequestModel `json:"keys,omitempty"`
	Name                     string                        `json:"name"`
	PaymentMethodType        *PaymentMethodType            `json:"paymentMethodType,omitempty"`
	PaymentToken             *string                       `json:"paymentToken"`
	PlanType                 *PlanType                     `json:"planType,omitempty"`
	PremiumAccessAddon       *bool                         `json:"premiumAccessAddon,omitempty"`
	TaxIdNumber              *string                       `json:"taxIdNumber"`
}

// OrganizationDeleteRequestModel defines model for OrganizationDeleteRequestModel.
type OrganizationDeleteRequestModel struct {
	MasterPasswordHash string `json:"masterPasswordHash"`
}

// OrganizationKeysRequestModel defines model for OrganizationKeysRequestModel.
type OrganizationKeysRequestModel struct {
	EncryptedPrivateKey string `json:"encryptedPrivateKey"`
	PublicKey           string `json:"publicKey"`
}

// OrganizationKeysResponseModel defines model for OrganizationKeysResponseModel.
type OrganizationKeysResponseModel struct {
	Object     *string `json:"object"`
	PrivateKey *string `json:"privateKey"`
	PublicKey  *string `json:"publicKey"`
}

// OrganizationLicense defines model for OrganizationLicense.
type OrganizationLicense struct {
	BillingEmail     *string    `json:"billingEmail"`
	BusinessName     *string    `json:"businessName"`
	Enabled          *bool      `json:"enabled,omitempty"`
	Expires          *time.Time `json:"expires"`
	Hash             *string    `json:"hash"`
	Id               *string    `json:"id,omitempty"`
	InstallationId   *string    `json:"installationId,omitempty"`
	Issued           *time.Time `json:"issued,omitempty"`
	LicenseKey       *string    `json:"licenseKey"`
	MaxCollections   *int32     `json:"maxCollections"`
	MaxStorageGb     *int32     `json:"maxStorageGb"`
	Name             *string    `json:"name"`
	Plan             *string    `json:"plan"`
	PlanType         *PlanType  `json:"planType,omitempty"`
	Refresh          *time.Time `json:"refresh"`
	Seats            *int32     `json:"seats"`
	SelfHost         *bool      `json:"selfHost,omitempty"`
	Signature        *string    `json:"signature"`
	SignatureBytes   *[]byte    `json:"signatureBytes"`
	Trial            *bool      `json:"trial,omitempty"`
	Use2fa           *bool      `json:"use2fa,omitempty"`
	UseApi           *bool      `json:"useApi,omitempty"`
	UseDirectory     *bool      `json:"useDirectory,omitempty"`
	UseEvents        *bool      `json:"useEvents,omitempty"`
	UseGroups        *bool      `json:"useGroups,omitempty"`
	UsePolicies      *bool      `json:"usePolicies,omitempty"`
	UseResetPassword *bool      `json:"useResetPassword,omitempty"`
	UseSso           *bool      `json:"useSso,omitempty"`
	UseTotp          *bool      `json:"useTotp,omitempty"`
	UsersGetPremium  *bool      `json:"usersGetPremium,omitempty"`
	Version          *int32     `json:"version,omitempty"`
}

// OrganizationResponseModel defines model for OrganizationResponseModel.
type OrganizationResponseModel struct {
	BillingEmail            *string            `json:"billingEmail"`
	BusinessAddress1        *string            `json:"businessAddress1"`
	BusinessAddress2        *string            `json:"businessAddress2"`
	BusinessAddress3        *string            `json:"businessAddress3"`
	BusinessCountry         *string            `json:"businessCountry"`
	BusinessName            *string            `json:"businessName"`
	BusinessTaxNumber       *string            `json:"businessTaxNumber"`
	HasPublicAndPrivateKeys *bool              `json:"hasPublicAndPrivateKeys,omitempty"`
	Id                      *string            `json:"id"`
	Identifier              *string            `json:"identifier"`
	MaxCollections          *int32             `json:"maxCollections"`
	MaxStorageGb            *int32             `json:"maxStorageGb"`
	Name                    *string            `json:"name"`
	Object                  *string            `json:"object"`
	Plan                    *PlanResponseModel `json:"plan,omitempty"`
	PlanType                *PlanType          `json:"planType,omitempty"`
	Seats                   *int32             `json:"seats"`
	SelfHost                *bool              `json:"selfHost,omitempty"`
	Use2fa                  *bool              `json:"use2fa,omitempty"`
	UseApi                  *bool              `json:"useApi,omitempty"`
	UseDirectory            *bool              `json:"useDirectory,omitempty"`
	UseEvents               *bool              `json:"useEvents,omitempty"`
	UseGroups               *bool              `json:"useGroups,omitempty"`
	UsePolicies             *bool              `json:"usePolicies,omitempty"`
	UseResetPassword        *bool              `json:"useResetPassword,omitempty"`
	UseSso                  *bool              `json:"useSso,omitempty"`
	UseTotp                 *bool              `json:"useTotp,omitempty"`
	UsersGetPremium         *bool              `json:"usersGetPremium,omitempty"`
}

// OrganizationSeatRequestModel defines model for OrganizationSeatRequestModel.
type OrganizationSeatRequestModel struct {
	SeatAdjustment int32 `json:"seatAdjustment"`
}

// OrganizationSubscriptionResponseModel defines model for OrganizationSubscriptionResponseModel.
type OrganizationSubscriptionResponseModel struct {
	BillingEmail            *string                             `json:"billingEmail"`
	BusinessAddress1        *string                             `json:"businessAddress1"`
	BusinessAddress2        *string                             `json:"businessAddress2"`
	BusinessAddress3        *string                             `json:"businessAddress3"`
	BusinessCountry         *string                             `json:"businessCountry"`
	BusinessName            *string                             `json:"businessName"`
	BusinessTaxNumber       *string                             `json:"businessTaxNumber"`
	Expiration              *time.Time                          `json:"expiration"`
	HasPublicAndPrivateKeys *bool                               `json:"hasPublicAndPrivateKeys,omitempty"`
	Id                      *string                             `json:"id"`
	Identifier              *string                             `json:"identifier"`
	MaxCollections          *int32                              `json:"maxCollections"`
	MaxStorageGb            *int32                              `json:"maxStorageGb"`
	Name                    *string                             `json:"name"`
	Object                  *string                             `json:"object"`
	Plan                    *PlanResponseModel                  `json:"plan,omitempty"`
	PlanType                *PlanType                           `json:"planType,omitempty"`
	Seats                   *int32                              `json:"seats"`
	SelfHost                *bool                               `json:"selfHost,omitempty"`
	StorageGb               *float64                            `json:"storageGb"`
	StorageName             *string                             `json:"storageName"`
	Subscription            *BillingSubscription                `json:"subscription,omitempty"`
	UpcomingInvoice         *BillingSubscriptionUpcomingInvoice `json:"upcomingInvoice,omitempty"`
	Use2fa                  *bool                               `json:"use2fa,omitempty"`
	UseApi                  *bool                               `json:"useApi,omitempty"`
	UseDirectory            *bool                               `json:"useDirectory,omitempty"`
	UseEvents               *bool                               `json:"useEvents,omitempty"`
	UseGroups               *bool                               `json:"useGroups,omitempty"`
	UsePolicies             *bool                               `json:"usePolicies,omitempty"`
	UseResetPassword        *bool                               `json:"useResetPassword,omitempty"`
	UseSso                  *bool                               `json:"useSso,omitempty"`
	UseTotp                 *bool                               `json:"useTotp,omitempty"`
	UsersGetPremium         *bool                               `json:"usersGetPremium,omitempty"`
}

// OrganizationTaxInfoUpdateRequestModel defines model for OrganizationTaxInfoUpdateRequestModel.
type OrganizationTaxInfoUpdateRequestModel struct {
	City       *string `json:"city"`
	Country    string  `json:"country"`
	Line1      *string `json:"line1"`
	Line2      *string `json:"line2"`
	PostalCode *string `json:"postalCode"`
	State      *string `json:"state"`
	TaxId      *string `json:"taxId"`
}

// OrganizationUpdateRequestModel defines model for OrganizationUpdateRequestModel.
type OrganizationUpdateRequestModel struct {
	BillingEmail openapi_types.Email           `json:"billingEmail"`
	BusinessName *string                       `json:"businessName"`
	Identifier   *string                       `json:"identifier"`
	Keys         *OrganizationKeysRequestModel `json:"keys,omitempty"`
	Name         string                        `json:"name"`
	Permissions  *Permissions                  `json:"permissions,omitempty"`
}

// OrganizationUpgradeRequestModel defines model for OrganizationUpgradeRequestModel.
type OrganizationUpgradeRequestModel struct {
	AdditionalSeats          *int32                        `json:"additionalSeats,omitempty"`
	AdditionalStorageGb      *int32                        `json:"additionalStorageGb"`
	BillingAddressCountry    *string                       `json:"billingAddressCountry"`
	BillingAddressPostalCode *string                       `json:"billingAddressPostalCode"`
	BusinessName             *string                       `json:"businessName"`
	Keys                     *OrganizationKeysRequestModel `json:"keys,omitempty"`
	PlanType                 *PlanType                     `json:"planType,omitempty"`
	PremiumAccessAddon       *bool                         `json:"premiumAccessAddon,omitempty"`
}

// OrganizationUserAcceptRequestModel defines model for OrganizationUserAcceptRequestModel.
type OrganizationUserAcceptRequestModel struct {
	Token string `json:"token"`
}

// OrganizationUserBulkConfirmRequestModel defines model for OrganizationUserBulkConfirmRequestModel.
type OrganizationUserBulkConfirmRequestModel struct {
	Keys []OrganizationUserBulkConfirmRequestModelEntry `json:"keys"`
}

// OrganizationUserBulkConfirmRequestModelEntry defines model for OrganizationUserBulkConfirmRequestModelEntry.
type OrganizationUserBulkConfirmRequestModelEntry struct {
	Id  string `json:"id"`
	Key string `json:"key"`
}

// OrganizationUserBulkRequestModel defines model for OrganizationUserBulkRequestModel.
type OrganizationUserBulkRequestModel struct {
	Ids []string `json:"ids"`
}

// OrganizationUserBulkResponseModel defines model for OrganizationUserBulkResponseModel.
type OrganizationUserBulkResponseModel struct {
	Error  *string `json:"error"`
	Id     *string `json:"id,omitempty"`
	Object *string `json:"object"`
}

// OrganizationUserBulkResponseModelListResponseModel defines model for OrganizationUserBulkResponseModelListResponseModel.
type OrganizationUserBulkResponseModelListResponseModel struct {
	ContinuationToken *string                              `json:"continuationToken"`
	Data              *[]OrganizationUserBulkResponseModel `json:"data"`
	Object            *string                              `json:"object"`
}

// OrganizationUserConfirmRequestModel defines model for OrganizationUserConfirmRequestModel.
type OrganizationUserConfirmRequestModel struct {
	Key string `json:"key"`
}

// OrganizationUserDetailsResponseModel defines model for OrganizationUserDetailsResponseModel.
type OrganizationUserDetailsResponseModel struct {
	AccessAll             *bool                             `json:"accessAll,omitempty"`
	Collections           *[]SelectionReadOnlyResponseModel `json:"collections"`
	Id                    *string                           `json:"id"`
	Object                *string                           `json:"object"`
	Permissions           *Permissions                      `json:"permissions,omitempty"`
	ResetPasswordEnrolled *bool                             `json:"resetPasswordEnrolled,omitempty"`
	Status                *OrganizationUserStatusType       `json:"status,omitempty"`
	Type                  *OrganizationUserType             `json:"type,omitempty"`
	UserId                *string                           `json:"userId"`
}

// OrganizationUserInviteRequestModel defines model for OrganizationUserInviteRequestModel.
type OrganizationUserInviteRequestModel struct {
	AccessAll   *bool                            `json:"accessAll,omitempty"`
	Collections *[]SelectionReadOnlyRequestModel `json:"collections"`
	Emails      []string                         `json:"emails"`
	Permissions *Permissions                     `json:"permissions,omitempty"`
	Type        OrganizationUserType             `json:"type"`
}

// OrganizationUserPublicKeyResponseModel defines model for OrganizationUserPublicKeyResponseModel.
type OrganizationUserPublicKeyResponseModel struct {
	Id     *string `json:"id,omitempty"`
	Key    *string `json:"key"`
	Object *string `json:"object"`
}

// OrganizationUserPublicKeyResponseModelListResponseModel defines model for OrganizationUserPublicKeyResponseModelListResponseModel.
type OrganizationUserPublicKeyResponseModelListResponseModel struct {
	ContinuationToken *string                                   `json:"continuationToken"`
	Data              *[]OrganizationUserPublicKeyResponseModel `json:"data"`
	Object            *string                                   `json:"object"`
}

// OrganizationUserResetPasswordDetailsResponseModel defines model for OrganizationUserResetPasswordDetailsResponseModel.
type OrganizationUserResetPasswordDetailsResponseModel struct {
	EncryptedPrivateKey *string  `json:"encryptedPrivateKey"`
	Kdf                 *KdfType `json:"kdf,omitempty"`
	KdfIterations       *int32   `json:"kdfIterations,omitempty"`
	Object              *string  `json:"object"`
	ResetPasswordKey    *string  `json:"resetPasswordKey"`
}

// OrganizationUserResetPasswordEnrollmentRequestModel defines model for OrganizationUserResetPasswordEnrollmentRequestModel.
type OrganizationUserResetPasswordEnrollmentRequestModel struct {
	ResetPasswordKey *string `json:"resetPasswordKey"`
}

// OrganizationUserResetPasswordRequestModel defines model for OrganizationUserResetPasswordRequestModel.
type OrganizationUserResetPasswordRequestModel struct {
	Key                   string `json:"key"`
	NewMasterPasswordHash string `json:"newMasterPasswordHash"`
}

// OrganizationUserStatusType defines model for OrganizationUserStatusType.
type OrganizationUserStatusType int32

// OrganizationUserType defines model for OrganizationUserType.
type OrganizationUserType int32

// OrganizationUserUpdateGroupsRequestModel defines model for OrganizationUserUpdateGroupsRequestModel.
type OrganizationUserUpdateGroupsRequestModel struct {
	GroupIds []string `json:"groupIds"`
}

// OrganizationUserUpdateRequestModel defines model for OrganizationUserUpdateRequestModel.
type OrganizationUserUpdateRequestModel struct {
	AccessAll   *bool                            `json:"accessAll,omitempty"`
	Collections *[]SelectionReadOnlyRequestModel `json:"collections"`
	Permissions *Permissions                     `json:"permissions,omitempty"`
	Type        OrganizationUserType             `json:"type"`
}

// OrganizationUserUserDetailsResponseModel defines model for OrganizationUserUserDetailsResponseModel.
type OrganizationUserUserDetailsResponseModel struct {
	AccessAll             *bool                       `json:"accessAll,omitempty"`
	Email                 *string                     `json:"email"`
	Id                    *string                     `json:"id"`
	Name                  *string                     `json:"name"`
	Object                *string                     `json:"object"`
	Permissions           *Permissions                `json:"permissions,omitempty"`
	ResetPasswordEnrolled *bool                       `json:"resetPasswordEnrolled,omitempty"`
	SsoBound              *bool                       `json:"ssoBound,omitempty"`
	Status                *OrganizationUserStatusType `json:"status,omitempty"`
	TwoFactorEnabled      *bool                       `json:"twoFactorEnabled,omitempty"`
	Type                  *OrganizationUserType       `json:"type,omitempty"`
	UserId                *string                     `json:"userId"`
}

// OrganizationUserUserDetailsResponseModelListResponseModel defines model for OrganizationUserUserDetailsResponseModelListResponseModel.
type OrganizationUserUserDetailsResponseModelListResponseModel struct {
	ContinuationToken *string                                     `json:"continuationToken"`
	Data              *[]OrganizationUserUserDetailsResponseModel `json:"data"`
	Object            *string                                     `json:"object"`
}

// OrganizationVerifyBankRequestModel defines model for OrganizationVerifyBankRequestModel.
type OrganizationVerifyBankRequestModel struct {
	Amount1 int32 `json:"amount1"`
	Amount2 int32 `json:"amount2"`
}

// PasswordHintRequestModel defines model for PasswordHintRequestModel.
type PasswordHintRequestModel struct {
	Email openapi_types.Email `json:"email"`
}

// PasswordRequestModel defines model for PasswordRequestModel.
type PasswordRequestModel struct {
	Key                   string `json:"key"`
	MasterPasswordHash    string `json:"masterPasswordHash"`
	NewMasterPasswordHash string `json:"newMasterPasswordHash"`
}

// PaymentMethodType defines model for PaymentMethodType.
type PaymentMethodType int32

// PaymentRequestModel defines model for PaymentRequestModel.
type PaymentRequestModel struct {
	City              *string           `json:"city"`
	Country           string            `json:"country"`
	Line1             *string           `json:"line1"`
	Line2             *string           `json:"line2"`
	PaymentMethodType PaymentMethodType `json:"paymentMethodType"`
	PaymentToken      string            `json:"paymentToken"`
	PostalCode        *string           `json:"postalCode"`
	State             *string           `json:"state"`
	TaxId             *string           `json:"taxId"`
}

// PaymentResponseModel defines model for PaymentResponseModel.
type PaymentResponseModel struct {
	Object                    *string               `json:"object"`
	PaymentIntentClientSecret *string               `json:"paymentIntentClientSecret"`
	Success                   *bool                 `json:"success,omitempty"`
	UserProfile               *ProfileResponseModel `json:"userProfile,omitempty"`
}

// Permissions defines model for Permissions.
type Permissions struct {
	AccessBusinessPortal      *bool `json:"accessBusinessPortal,omitempty"`
	AccessEventLogs           *bool `json:"accessEventLogs,omitempty"`
	AccessImportExport        *bool `json:"accessImportExport,omitempty"`
	AccessReports             *bool `json:"accessReports,omitempty"`
	ManageAllCollections      *bool `json:"manageAllCollections,omitempty"`
	ManageAssignedCollections *bool `json:"manageAssignedCollections,omitempty"`
	ManageGroups              *bool `json:"manageGroups,omitempty"`
	ManagePolicies            *bool `json:"managePolicies,omitempty"`
	ManageResetPassword       *bool `json:"manageResetPassword,omitempty"`
	ManageSso                 *bool `json:"manageSso,omitempty"`
	ManageUsers               *bool `json:"manageUsers,omitempty"`
}

// PlanResponseModel defines model for PlanResponseModel.
type PlanResponseModel struct {
	AdditionalStoragePricePerGb *float64     `json:"additionalStoragePricePerGb,omitempty"`
	BasePrice                   *float64     `json:"basePrice,omitempty"`
	BaseSeats                   *int32       `json:"baseSeats,omitempty"`
	BaseStorageGb               *int32       `json:"baseStorageGb"`
	CanBeUsedByBusiness         *bool        `json:"canBeUsedByBusiness,omitempty"`
	DescriptionLocalizationKey  *string      `json:"descriptionLocalizationKey"`
	Disabled                    *bool        `json:"disabled,omitempty"`
	DisplaySortOrder            *int32       `json:"displaySortOrder,omitempty"`
	Has2fa                      *bool        `json:"has2fa,omitempty"`
	HasAdditionalSeatsOption    *bool        `json:"hasAdditionalSeatsOption,omitempty"`
	HasAdditionalStorageOption  *bool        `json:"hasAdditionalStorageOption,omitempty"`
	HasApi                      *bool        `json:"hasApi,omitempty"`
	HasDirectory                *bool        `json:"hasDirectory,omitempty"`
	HasEvents                   *bool        `json:"hasEvents,omitempty"`
	HasGroups                   *bool        `json:"hasGroups,omitempty"`
	HasPolicies                 *bool        `json:"hasPolicies,omitempty"`
	HasPremiumAccessOption      *bool        `json:"hasPremiumAccessOption,omitempty"`
	HasResetPassword            *bool        `json:"hasResetPassword,omitempty"`
	HasSelfHost                 *bool        `json:"hasSelfHost,omitempty"`
	HasSso                      *bool        `json:"hasSso,omitempty"`
	HasTotp                     *bool        `json:"hasTotp,omitempty"`
	IsAnnual                    *bool        `json:"isAnnual,omitempty"`
	LegacyYear                  *int32       `json:"legacyYear"`
	MaxAdditionalSeats          *int32       `json:"maxAdditionalSeats"`
	MaxAdditionalStorage        *int32       `json:"maxAdditionalStorage"`
	MaxCollections              *int32       `json:"maxCollections"`
	MaxUsers                    *int32       `json:"maxUsers"`
	Name                        *string      `json:"name"`
	NameLocalizationKey         *string      `json:"nameLocalizationKey"`
	Object                      *string      `json:"object"`
	PremiumAccessOptionPrice    *float64     `json:"premiumAccessOptionPrice,omitempty"`
	Product                     *ProductType `json:"product,omitempty"`
	SeatPrice                   *float64     `json:"seatPrice,omitempty"`
	StripePlanId                *string      `json:"stripePlanId"`
	StripePremiumAccessPlanId   *string      `json:"stripePremiumAccessPlanId"`
	StripeSeatPlanId            *string      `json:"stripeSeatPlanId"`
	StripeStoragePlanId         *string      `json:"stripeStoragePlanId"`
	TrialPeriodDays             *int32       `json:"trialPeriodDays"`
	Type                        *PlanType    `json:"type,omitempty"`
	UpgradeSortOrder            *int32       `json:"upgradeSortOrder,omitempty"`
	UsersGetPremium             *bool        `json:"usersGetPremium,omitempty"`
}

// PlanResponseModelListResponseModel defines model for PlanResponseModelListResponseModel.
type PlanResponseModelListResponseModel struct {
	ContinuationToken *string              `json:"continuationToken"`
	Data              *[]PlanResponseModel `json:"data"`
	Object            *string              `json:"object"`
}

// PlanType defines model for PlanType.
type PlanType int32

// PolicyRequestModel defines model for PolicyRequestModel.
type PolicyRequestModel struct {
	Data    *PolicyRequestModel_Data `json:"data"`
	Enabled bool                     `json:"enabled"`
	Type    PolicyType               `json:"type"`
}

// PolicyRequestModel_Data defines model for PolicyRequestModel.Data.
type PolicyRequestModel_Data struct {
	AdditionalProperties map[string]map[string]interface{} `json:"-"`
}

// PolicyResponseModel defines model for PolicyResponseModel.
type PolicyResponseModel struct {
	Data           *PolicyResponseModel_Data `json:"data"`
	Enabled        *bool                     `json:"enabled,omitempty"`
	Id             *string                   `json:"id"`
	Object         *string                   `json:"object"`
	OrganizationId *string                   `json:"organizationId"`
	Type           *PolicyType               `json:"type,omitempty"`
}

// PolicyResponseModel_Data defines model for PolicyResponseModel.Data.
type PolicyResponseModel_Data struct {
	AdditionalProperties map[string]map[string]interface{} `json:"-"`
}

// PolicyResponseModelListResponseModel defines model for PolicyResponseModelListResponseModel.
type PolicyResponseModelListResponseModel struct {
	ContinuationToken *string                `json:"continuationToken"`
	Data              *[]PolicyResponseModel `json:"data"`
	Object            *string                `json:"object"`
}

// PolicyType defines model for PolicyType.
type PolicyType int32

// PreloginRequestModel defines model for PreloginRequestModel.
type PreloginRequestModel struct {
	Email openapi_types.Email `json:"email"`
}

// PreloginResponseModel defines model for PreloginResponseModel.
type PreloginResponseModel struct {
	Kdf           *KdfType `json:"kdf,omitempty"`
	KdfIterations *int32   `json:"kdfIterations,omitempty"`
}

// ProductType defines model for ProductType.
type ProductType int32

// ProfileOrganizationResponseModel defines model for ProfileOrganizationResponseModel.
type ProfileOrganizationResponseModel struct {
	Enabled                 *bool                       `json:"enabled,omitempty"`
	HasPublicAndPrivateKeys *bool                       `json:"hasPublicAndPrivateKeys,omitempty"`
	Id                      *string                     `json:"id"`
	Identifier              *string                     `json:"identifier"`
	Key                     *string                     `json:"key"`
	MaxCollections          *int32                      `json:"maxCollections,omitempty"`
	MaxStorageGb            *int32                      `json:"maxStorageGb"`
	Name                    *string                     `json:"name"`
	Object                  *string                     `json:"object"`
	Permissions             *Permissions                `json:"permissions,omitempty"`
	ResetPasswordEnrolled   *bool                       `json:"resetPasswordEnrolled,omitempty"`
	Seats                   *int32                      `json:"seats,omitempty"`
	SelfHost                *bool                       `json:"selfHost,omitempty"`
	SsoBound                *bool                       `json:"ssoBound,omitempty"`
	Status                  *OrganizationUserStatusType `json:"status,omitempty"`
	Type                    *OrganizationUserType       `json:"type,omitempty"`
	Use2fa                  *bool                       `json:"use2fa,omitempty"`
	UseApi                  *bool                       `json:"useApi,omitempty"`
	UseBusinessPortal       *bool                       `json:"useBusinessPortal,omitempty"`
	UseDirectory            *bool                       `json:"useDirectory,omitempty"`
	UseEvents               *bool                       `json:"useEvents,omitempty"`
	UseGroups               *bool                       `json:"useGroups,omitempty"`
	UsePolicies             *bool                       `json:"usePolicies,omitempty"`
	UseResetPassword        *bool                       `json:"useResetPassword,omitempty"`
	UseSso                  *bool                       `json:"useSso,omitempty"`
	UseTotp                 *bool                       `json:"useTotp,omitempty"`
	UserId                  *string                     `json:"userId"`
	UsersGetPremium         *bool                       `json:"usersGetPremium,omitempty"`
}

// ProfileOrganizationResponseModelListResponseModel defines model for ProfileOrganizationResponseModelListResponseModel.
type ProfileOrganizationResponseModelListResponseModel struct {
	ContinuationToken *string                             `json:"continuationToken"`
	Data              *[]ProfileOrganizationResponseModel `json:"data"`
	Object            *string                             `json:"object"`
}

// ProfileResponseModel defines model for ProfileResponseModel.
type ProfileResponseModel struct {
	Culture            *string                             `json:"culture"`
	Email              *string                             `json:"email"`
	EmailVerified      *bool                               `json:"emailVerified,omitempty"`
	Id                 *string                             `json:"id"`
	Key                *string                             `json:"key"`
	MasterPasswordHint *string                             `json:"masterPasswordHint"`
	Name               *string                             `json:"name"`
	Object             *string                             `json:"object"`
	Organizations      *[]ProfileOrganizationResponseModel `json:"organizations"`
	Premium            *bool                               `json:"premium,omitempty"`
	PrivateKey         *string                             `json:"privateKey"`
	SecurityStamp      *string                             `json:"securityStamp"`
	TwoFactorEnabled   *bool                               `json:"twoFactorEnabled,omitempty"`
}

// PubKeyCredParam defines model for PubKeyCredParam.
type PubKeyCredParam struct {
	Alg  *int64                   `json:"alg,omitempty"`
	Type *PublicKeyCredentialType `json:"type,omitempty"`
}

// PublicKeyCredentialDescriptor defines model for PublicKeyCredentialDescriptor.
type PublicKeyCredentialDescriptor struct {
	Id         *[]byte                   `json:"id"`
	Transports *[]AuthenticatorTransport `json:"transports"`
	Type       *PublicKeyCredentialType  `json:"type,omitempty"`
}

// PublicKeyCredentialRpEntity defines model for PublicKeyCredentialRpEntity.
type PublicKeyCredentialRpEntity struct {
	Icon *string `json:"icon"`
	Id   *string `json:"id"`
	Name *string `json:"name"`
}

// PublicKeyCredentialType defines model for PublicKeyCredentialType.
type PublicKeyCredentialType int32

// PushRegistrationRequestModel defines model for PushRegistrationRequestModel.
type PushRegistrationRequestModel struct {
	DeviceId   string     `json:"deviceId"`
	Identifier string     `json:"identifier"`
	PushToken  string     `json:"pushToken"`
	Type       DeviceType `json:"type"`
	UserId     string     `json:"userId"`
}

// PushSendRequestModel defines model for PushSendRequestModel.
type PushSendRequestModel struct {
	DeviceId       *string                `json:"deviceId"`
	Identifier     *string                `json:"identifier"`
	OrganizationId *string                `json:"organizationId"`
	Payload        map[string]interface{} `json:"payload"`
	Type           PushType               `json:"type"`
	UserId         *string                `json:"userId"`
}

// PushType defines model for PushType.
type PushType int32

// PushUpdateRequestModel defines model for PushUpdateRequestModel.
type PushUpdateRequestModel struct {
	DeviceIds      []string `json:"deviceIds"`
	OrganizationId string   `json:"organizationId"`
}

// RegisterRequestModel defines model for RegisterRequestModel.
type RegisterRequestModel struct {
	Email              openapi_types.Email                 `json:"email"`
	Kdf                *KdfType                            `json:"kdf,omitempty"`
	KdfIterations      *int32                              `json:"kdfIterations"`
	Key                *string                             `json:"key"`
	Keys               *KeysRequestModel                   `json:"keys,omitempty"`
	MasterPasswordHash string                              `json:"masterPasswordHash"`
	MasterPasswordHint *string                             `json:"masterPasswordHint"`
	Name               *string                             `json:"name"`
	OrganizationUserId *string                             `json:"organizationUserId"`
	ReferenceData      *RegisterRequestModel_ReferenceData `json:"referenceData"`
	Token              *string                             `json:"token"`
}

// RegisterRequestModel_ReferenceData defines model for RegisterRequestModel.ReferenceData.
type RegisterRequestModel_ReferenceData struct {
	AdditionalProperties map[string]map[string]interface{} `json:"-"`
}

// ResponseData defines model for ResponseData.
type ResponseData struct {
	AttestationObject *[]byte `json:"attestationObject"`
	ClientDataJson    *[]byte `json:"clientDataJson"`
}

// SecureNoteType defines model for SecureNoteType.
type SecureNoteType int32

// SecurityStampRequestModel defines model for SecurityStampRequestModel.
type SecurityStampRequestModel struct {
	MasterPasswordHash string `json:"masterPasswordHash"`
}

// SelectionReadOnlyRequestModel defines model for SelectionReadOnlyRequestModel.
type SelectionReadOnlyRequestModel struct {
	HidePasswords *bool  `json:"hidePasswords,omitempty"`
	Id            string `json:"id"`
	ReadOnly      *bool  `json:"readOnly,omitempty"`
}

// SelectionReadOnlyResponseModel defines model for SelectionReadOnlyResponseModel.
type SelectionReadOnlyResponseModel struct {
	HidePasswords *bool   `json:"hidePasswords,omitempty"`
	Id            *string `json:"id"`
	ReadOnly      *bool   `json:"readOnly,omitempty"`
}

// SendAccessRequestModel defines model for SendAccessRequestModel.
type SendAccessRequestModel struct {
	Password *string `json:"password"`
}

// SendFileModel defines model for SendFileModel.
type SendFileModel struct {
	FileName *string `json:"fileName"`
	Id       *string `json:"id"`
	Size     *string `json:"size"`
	SizeName *string `json:"sizeName"`
}

// SendFileUploadDataResponseModel defines model for SendFileUploadDataResponseModel.
type SendFileUploadDataResponseModel struct {
	FileUploadType *FileUploadType    `json:"fileUploadType,omitempty"`
	Object         *string            `json:"object"`
	SendResponse   *SendResponseModel `json:"sendResponse,omitempty"`
	Url            *string            `json:"url"`
}

// SendRequestModel defines model for SendRequestModel.
type SendRequestModel struct {
	DeletionDate   time.Time      `json:"deletionDate"`
	Disabled       bool           `json:"disabled"`
	ExpirationDate *time.Time     `json:"expirationDate"`
	File           *SendFileModel `json:"file,omitempty"`
	FileLength     *int64         `json:"fileLength"`
	HideEmail      *bool          `json:"hideEmail"`
	Key            string         `json:"key"`
	MaxAccessCount *int32         `json:"maxAccessCount"`
	Name           *string        `json:"name"`
	Notes          *string        `json:"notes"`
	Password       *string        `json:"password"`
	Text           *SendTextModel `json:"text,omitempty"`
	Type           *SendType      `json:"type,omitempty"`
}

// SendResponseModel defines model for SendResponseModel.
type SendResponseModel struct {
	AccessCount    *int32         `json:"accessCount,omitempty"`
	AccessId       *string        `json:"accessId"`
	DeletionDate   *time.Time     `json:"deletionDate,omitempty"`
	Disabled       *bool          `json:"disabled,omitempty"`
	ExpirationDate *time.Time     `json:"expirationDate"`
	File           *SendFileModel `json:"file,omitempty"`
	HideEmail      *bool          `json:"hideEmail,omitempty"`
	Id             *string        `json:"id"`
	Key            *string        `json:"key"`
	MaxAccessCount *int32         `json:"maxAccessCount"`
	Name           *string        `json:"name"`
	Notes          *string        `json:"notes"`
	Object         *string        `json:"object"`
	Password       *string        `json:"password"`
	RevisionDate   *time.Time     `json:"revisionDate,omitempty"`
	Text           *SendTextModel `json:"text,omitempty"`
	Type           *SendType      `json:"type,omitempty"`
}

// SendResponseModelListResponseModel defines model for SendResponseModelListResponseModel.
type SendResponseModelListResponseModel struct {
	ContinuationToken *string              `json:"continuationToken"`
	Data              *[]SendResponseModel `json:"data"`
	Object            *string              `json:"object"`
}

// SendTextModel defines model for SendTextModel.
type SendTextModel struct {
	Hidden *bool   `json:"hidden,omitempty"`
	Text   *string `json:"text"`
}

// SendType defines model for SendType.
type SendType int32

// SetPasswordRequestModel defines model for SetPasswordRequestModel.
type SetPasswordRequestModel struct {
	Kdf                KdfType          `json:"kdf"`
	KdfIterations      int32            `json:"kdfIterations"`
	Key                string           `json:"key"`
	Keys               KeysRequestModel `json:"keys"`
	MasterPasswordHash string           `json:"masterPasswordHash"`
	MasterPasswordHint *string          `json:"masterPasswordHint"`
	OrgIdentifier      *string          `json:"orgIdentifier"`
}

// StorageRequestModel defines model for StorageRequestModel.
type StorageRequestModel struct {
	StorageGbAdjustment int32 `json:"storageGbAdjustment"`
}

// SubscriptionResponseModel defines model for SubscriptionResponseModel.
type SubscriptionResponseModel struct {
	Expiration         *time.Time                          `json:"expiration"`
	License            *UserLicense                        `json:"license,omitempty"`
	MaxStorageGb       *int32                              `json:"maxStorageGb"`
	Object             *string                             `json:"object"`
	StorageGb          *float64                            `json:"storageGb"`
	StorageName        *string                             `json:"storageName"`
	Subscription       *BillingSubscription                `json:"subscription,omitempty"`
	UpcomingInvoice    *BillingSubscriptionUpcomingInvoice `json:"upcomingInvoice,omitempty"`
	UsingInAppPurchase *bool                               `json:"usingInAppPurchase,omitempty"`
}

// SyncResponseModel defines model for SyncResponseModel.
type SyncResponseModel struct {
	Ciphers     *[]CipherDetailsResponseModel     `json:"ciphers"`
	Collections *[]CollectionDetailsResponseModel `json:"collections"`
	Domains     *DomainsResponseModel             `json:"domains,omitempty"`
	Folders     *[]FolderResponseModel            `json:"folders"`
	Object      *string                           `json:"object"`
	Policies    *[]PolicyResponseModel            `json:"policies"`
	Profile     *ProfileResponseModel             `json:"profile,omitempty"`
	Sends       *[]SendResponseModel              `json:"sends"`
}

// TaxInfoResponseModel defines model for TaxInfoResponseModel.
type TaxInfoResponseModel struct {
	City        *string `json:"city"`
	Country     *string `json:"country"`
	Line1       *string `json:"line1"`
	Line2       *string `json:"line2"`
	PostalCode  *string `json:"postalCode"`
	State       *string `json:"state"`
	TaxIdNumber *string `json:"taxIdNumber"`
	TaxIdType   *string `json:"taxIdType"`
}

// TaxInfoUpdateRequestModel defines model for TaxInfoUpdateRequestModel.
type TaxInfoUpdateRequestModel struct {
	Country    string  `json:"country"`
	PostalCode *string `json:"postalCode"`
}

// TaxRateResponseModel defines model for TaxRateResponseModel.
type TaxRateResponseModel struct {
	Country    *string  `json:"country"`
	Id         *string  `json:"id"`
	Object     *string  `json:"object"`
	PostalCode *string  `json:"postalCode"`
	Rate       *float64 `json:"rate,omitempty"`
	State      *string  `json:"state"`
}

// TaxRateResponseModelListResponseModel defines model for TaxRateResponseModelListResponseModel.
type TaxRateResponseModelListResponseModel struct {
	ContinuationToken *string                 `json:"continuationToken"`
	Data              *[]TaxRateResponseModel `json:"data"`
	Object            *string                 `json:"object"`
}

// TransactionType defines model for TransactionType.
type TransactionType int32

// TwoFactorAuthenticatorResponseModel defines model for TwoFactorAuthenticatorResponseModel.
type TwoFactorAuthenticatorResponseModel struct {
	Enabled *bool   `json:"enabled,omitempty"`
	Key     *string `json:"key"`
	Object  *string `json:"object"`
}

// TwoFactorDuoResponseModel defines model for TwoFactorDuoResponseModel.
type TwoFactorDuoResponseModel struct {
	Enabled        *bool   `json:"enabled,omitempty"`
	Host           *string `json:"host"`
	IntegrationKey *string `json:"integrationKey"`
	Object         *string `json:"object"`
	SecretKey      *string `json:"secretKey"`
}

// TwoFactorEmailRequestModel defines model for TwoFactorEmailRequestModel.
type TwoFactorEmailRequestModel struct {
	Email              openapi_types.Email `json:"email"`
	MasterPasswordHash string              `json:"masterPasswordHash"`
}

// TwoFactorEmailResponseModel defines model for TwoFactorEmailResponseModel.
type TwoFactorEmailResponseModel struct {
	Email   *string `json:"email"`
	Enabled *bool   `json:"enabled,omitempty"`
	Object  *string `json:"object"`
}

// TwoFactorProviderRequestModel defines model for TwoFactorProviderRequestModel.
type TwoFactorProviderRequestModel struct {
	MasterPasswordHash string                `json:"masterPasswordHash"`
	Type               TwoFactorProviderType `json:"type"`
}

// TwoFactorProviderResponseModel defines model for TwoFactorProviderResponseModel.
type TwoFactorProviderResponseModel struct {
	Enabled *bool                  `json:"enabled,omitempty"`
	Object  *string                `json:"object"`
	Type    *TwoFactorProviderType `json:"type,omitempty"`
}

// TwoFactorProviderResponseModelListResponseModel defines model for TwoFactorProviderResponseModelListResponseModel.
type TwoFactorProviderResponseModelListResponseModel struct {
	ContinuationToken *string                           `json:"continuationToken"`
	Data              *[]TwoFactorProviderResponseModel `json:"data"`
	Object            *string                           `json:"object"`
}

// TwoFactorProviderType defines model for TwoFactorProviderType.
type TwoFactorProviderType int32

// TwoFactorRecoverResponseModel defines model for TwoFactorRecoverResponseModel.
type TwoFactorRecoverResponseModel struct {
	Code   *string `json:"code"`
	Object *string `json:"object"`
}

// TwoFactorRecoveryRequestModel defines model for TwoFactorRecoveryRequestModel.
type TwoFactorRecoveryRequestModel struct {
	Email              openapi_types.Email `json:"email"`
	MasterPasswordHash string              `json:"masterPasswordHash"`
	RecoveryCode       string              `json:"recoveryCode"`
}

// TwoFactorRequestModel defines model for TwoFactorRequestModel.
type TwoFactorRequestModel struct {
	MasterPasswordHash string `json:"masterPasswordHash"`
}

// TwoFactorWebAuthnDeleteRequestModel defines model for TwoFactorWebAuthnDeleteRequestModel.
type TwoFactorWebAuthnDeleteRequestModel struct {
	Id                 int32  `json:"id"`
	MasterPasswordHash string `json:"masterPasswordHash"`
}

// TwoFactorWebAuthnRequestModel defines model for TwoFactorWebAuthnRequestModel.
type TwoFactorWebAuthnRequestModel struct {
	DeviceResponse     AuthenticatorAttestationRawResponse `json:"deviceResponse"`
	Id                 int32                               `json:"id"`
	MasterPasswordHash string                              `json:"masterPasswordHash"`
	Name               *string                             `json:"name"`
}

// TwoFactorWebAuthnResponseModel defines model for TwoFactorWebAuthnResponseModel.
type TwoFactorWebAuthnResponseModel struct {
	Enabled *bool       `json:"enabled,omitempty"`
	Keys    *[]KeyModel `json:"keys"`
	Object  *string     `json:"object"`
}

// TwoFactorYubiKeyResponseModel defines model for TwoFactorYubiKeyResponseModel.
type TwoFactorYubiKeyResponseModel struct {
	Enabled *bool   `json:"enabled,omitempty"`
	Key1    *string `json:"key1"`
	Key2    *string `json:"key2"`
	Key3    *string `json:"key3"`
	Key4    *string `json:"key4"`
	Key5    *string `json:"key5"`
	Nfc     *bool   `json:"nfc,omitempty"`
	Object  *string `json:"object"`
}

// TxAuthGenericArg defines model for TxAuthGenericArg.
type TxAuthGenericArg struct {
	Content     *[]byte `json:"content"`
	ContentType *string `json:"contentType"`
}

// UpdateDomainsRequestModel defines model for UpdateDomainsRequestModel.
type UpdateDomainsRequestModel struct {
	EquivalentDomains               *[][]string                    `json:"equivalentDomains"`
	ExcludedGlobalEquivalentDomains *[]GlobalEquivalentDomainsType `json:"excludedGlobalEquivalentDomains"`
}

// UpdateKeyRequestModel defines model for UpdateKeyRequestModel.
type UpdateKeyRequestModel struct {
	Ciphers            []CipherWithIdRequestModel `json:"ciphers"`
	Folders            []FolderWithIdRequestModel `json:"folders"`
	Key                string                     `json:"key"`
	MasterPasswordHash string                     `json:"masterPasswordHash"`
	PrivateKey         string                     `json:"privateKey"`
}

// UpdateProfileRequestModel defines model for UpdateProfileRequestModel.
type UpdateProfileRequestModel struct {
	MasterPasswordHint *string `json:"masterPasswordHint"`
	Name               *string `json:"name"`
}

// UpdateTwoFactorAuthenticatorRequestModel defines model for UpdateTwoFactorAuthenticatorRequestModel.
type UpdateTwoFactorAuthenticatorRequestModel struct {
	Key                string `json:"key"`
	MasterPasswordHash string `json:"masterPasswordHash"`
	Token              string `json:"token"`
}

// UpdateTwoFactorDuoRequestModel defines model for UpdateTwoFactorDuoRequestModel.
type UpdateTwoFactorDuoRequestModel struct {
	Host               string `json:"host"`
	IntegrationKey     string `json:"integrationKey"`
	MasterPasswordHash string `json:"masterPasswordHash"`
	SecretKey          string `json:"secretKey"`
}

// UpdateTwoFactorEmailRequestModel defines model for UpdateTwoFactorEmailRequestModel.
type UpdateTwoFactorEmailRequestModel struct {
	Email              openapi_types.Email `json:"email"`
	MasterPasswordHash string              `json:"masterPasswordHash"`
	Token              string              `json:"token"`
}

// UpdateTwoFactorYubicoOtpRequestModel defines model for UpdateTwoFactorYubicoOtpRequestModel.
type UpdateTwoFactorYubicoOtpRequestModel struct {
	Key1               *string `json:"key1"`
	Key2               *string `json:"key2"`
	Key3               *string `json:"key3"`
	Key4               *string `json:"key4"`
	Key5               *string `json:"key5"`
	MasterPasswordHash string  `json:"masterPasswordHash"`
	Nfc                bool    `json:"nfc"`
}

// UriMatchType defines model for UriMatchType.
type UriMatchType int32

// User defines model for User.
type User struct {
	Deleted    *bool                `json:"deleted,omitempty"`
	Email      *openapi_types.Email `json:"email"`
	ExternalId string               `json:"externalId"`
}

// UserKeyResponseModel defines model for UserKeyResponseModel.
type UserKeyResponseModel struct {
	Object    *string `json:"object"`
	PublicKey *string `json:"publicKey"`
	UserId    *string `json:"userId"`
}

// UserLicense defines model for UserLicense.
type UserLicense struct {
	Email          *string    `json:"email"`
	Expires        *time.Time `json:"expires"`
	Hash           *string    `json:"hash"`
	Id             *string    `json:"id,omitempty"`
	Issued         *time.Time `json:"issued,omitempty"`
	LicenseKey     *string    `json:"licenseKey"`
	MaxStorageGb   *int32     `json:"maxStorageGb"`
	Name           *string    `json:"name"`
	Premium        *bool      `json:"premium,omitempty"`
	Refresh        *time.Time `json:"refresh"`
	Signature      *string    `json:"signature"`
	SignatureBytes *[]byte    `json:"signatureBytes"`
	Trial          *bool      `json:"trial,omitempty"`
	Version        *int32     `json:"version,omitempty"`
}

// UserVerificationRequirement defines model for UserVerificationRequirement.
type UserVerificationRequirement int32

// VerifyDeleteRecoverRequestModel defines model for VerifyDeleteRecoverRequestModel.
type VerifyDeleteRecoverRequestModel struct {
	Token  string `json:"token"`
	UserId string `json:"userId"`
}

// VerifyEmailRequestModel defines model for VerifyEmailRequestModel.
type VerifyEmailRequestModel struct {
	Token  string `json:"token"`
	UserId string `json:"userId"`
}

// VerifyPasswordRequestModel defines model for VerifyPasswordRequestModel.
type VerifyPasswordRequestModel struct {
	MasterPasswordHash string `json:"masterPasswordHash"`
}

// VersionResponseModel defines model for VersionResponseModel.
type VersionResponseModel struct {
	Object  *string `json:"object"`
	Version *string `json:"version"`
}

// DeleteAccountsJSONBody defines parameters for DeleteAccounts.
type DeleteAccountsJSONBody DeleteAccountRequestModel

// PostAccountsApiKeyJSONBody defines parameters for PostAccountsApiKey.
type PostAccountsApiKeyJSONBody ApiKeyRequestModel

// PostAccountsDeleteJSONBody defines parameters for PostAccountsDelete.
type PostAccountsDeleteJSONBody DeleteAccountRequestModel

// PostAccountsDeleteRecoverJSONBody defines parameters for PostAccountsDeleteRecover.
type PostAccountsDeleteRecoverJSONBody DeleteRecoverRequestModel

// PostAccountsDeleteRecoverTokenJSONBody defines parameters for PostAccountsDeleteRecoverToken.
type PostAccountsDeleteRecoverTokenJSONBody VerifyDeleteRecoverRequestModel

// PostAccountsEmailJSONBody defines parameters for PostAccountsEmail.
type PostAccountsEmailJSONBody EmailRequestModel

// PostAccountsEmailTokenJSONBody defines parameters for PostAccountsEmailToken.
type PostAccountsEmailTokenJSONBody EmailTokenRequestModel

// PostAccountsIapCheckJSONBody defines parameters for PostAccountsIapCheck.
type PostAccountsIapCheckJSONBody IapCheckRequestModel

// PostAccountsKdfJSONBody defines parameters for PostAccountsKdf.
type PostAccountsKdfJSONBody KdfRequestModel

// PostAccountsKeyJSONBody defines parameters for PostAccountsKey.
type PostAccountsKeyJSONBody UpdateKeyRequestModel

// PostAccountsKeysJSONBody defines parameters for PostAccountsKeys.
type PostAccountsKeysJSONBody KeysRequestModel

// PostAccountsPasswordJSONBody defines parameters for PostAccountsPassword.
type PostAccountsPasswordJSONBody PasswordRequestModel

// PostAccountsPasswordHintJSONBody defines parameters for PostAccountsPasswordHint.
type PostAccountsPasswordHintJSONBody PasswordHintRequestModel

// PostAccountsPaymentJSONBody defines parameters for PostAccountsPayment.
type PostAccountsPaymentJSONBody PaymentRequestModel

// PostAccountsPreloginJSONBody defines parameters for PostAccountsPrelogin.
type PostAccountsPreloginJSONBody PreloginRequestModel

// PostAccountsPremiumParams defines parameters for PostAccountsPremium.
type PostAccountsPremiumParams struct {
	PaymentMethodType   PaymentMethodType `json:"paymentMethodType"`
	PaymentToken        *string           `json:"paymentToken,omitempty"`
	AdditionalStorageGb *int32            `json:"additionalStorageGb,omitempty"`
	Country             *string           `json:"country,omitempty"`
	PostalCode          *string           `json:"postalCode,omitempty"`
}

// PostAccountsProfileJSONBody defines parameters for PostAccountsProfile.
type PostAccountsProfileJSONBody UpdateProfileRequestModel

// PutAccountsProfileJSONBody defines parameters for PutAccountsProfile.
type PutAccountsProfileJSONBody UpdateProfileRequestModel

// PostAccountsRegisterJSONBody defines parameters for PostAccountsRegister.
type PostAccountsRegisterJSONBody RegisterRequestModel

// PostAccountsRotateApiKeyJSONBody defines parameters for PostAccountsRotateApiKey.
type PostAccountsRotateApiKeyJSONBody ApiKeyRequestModel

// PostAccountsSecurityStampJSONBody defines parameters for PostAccountsSecurityStamp.
type PostAccountsSecurityStampJSONBody SecurityStampRequestModel

// PostAccountsSetPasswordJSONBody defines parameters for PostAccountsSetPassword.
type PostAccountsSetPasswordJSONBody SetPasswordRequestModel

// PostAccountsStorageJSONBody defines parameters for PostAccountsStorage.
type PostAccountsStorageJSONBody StorageRequestModel

// PutAccountsTaxJSONBody defines parameters for PutAccountsTax.
type PutAccountsTaxJSONBody TaxInfoUpdateRequestModel

// PostAccountsVerifyEmailTokenJSONBody defines parameters for PostAccountsVerifyEmailToken.
type PostAccountsVerifyEmailTokenJSONBody VerifyEmailRequestModel

// PostAccountsVerifyPasswordJSONBody defines parameters for PostAccountsVerifyPassword.
type PostAccountsVerifyPasswordJSONBody VerifyPasswordRequestModel

// PostBitpayInvoiceJSONBody defines parameters for PostBitpayInvoice.
type PostBitpayInvoiceJSONBody BitPayInvoiceRequestModel

// DeleteCiphersJSONBody defines parameters for DeleteCiphers.
type DeleteCiphersJSONBody CipherBulkDeleteRequestModel

// PostCiphersJSONBody defines parameters for PostCiphers.
type PostCiphersJSONBody CipherRequestModel

// DeleteCiphersAdminJSONBody defines parameters for DeleteCiphersAdmin.
type DeleteCiphersAdminJSONBody CipherBulkDeleteRequestModel

// PostCiphersAdminJSONBody defines parameters for PostCiphersAdmin.
type PostCiphersAdminJSONBody CipherCreateRequestModel

// PostCiphersCreateJSONBody defines parameters for PostCiphersCreate.
type PostCiphersCreateJSONBody CipherCreateRequestModel

// PostCiphersDeleteJSONBody defines parameters for PostCiphersDelete.
type PostCiphersDeleteJSONBody CipherBulkDeleteRequestModel

// PutCiphersDeleteJSONBody defines parameters for PutCiphersDelete.
type PutCiphersDeleteJSONBody CipherBulkDeleteRequestModel

// PostCiphersDeleteAdminJSONBody defines parameters for PostCiphersDeleteAdmin.
type PostCiphersDeleteAdminJSONBody CipherBulkDeleteRequestModel

// PutCiphersDeleteAdminJSONBody defines parameters for PutCiphersDeleteAdmin.
type PutCiphersDeleteAdminJSONBody CipherBulkDeleteRequestModel

// PostCiphersImportJSONBody defines parameters for PostCiphersImport.
type PostCiphersImportJSONBody ImportCiphersRequestModel

// PostCiphersImportOrganizationJSONBody defines parameters for PostCiphersImportOrganization.
type PostCiphersImportOrganizationJSONBody ImportOrganizationCiphersRequestModel

// PostCiphersImportOrganizationParams defines parameters for PostCiphersImportOrganization.
type PostCiphersImportOrganizationParams struct {
	OrganizationId *string `json:"organizationId,omitempty"`
}

// PostCiphersMoveJSONBody defines parameters for PostCiphersMove.
type PostCiphersMoveJSONBody CipherBulkMoveRequestModel

// PutCiphersMoveJSONBody defines parameters for PutCiphersMove.
type PutCiphersMoveJSONBody CipherBulkMoveRequestModel

// GetCiphersOrganizationDetailsParams defines parameters for GetCiphersOrganizationDetails.
type GetCiphersOrganizationDetailsParams struct {
	OrganizationId *string `json:"organizationId,omitempty"`
}

// PostCiphersPurgeJSONBody defines parameters for PostCiphersPurge.
type PostCiphersPurgeJSONBody CipherPurgeRequestModel

// PostCiphersPurgeParams defines parameters for PostCiphersPurge.
type PostCiphersPurgeParams struct {
	OrganizationId *string `json:"organizationId,omitempty"`
}

// PutCiphersRestoreJSONBody defines parameters for PutCiphersRestore.
type PutCiphersRestoreJSONBody CipherBulkRestoreRequestModel

// PostCiphersShareJSONBody defines parameters for PostCiphersShare.
type PostCiphersShareJSONBody CipherBulkShareRequestModel

// PutCiphersShareJSONBody defines parameters for PutCiphersShare.
type PutCiphersShareJSONBody CipherBulkShareRequestModel

// PostCiphersIdJSONBody defines parameters for PostCiphersId.
type PostCiphersIdJSONBody CipherRequestModel

// PutCiphersIdJSONBody defines parameters for PutCiphersId.
type PutCiphersIdJSONBody CipherRequestModel

// PostCiphersIdAdminJSONBody defines parameters for PostCiphersIdAdmin.
type PostCiphersIdAdminJSONBody CipherRequestModel

// PutCiphersIdAdminJSONBody defines parameters for PutCiphersIdAdmin.
type PutCiphersIdAdminJSONBody CipherRequestModel

// PostCiphersIdAttachmentV2JSONBody defines parameters for PostCiphersIdAttachmentV2.
type PostCiphersIdAttachmentV2JSONBody AttachmentRequestModel

// PostCiphersIdAttachmentAttachmentIdShareParams defines parameters for PostCiphersIdAttachmentAttachmentIdShare.
type PostCiphersIdAttachmentAttachmentIdShareParams struct {
	OrganizationId *string `json:"organizationId,omitempty"`
}

// PostCiphersIdCollectionsJSONBody defines parameters for PostCiphersIdCollections.
type PostCiphersIdCollectionsJSONBody CipherCollectionsRequestModel

// PutCiphersIdCollectionsJSONBody defines parameters for PutCiphersIdCollections.
type PutCiphersIdCollectionsJSONBody CipherCollectionsRequestModel

// PostCiphersIdCollectionsAdminJSONBody defines parameters for PostCiphersIdCollectionsAdmin.
type PostCiphersIdCollectionsAdminJSONBody CipherCollectionsRequestModel

// PutCiphersIdCollectionsAdminJSONBody defines parameters for PutCiphersIdCollectionsAdmin.
type PutCiphersIdCollectionsAdminJSONBody CipherCollectionsRequestModel

// GetCiphersIdEventsParams defines parameters for GetCiphersIdEvents.
type GetCiphersIdEventsParams struct {
	Start             *time.Time `json:"start,omitempty"`
	End               *time.Time `json:"end,omitempty"`
	ContinuationToken *string    `json:"continuationToken,omitempty"`
}

// PostCiphersIdPartialJSONBody defines parameters for PostCiphersIdPartial.
type PostCiphersIdPartialJSONBody CipherPartialRequestModel

// PutCiphersIdPartialJSONBody defines parameters for PutCiphersIdPartial.
type PutCiphersIdPartialJSONBody CipherPartialRequestModel

// PostCiphersIdShareJSONBody defines parameters for PostCiphersIdShare.
type PostCiphersIdShareJSONBody CipherShareRequestModel

// PutCiphersIdShareJSONBody defines parameters for PutCiphersIdShare.
type PutCiphersIdShareJSONBody CipherShareRequestModel

// PostDevicesJSONBody defines parameters for PostDevices.
type PostDevicesJSONBody DeviceRequestModel

// PostDevicesIdentifierIdentifierTokenJSONBody defines parameters for PostDevicesIdentifierIdentifierToken.
type PostDevicesIdentifierIdentifierTokenJSONBody DeviceTokenRequestModel

// PutDevicesIdentifierIdentifierTokenJSONBody defines parameters for PutDevicesIdentifierIdentifierToken.
type PutDevicesIdentifierIdentifierTokenJSONBody DeviceTokenRequestModel

// PostDevicesIdJSONBody defines parameters for PostDevicesId.
type PostDevicesIdJSONBody DeviceRequestModel

// PutDevicesIdJSONBody defines parameters for PutDevicesId.
type PutDevicesIdJSONBody DeviceRequestModel

// PostEmergencyAccessInviteJSONBody defines parameters for PostEmergencyAccessInvite.
type PostEmergencyAccessInviteJSONBody EmergencyAccessInviteRequestModel

// PostEmergencyAccessIdJSONBody defines parameters for PostEmergencyAccessId.
type PostEmergencyAccessIdJSONBody EmergencyAccessUpdateRequestModel

// PutEmergencyAccessIdJSONBody defines parameters for PutEmergencyAccessId.
type PutEmergencyAccessIdJSONBody EmergencyAccessUpdateRequestModel

// PostEmergencyAccessIdAcceptJSONBody defines parameters for PostEmergencyAccessIdAccept.
type PostEmergencyAccessIdAcceptJSONBody OrganizationUserAcceptRequestModel

// PostEmergencyAccessIdConfirmJSONBody defines parameters for PostEmergencyAccessIdConfirm.
type PostEmergencyAccessIdConfirmJSONBody OrganizationUserConfirmRequestModel

// PostEmergencyAccessIdPasswordJSONBody defines parameters for PostEmergencyAccessIdPassword.
type PostEmergencyAccessIdPasswordJSONBody EmergencyAccessPasswordRequestModel

// GetEventsParams defines parameters for GetEvents.
type GetEventsParams struct {
	Start             *time.Time `json:"start,omitempty"`
	End               *time.Time `json:"end,omitempty"`
	ContinuationToken *string    `json:"continuationToken,omitempty"`
}

// PostFoldersJSONBody defines parameters for PostFolders.
type PostFoldersJSONBody FolderRequestModel

// PostFoldersIdJSONBody defines parameters for PostFoldersId.
type PostFoldersIdJSONBody FolderRequestModel

// PutFoldersIdJSONBody defines parameters for PutFoldersId.
type PutFoldersIdJSONBody FolderRequestModel

// GetHibpBreachParams defines parameters for GetHibpBreach.
type GetHibpBreachParams struct {
	Username *string `json:"username,omitempty"`
}

// PostInstallationsJSONBody defines parameters for PostInstallations.
type PostInstallationsJSONBody InstallationRequestModel

// GetLicensesOrganizationIdParams defines parameters for GetLicensesOrganizationId.
type GetLicensesOrganizationIdParams struct {
	Key *string `json:"key,omitempty"`
}

// GetLicensesUserIdParams defines parameters for GetLicensesUserId.
type GetLicensesUserIdParams struct {
	Key *string `json:"key,omitempty"`
}

// PostOrganizationsJSONBody defines parameters for PostOrganizations.
type PostOrganizationsJSONBody OrganizationCreateRequestModel

// PostOrganizationsLicenseParams defines parameters for PostOrganizationsLicense.
type PostOrganizationsLicenseParams struct {
	Key                     string  `json:"key"`
	CollectionName          *string `json:"collectionName,omitempty"`
	KeysPublicKey           string  `json:"keys.PublicKey"`
	KeysEncryptedPrivateKey string  `json:"keys.EncryptedPrivateKey"`
}

// DeleteOrganizationsIdJSONBody defines parameters for DeleteOrganizationsId.
type DeleteOrganizationsIdJSONBody OrganizationDeleteRequestModel

// PostOrganizationsIdJSONBody defines parameters for PostOrganizationsId.
type PostOrganizationsIdJSONBody OrganizationUpdateRequestModel

// PutOrganizationsIdJSONBody defines parameters for PutOrganizationsId.
type PutOrganizationsIdJSONBody OrganizationUpdateRequestModel

// PostOrganizationsIdApiKeyJSONBody defines parameters for PostOrganizationsIdApiKey.
type PostOrganizationsIdApiKeyJSONBody ApiKeyRequestModel

// PostOrganizationsIdDeleteJSONBody defines parameters for PostOrganizationsIdDelete.
type PostOrganizationsIdDeleteJSONBody OrganizationDeleteRequestModel

// GetOrganizationsIdEventsParams defines parameters for GetOrganizationsIdEvents.
type GetOrganizationsIdEventsParams struct {
	Start             *time.Time `json:"start,omitempty"`
	End               *time.Time `json:"end,omitempty"`
	ContinuationToken *string    `json:"continuationToken,omitempty"`
}

// PostOrganizationsIdImportJSONBody defines parameters for PostOrganizationsIdImport.
type PostOrganizationsIdImportJSONBody ImportOrganizationUsersRequestModel

// PostOrganizationsIdKeysJSONBody defines parameters for PostOrganizationsIdKeys.
type PostOrganizationsIdKeysJSONBody OrganizationKeysRequestModel

// GetOrganizationsIdLicenseParams defines parameters for GetOrganizationsIdLicense.
type GetOrganizationsIdLicenseParams struct {
	InstallationId *string `json:"installationId,omitempty"`
}

// PostOrganizationsIdPaymentJSONBody defines parameters for PostOrganizationsIdPayment.
type PostOrganizationsIdPaymentJSONBody PaymentRequestModel

// PostOrganizationsIdRotateApiKeyJSONBody defines parameters for PostOrganizationsIdRotateApiKey.
type PostOrganizationsIdRotateApiKeyJSONBody ApiKeyRequestModel

// PostOrganizationsIdSeatJSONBody defines parameters for PostOrganizationsIdSeat.
type PostOrganizationsIdSeatJSONBody OrganizationSeatRequestModel

// PostOrganizationsIdStorageJSONBody defines parameters for PostOrganizationsIdStorage.
type PostOrganizationsIdStorageJSONBody StorageRequestModel

// PutOrganizationsIdTaxJSONBody defines parameters for PutOrganizationsIdTax.
type PutOrganizationsIdTaxJSONBody OrganizationTaxInfoUpdateRequestModel

// PostOrganizationsIdTwoFactorDisableJSONBody defines parameters for PostOrganizationsIdTwoFactorDisable.
type PostOrganizationsIdTwoFactorDisableJSONBody TwoFactorProviderRequestModel

// PutOrganizationsIdTwoFactorDisableJSONBody defines parameters for PutOrganizationsIdTwoFactorDisable.
type PutOrganizationsIdTwoFactorDisableJSONBody TwoFactorProviderRequestModel

// PostOrganizationsIdTwoFactorDuoJSONBody defines parameters for PostOrganizationsIdTwoFactorDuo.
type PostOrganizationsIdTwoFactorDuoJSONBody UpdateTwoFactorDuoRequestModel

// PutOrganizationsIdTwoFactorDuoJSONBody defines parameters for PutOrganizationsIdTwoFactorDuo.
type PutOrganizationsIdTwoFactorDuoJSONBody UpdateTwoFactorDuoRequestModel

// PostOrganizationsIdTwoFactorGetDuoJSONBody defines parameters for PostOrganizationsIdTwoFactorGetDuo.
type PostOrganizationsIdTwoFactorGetDuoJSONBody TwoFactorRequestModel

// PostOrganizationsIdUpgradeJSONBody defines parameters for PostOrganizationsIdUpgrade.
type PostOrganizationsIdUpgradeJSONBody OrganizationUpgradeRequestModel

// PostOrganizationsIdVerifyBankJSONBody defines parameters for PostOrganizationsIdVerifyBank.
type PostOrganizationsIdVerifyBankJSONBody OrganizationVerifyBankRequestModel

// PostOrganizationsOrgIdCollectionsJSONBody defines parameters for PostOrganizationsOrgIdCollections.
type PostOrganizationsOrgIdCollectionsJSONBody CollectionRequestModel

// PostOrganizationsOrgIdCollectionsIdJSONBody defines parameters for PostOrganizationsOrgIdCollectionsId.
type PostOrganizationsOrgIdCollectionsIdJSONBody CollectionRequestModel

// PutOrganizationsOrgIdCollectionsIdJSONBody defines parameters for PutOrganizationsOrgIdCollectionsId.
type PutOrganizationsOrgIdCollectionsIdJSONBody CollectionRequestModel

// PutOrganizationsOrgIdCollectionsIdUsersJSONBody defines parameters for PutOrganizationsOrgIdCollectionsIdUsers.
type PutOrganizationsOrgIdCollectionsIdUsersJSONBody []SelectionReadOnlyRequestModel

// PostOrganizationsOrgIdGroupsJSONBody defines parameters for PostOrganizationsOrgIdGroups.
type PostOrganizationsOrgIdGroupsJSONBody GroupRequestModel

// PostOrganizationsOrgIdGroupsIdJSONBody defines parameters for PostOrganizationsOrgIdGroupsId.
type PostOrganizationsOrgIdGroupsIdJSONBody GroupRequestModel

// PutOrganizationsOrgIdGroupsIdJSONBody defines parameters for PutOrganizationsOrgIdGroupsId.
type PutOrganizationsOrgIdGroupsIdJSONBody GroupRequestModel

// PutOrganizationsOrgIdGroupsIdUsersJSONBody defines parameters for PutOrganizationsOrgIdGroupsIdUsers.
type PutOrganizationsOrgIdGroupsIdUsersJSONBody []string

// GetOrganizationsOrgIdPoliciesTokenParams defines parameters for GetOrganizationsOrgIdPoliciesToken.
type GetOrganizationsOrgIdPoliciesTokenParams struct {
	Email              *string `json:"email,omitempty"`
	Token              *string `json:"token,omitempty"`
	OrganizationUserId *string `json:"organizationUserId,omitempty"`
}

// PutOrganizationsOrgIdPoliciesTypeJSONBody defines parameters for PutOrganizationsOrgIdPoliciesType.
type PutOrganizationsOrgIdPoliciesTypeJSONBody PolicyRequestModel

// DeleteOrganizationsOrgIdUsersJSONBody defines parameters for DeleteOrganizationsOrgIdUsers.
type DeleteOrganizationsOrgIdUsersJSONBody OrganizationUserBulkRequestModel

// PostOrganizationsOrgIdUsersConfirmJSONBody defines parameters for PostOrganizationsOrgIdUsersConfirm.
type PostOrganizationsOrgIdUsersConfirmJSONBody OrganizationUserBulkConfirmRequestModel

// PostOrganizationsOrgIdUsersDeleteJSONBody defines parameters for PostOrganizationsOrgIdUsersDelete.
type PostOrganizationsOrgIdUsersDeleteJSONBody OrganizationUserBulkRequestModel

// PostOrganizationsOrgIdUsersInviteJSONBody defines parameters for PostOrganizationsOrgIdUsersInvite.
type PostOrganizationsOrgIdUsersInviteJSONBody OrganizationUserInviteRequestModel

// PostOrganizationsOrgIdUsersPublicKeysJSONBody defines parameters for PostOrganizationsOrgIdUsersPublicKeys.
type PostOrganizationsOrgIdUsersPublicKeysJSONBody OrganizationUserBulkRequestModel

// PostOrganizationsOrgIdUsersReinviteJSONBody defines parameters for PostOrganizationsOrgIdUsersReinvite.
type PostOrganizationsOrgIdUsersReinviteJSONBody OrganizationUserBulkRequestModel

// PostOrganizationsOrgIdUsersIdJSONBody defines parameters for PostOrganizationsOrgIdUsersId.
type PostOrganizationsOrgIdUsersIdJSONBody OrganizationUserUpdateRequestModel

// PutOrganizationsOrgIdUsersIdJSONBody defines parameters for PutOrganizationsOrgIdUsersId.
type PutOrganizationsOrgIdUsersIdJSONBody OrganizationUserUpdateRequestModel

// PostOrganizationsOrgIdUsersIdAcceptJSONBody defines parameters for PostOrganizationsOrgIdUsersIdAccept.
type PostOrganizationsOrgIdUsersIdAcceptJSONBody OrganizationUserAcceptRequestModel

// PostOrganizationsOrgIdUsersIdConfirmJSONBody defines parameters for PostOrganizationsOrgIdUsersIdConfirm.
type PostOrganizationsOrgIdUsersIdConfirmJSONBody OrganizationUserConfirmRequestModel

// GetOrganizationsOrgIdUsersIdEventsParams defines parameters for GetOrganizationsOrgIdUsersIdEvents.
type GetOrganizationsOrgIdUsersIdEventsParams struct {
	Start             *time.Time `json:"start,omitempty"`
	End               *time.Time `json:"end,omitempty"`
	ContinuationToken *string    `json:"continuationToken,omitempty"`
}

// PostOrganizationsOrgIdUsersIdGroupsJSONBody defines parameters for PostOrganizationsOrgIdUsersIdGroups.
type PostOrganizationsOrgIdUsersIdGroupsJSONBody OrganizationUserUpdateGroupsRequestModel

// PutOrganizationsOrgIdUsersIdGroupsJSONBody defines parameters for PutOrganizationsOrgIdUsersIdGroups.
type PutOrganizationsOrgIdUsersIdGroupsJSONBody OrganizationUserUpdateGroupsRequestModel

// PutOrganizationsOrgIdUsersIdResetPasswordJSONBody defines parameters for PutOrganizationsOrgIdUsersIdResetPassword.
type PutOrganizationsOrgIdUsersIdResetPasswordJSONBody OrganizationUserResetPasswordRequestModel

// PutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentJSONBody defines parameters for PutOrganizationsOrgIdUsersUserIdResetPasswordEnrollment.
type PutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentJSONBody OrganizationUserResetPasswordEnrollmentRequestModel

// PutPushAddOrganizationJSONBody defines parameters for PutPushAddOrganization.
type PutPushAddOrganizationJSONBody PushUpdateRequestModel

// PutPushDeleteOrganizationJSONBody defines parameters for PutPushDeleteOrganization.
type PutPushDeleteOrganizationJSONBody PushUpdateRequestModel

// PostPushRegisterJSONBody defines parameters for PostPushRegister.
type PostPushRegisterJSONBody PushRegistrationRequestModel

// PostPushSendJSONBody defines parameters for PostPushSend.
type PostPushSendJSONBody PushSendRequestModel

// PostSendsJSONBody defines parameters for PostSends.
type PostSendsJSONBody SendRequestModel

// PostSendsAccessIdJSONBody defines parameters for PostSendsAccessId.
type PostSendsAccessIdJSONBody SendAccessRequestModel

// PostSendsFileV2JSONBody defines parameters for PostSendsFileV2.
type PostSendsFileV2JSONBody SendRequestModel

// PostSendsEncodedSendIdAccessFileFileIdJSONBody defines parameters for PostSendsEncodedSendIdAccessFileFileId.
type PostSendsEncodedSendIdAccessFileFileIdJSONBody SendAccessRequestModel

// PutSendsIdJSONBody defines parameters for PutSendsId.
type PutSendsIdJSONBody SendRequestModel

// GetSettingsDomainsParams defines parameters for GetSettingsDomains.
type GetSettingsDomainsParams struct {
	Excluded *bool `json:"excluded,omitempty"`
}

// PostSettingsDomainsJSONBody defines parameters for PostSettingsDomains.
type PostSettingsDomainsJSONBody UpdateDomainsRequestModel

// PutSettingsDomainsJSONBody defines parameters for PutSettingsDomains.
type PutSettingsDomainsJSONBody UpdateDomainsRequestModel

// GetSyncParams defines parameters for GetSync.
type GetSyncParams struct {
	ExcludeDomains *bool `json:"excludeDomains,omitempty"`
}

// PostTwoFactorAuthenticatorJSONBody defines parameters for PostTwoFactorAuthenticator.
type PostTwoFactorAuthenticatorJSONBody UpdateTwoFactorAuthenticatorRequestModel

// PutTwoFactorAuthenticatorJSONBody defines parameters for PutTwoFactorAuthenticator.
type PutTwoFactorAuthenticatorJSONBody UpdateTwoFactorAuthenticatorRequestModel

// PostTwoFactorDisableJSONBody defines parameters for PostTwoFactorDisable.
type PostTwoFactorDisableJSONBody TwoFactorProviderRequestModel

// PutTwoFactorDisableJSONBody defines parameters for PutTwoFactorDisable.
type PutTwoFactorDisableJSONBody TwoFactorProviderRequestModel

// PostTwoFactorDuoJSONBody defines parameters for PostTwoFactorDuo.
type PostTwoFactorDuoJSONBody UpdateTwoFactorDuoRequestModel

// PutTwoFactorDuoJSONBody defines parameters for PutTwoFactorDuo.
type PutTwoFactorDuoJSONBody UpdateTwoFactorDuoRequestModel

// PostTwoFactorEmailJSONBody defines parameters for PostTwoFactorEmail.
type PostTwoFactorEmailJSONBody UpdateTwoFactorEmailRequestModel

// PutTwoFactorEmailJSONBody defines parameters for PutTwoFactorEmail.
type PutTwoFactorEmailJSONBody UpdateTwoFactorEmailRequestModel

// PostTwoFactorGetAuthenticatorJSONBody defines parameters for PostTwoFactorGetAuthenticator.
type PostTwoFactorGetAuthenticatorJSONBody TwoFactorRequestModel

// PostTwoFactorGetDuoJSONBody defines parameters for PostTwoFactorGetDuo.
type PostTwoFactorGetDuoJSONBody TwoFactorRequestModel

// PostTwoFactorGetEmailJSONBody defines parameters for PostTwoFactorGetEmail.
type PostTwoFactorGetEmailJSONBody TwoFactorRequestModel

// PostTwoFactorGetRecoverJSONBody defines parameters for PostTwoFactorGetRecover.
type PostTwoFactorGetRecoverJSONBody TwoFactorRequestModel

// PostTwoFactorGetWebauthnJSONBody defines parameters for PostTwoFactorGetWebauthn.
type PostTwoFactorGetWebauthnJSONBody TwoFactorRequestModel

// PostTwoFactorGetWebauthnChallengeJSONBody defines parameters for PostTwoFactorGetWebauthnChallenge.
type PostTwoFactorGetWebauthnChallengeJSONBody TwoFactorRequestModel

// PostTwoFactorGetYubikeyJSONBody defines parameters for PostTwoFactorGetYubikey.
type PostTwoFactorGetYubikeyJSONBody TwoFactorRequestModel

// PostTwoFactorRecoverJSONBody defines parameters for PostTwoFactorRecover.
type PostTwoFactorRecoverJSONBody TwoFactorRecoveryRequestModel

// PostTwoFactorSendEmailJSONBody defines parameters for PostTwoFactorSendEmail.
type PostTwoFactorSendEmailJSONBody TwoFactorEmailRequestModel

// PostTwoFactorSendEmailLoginJSONBody defines parameters for PostTwoFactorSendEmailLogin.
type PostTwoFactorSendEmailLoginJSONBody TwoFactorEmailRequestModel

// DeleteTwoFactorWebauthnJSONBody defines parameters for DeleteTwoFactorWebauthn.
type DeleteTwoFactorWebauthnJSONBody TwoFactorWebAuthnDeleteRequestModel

// PostTwoFactorWebauthnJSONBody defines parameters for PostTwoFactorWebauthn.
type PostTwoFactorWebauthnJSONBody TwoFactorWebAuthnRequestModel

// PutTwoFactorWebauthnJSONBody defines parameters for PutTwoFactorWebauthn.
type PutTwoFactorWebauthnJSONBody TwoFactorWebAuthnRequestModel

// PostTwoFactorYubikeyJSONBody defines parameters for PostTwoFactorYubikey.
type PostTwoFactorYubikeyJSONBody UpdateTwoFactorYubicoOtpRequestModel

// PutTwoFactorYubikeyJSONBody defines parameters for PutTwoFactorYubikey.
type PutTwoFactorYubikeyJSONBody UpdateTwoFactorYubicoOtpRequestModel

// DeleteAccountsJSONRequestBody defines body for DeleteAccounts for application/json ContentType.
type DeleteAccountsJSONRequestBody DeleteAccountsJSONBody

// PostAccountsApiKeyJSONRequestBody defines body for PostAccountsApiKey for application/json ContentType.
type PostAccountsApiKeyJSONRequestBody PostAccountsApiKeyJSONBody

// PostAccountsDeleteJSONRequestBody defines body for PostAccountsDelete for application/json ContentType.
type PostAccountsDeleteJSONRequestBody PostAccountsDeleteJSONBody

// PostAccountsDeleteRecoverJSONRequestBody defines body for PostAccountsDeleteRecover for application/json ContentType.
type PostAccountsDeleteRecoverJSONRequestBody PostAccountsDeleteRecoverJSONBody

// PostAccountsDeleteRecoverTokenJSONRequestBody defines body for PostAccountsDeleteRecoverToken for application/json ContentType.
type PostAccountsDeleteRecoverTokenJSONRequestBody PostAccountsDeleteRecoverTokenJSONBody

// PostAccountsEmailJSONRequestBody defines body for PostAccountsEmail for application/json ContentType.
type PostAccountsEmailJSONRequestBody PostAccountsEmailJSONBody

// PostAccountsEmailTokenJSONRequestBody defines body for PostAccountsEmailToken for application/json ContentType.
type PostAccountsEmailTokenJSONRequestBody PostAccountsEmailTokenJSONBody

// PostAccountsIapCheckJSONRequestBody defines body for PostAccountsIapCheck for application/json ContentType.
type PostAccountsIapCheckJSONRequestBody PostAccountsIapCheckJSONBody

// PostAccountsKdfJSONRequestBody defines body for PostAccountsKdf for application/json ContentType.
type PostAccountsKdfJSONRequestBody PostAccountsKdfJSONBody

// PostAccountsKeyJSONRequestBody defines body for PostAccountsKey for application/json ContentType.
type PostAccountsKeyJSONRequestBody PostAccountsKeyJSONBody

// PostAccountsKeysJSONRequestBody defines body for PostAccountsKeys for application/json ContentType.
type PostAccountsKeysJSONRequestBody PostAccountsKeysJSONBody

// PostAccountsPasswordJSONRequestBody defines body for PostAccountsPassword for application/json ContentType.
type PostAccountsPasswordJSONRequestBody PostAccountsPasswordJSONBody

// PostAccountsPasswordHintJSONRequestBody defines body for PostAccountsPasswordHint for application/json ContentType.
type PostAccountsPasswordHintJSONRequestBody PostAccountsPasswordHintJSONBody

// PostAccountsPaymentJSONRequestBody defines body for PostAccountsPayment for application/json ContentType.
type PostAccountsPaymentJSONRequestBody PostAccountsPaymentJSONBody

// PostAccountsPreloginJSONRequestBody defines body for PostAccountsPrelogin for application/json ContentType.
type PostAccountsPreloginJSONRequestBody PostAccountsPreloginJSONBody

// PostAccountsProfileJSONRequestBody defines body for PostAccountsProfile for application/json ContentType.
type PostAccountsProfileJSONRequestBody PostAccountsProfileJSONBody

// PutAccountsProfileJSONRequestBody defines body for PutAccountsProfile for application/json ContentType.
type PutAccountsProfileJSONRequestBody PutAccountsProfileJSONBody

// PostAccountsRegisterJSONRequestBody defines body for PostAccountsRegister for application/json ContentType.
type PostAccountsRegisterJSONRequestBody PostAccountsRegisterJSONBody

// PostAccountsRotateApiKeyJSONRequestBody defines body for PostAccountsRotateApiKey for application/json ContentType.
type PostAccountsRotateApiKeyJSONRequestBody PostAccountsRotateApiKeyJSONBody

// PostAccountsSecurityStampJSONRequestBody defines body for PostAccountsSecurityStamp for application/json ContentType.
type PostAccountsSecurityStampJSONRequestBody PostAccountsSecurityStampJSONBody

// PostAccountsSetPasswordJSONRequestBody defines body for PostAccountsSetPassword for application/json ContentType.
type PostAccountsSetPasswordJSONRequestBody PostAccountsSetPasswordJSONBody

// PostAccountsStorageJSONRequestBody defines body for PostAccountsStorage for application/json ContentType.
type PostAccountsStorageJSONRequestBody PostAccountsStorageJSONBody

// PutAccountsTaxJSONRequestBody defines body for PutAccountsTax for application/json ContentType.
type PutAccountsTaxJSONRequestBody PutAccountsTaxJSONBody

// PostAccountsVerifyEmailTokenJSONRequestBody defines body for PostAccountsVerifyEmailToken for application/json ContentType.
type PostAccountsVerifyEmailTokenJSONRequestBody PostAccountsVerifyEmailTokenJSONBody

// PostAccountsVerifyPasswordJSONRequestBody defines body for PostAccountsVerifyPassword for application/json ContentType.
type PostAccountsVerifyPasswordJSONRequestBody PostAccountsVerifyPasswordJSONBody

// PostBitpayInvoiceJSONRequestBody defines body for PostBitpayInvoice for application/json ContentType.
type PostBitpayInvoiceJSONRequestBody PostBitpayInvoiceJSONBody

// DeleteCiphersJSONRequestBody defines body for DeleteCiphers for application/json ContentType.
type DeleteCiphersJSONRequestBody DeleteCiphersJSONBody

// PostCiphersJSONRequestBody defines body for PostCiphers for application/json ContentType.
type PostCiphersJSONRequestBody PostCiphersJSONBody

// DeleteCiphersAdminJSONRequestBody defines body for DeleteCiphersAdmin for application/json ContentType.
type DeleteCiphersAdminJSONRequestBody DeleteCiphersAdminJSONBody

// PostCiphersAdminJSONRequestBody defines body for PostCiphersAdmin for application/json ContentType.
type PostCiphersAdminJSONRequestBody PostCiphersAdminJSONBody

// PostCiphersCreateJSONRequestBody defines body for PostCiphersCreate for application/json ContentType.
type PostCiphersCreateJSONRequestBody PostCiphersCreateJSONBody

// PostCiphersDeleteJSONRequestBody defines body for PostCiphersDelete for application/json ContentType.
type PostCiphersDeleteJSONRequestBody PostCiphersDeleteJSONBody

// PutCiphersDeleteJSONRequestBody defines body for PutCiphersDelete for application/json ContentType.
type PutCiphersDeleteJSONRequestBody PutCiphersDeleteJSONBody

// PostCiphersDeleteAdminJSONRequestBody defines body for PostCiphersDeleteAdmin for application/json ContentType.
type PostCiphersDeleteAdminJSONRequestBody PostCiphersDeleteAdminJSONBody

// PutCiphersDeleteAdminJSONRequestBody defines body for PutCiphersDeleteAdmin for application/json ContentType.
type PutCiphersDeleteAdminJSONRequestBody PutCiphersDeleteAdminJSONBody

// PostCiphersImportJSONRequestBody defines body for PostCiphersImport for application/json ContentType.
type PostCiphersImportJSONRequestBody PostCiphersImportJSONBody

// PostCiphersImportOrganizationJSONRequestBody defines body for PostCiphersImportOrganization for application/json ContentType.
type PostCiphersImportOrganizationJSONRequestBody PostCiphersImportOrganizationJSONBody

// PostCiphersMoveJSONRequestBody defines body for PostCiphersMove for application/json ContentType.
type PostCiphersMoveJSONRequestBody PostCiphersMoveJSONBody

// PutCiphersMoveJSONRequestBody defines body for PutCiphersMove for application/json ContentType.
type PutCiphersMoveJSONRequestBody PutCiphersMoveJSONBody

// PostCiphersPurgeJSONRequestBody defines body for PostCiphersPurge for application/json ContentType.
type PostCiphersPurgeJSONRequestBody PostCiphersPurgeJSONBody

// PutCiphersRestoreJSONRequestBody defines body for PutCiphersRestore for application/json ContentType.
type PutCiphersRestoreJSONRequestBody PutCiphersRestoreJSONBody

// PostCiphersShareJSONRequestBody defines body for PostCiphersShare for application/json ContentType.
type PostCiphersShareJSONRequestBody PostCiphersShareJSONBody

// PutCiphersShareJSONRequestBody defines body for PutCiphersShare for application/json ContentType.
type PutCiphersShareJSONRequestBody PutCiphersShareJSONBody

// PostCiphersIdJSONRequestBody defines body for PostCiphersId for application/json ContentType.
type PostCiphersIdJSONRequestBody PostCiphersIdJSONBody

// PutCiphersIdJSONRequestBody defines body for PutCiphersId for application/json ContentType.
type PutCiphersIdJSONRequestBody PutCiphersIdJSONBody

// PostCiphersIdAdminJSONRequestBody defines body for PostCiphersIdAdmin for application/json ContentType.
type PostCiphersIdAdminJSONRequestBody PostCiphersIdAdminJSONBody

// PutCiphersIdAdminJSONRequestBody defines body for PutCiphersIdAdmin for application/json ContentType.
type PutCiphersIdAdminJSONRequestBody PutCiphersIdAdminJSONBody

// PostCiphersIdAttachmentV2JSONRequestBody defines body for PostCiphersIdAttachmentV2 for application/json ContentType.
type PostCiphersIdAttachmentV2JSONRequestBody PostCiphersIdAttachmentV2JSONBody

// PostCiphersIdCollectionsJSONRequestBody defines body for PostCiphersIdCollections for application/json ContentType.
type PostCiphersIdCollectionsJSONRequestBody PostCiphersIdCollectionsJSONBody

// PutCiphersIdCollectionsJSONRequestBody defines body for PutCiphersIdCollections for application/json ContentType.
type PutCiphersIdCollectionsJSONRequestBody PutCiphersIdCollectionsJSONBody

// PostCiphersIdCollectionsAdminJSONRequestBody defines body for PostCiphersIdCollectionsAdmin for application/json ContentType.
type PostCiphersIdCollectionsAdminJSONRequestBody PostCiphersIdCollectionsAdminJSONBody

// PutCiphersIdCollectionsAdminJSONRequestBody defines body for PutCiphersIdCollectionsAdmin for application/json ContentType.
type PutCiphersIdCollectionsAdminJSONRequestBody PutCiphersIdCollectionsAdminJSONBody

// PostCiphersIdPartialJSONRequestBody defines body for PostCiphersIdPartial for application/json ContentType.
type PostCiphersIdPartialJSONRequestBody PostCiphersIdPartialJSONBody

// PutCiphersIdPartialJSONRequestBody defines body for PutCiphersIdPartial for application/json ContentType.
type PutCiphersIdPartialJSONRequestBody PutCiphersIdPartialJSONBody

// PostCiphersIdShareJSONRequestBody defines body for PostCiphersIdShare for application/json ContentType.
type PostCiphersIdShareJSONRequestBody PostCiphersIdShareJSONBody

// PutCiphersIdShareJSONRequestBody defines body for PutCiphersIdShare for application/json ContentType.
type PutCiphersIdShareJSONRequestBody PutCiphersIdShareJSONBody

// PostDevicesJSONRequestBody defines body for PostDevices for application/json ContentType.
type PostDevicesJSONRequestBody PostDevicesJSONBody

// PostDevicesIdentifierIdentifierTokenJSONRequestBody defines body for PostDevicesIdentifierIdentifierToken for application/json ContentType.
type PostDevicesIdentifierIdentifierTokenJSONRequestBody PostDevicesIdentifierIdentifierTokenJSONBody

// PutDevicesIdentifierIdentifierTokenJSONRequestBody defines body for PutDevicesIdentifierIdentifierToken for application/json ContentType.
type PutDevicesIdentifierIdentifierTokenJSONRequestBody PutDevicesIdentifierIdentifierTokenJSONBody

// PostDevicesIdJSONRequestBody defines body for PostDevicesId for application/json ContentType.
type PostDevicesIdJSONRequestBody PostDevicesIdJSONBody

// PutDevicesIdJSONRequestBody defines body for PutDevicesId for application/json ContentType.
type PutDevicesIdJSONRequestBody PutDevicesIdJSONBody

// PostEmergencyAccessInviteJSONRequestBody defines body for PostEmergencyAccessInvite for application/json ContentType.
type PostEmergencyAccessInviteJSONRequestBody PostEmergencyAccessInviteJSONBody

// PostEmergencyAccessIdJSONRequestBody defines body for PostEmergencyAccessId for application/json ContentType.
type PostEmergencyAccessIdJSONRequestBody PostEmergencyAccessIdJSONBody

// PutEmergencyAccessIdJSONRequestBody defines body for PutEmergencyAccessId for application/json ContentType.
type PutEmergencyAccessIdJSONRequestBody PutEmergencyAccessIdJSONBody

// PostEmergencyAccessIdAcceptJSONRequestBody defines body for PostEmergencyAccessIdAccept for application/json ContentType.
type PostEmergencyAccessIdAcceptJSONRequestBody PostEmergencyAccessIdAcceptJSONBody

// PostEmergencyAccessIdConfirmJSONRequestBody defines body for PostEmergencyAccessIdConfirm for application/json ContentType.
type PostEmergencyAccessIdConfirmJSONRequestBody PostEmergencyAccessIdConfirmJSONBody

// PostEmergencyAccessIdPasswordJSONRequestBody defines body for PostEmergencyAccessIdPassword for application/json ContentType.
type PostEmergencyAccessIdPasswordJSONRequestBody PostEmergencyAccessIdPasswordJSONBody

// PostFoldersJSONRequestBody defines body for PostFolders for application/json ContentType.
type PostFoldersJSONRequestBody PostFoldersJSONBody

// PostFoldersIdJSONRequestBody defines body for PostFoldersId for application/json ContentType.
type PostFoldersIdJSONRequestBody PostFoldersIdJSONBody

// PutFoldersIdJSONRequestBody defines body for PutFoldersId for application/json ContentType.
type PutFoldersIdJSONRequestBody PutFoldersIdJSONBody

// PostInstallationsJSONRequestBody defines body for PostInstallations for application/json ContentType.
type PostInstallationsJSONRequestBody PostInstallationsJSONBody

// PostOrganizationsJSONRequestBody defines body for PostOrganizations for application/json ContentType.
type PostOrganizationsJSONRequestBody PostOrganizationsJSONBody

// DeleteOrganizationsIdJSONRequestBody defines body for DeleteOrganizationsId for application/json ContentType.
type DeleteOrganizationsIdJSONRequestBody DeleteOrganizationsIdJSONBody

// PostOrganizationsIdJSONRequestBody defines body for PostOrganizationsId for application/json ContentType.
type PostOrganizationsIdJSONRequestBody PostOrganizationsIdJSONBody

// PutOrganizationsIdJSONRequestBody defines body for PutOrganizationsId for application/json ContentType.
type PutOrganizationsIdJSONRequestBody PutOrganizationsIdJSONBody

// PostOrganizationsIdApiKeyJSONRequestBody defines body for PostOrganizationsIdApiKey for application/json ContentType.
type PostOrganizationsIdApiKeyJSONRequestBody PostOrganizationsIdApiKeyJSONBody

// PostOrganizationsIdDeleteJSONRequestBody defines body for PostOrganizationsIdDelete for application/json ContentType.
type PostOrganizationsIdDeleteJSONRequestBody PostOrganizationsIdDeleteJSONBody

// PostOrganizationsIdImportJSONRequestBody defines body for PostOrganizationsIdImport for application/json ContentType.
type PostOrganizationsIdImportJSONRequestBody PostOrganizationsIdImportJSONBody

// PostOrganizationsIdKeysJSONRequestBody defines body for PostOrganizationsIdKeys for application/json ContentType.
type PostOrganizationsIdKeysJSONRequestBody PostOrganizationsIdKeysJSONBody

// PostOrganizationsIdPaymentJSONRequestBody defines body for PostOrganizationsIdPayment for application/json ContentType.
type PostOrganizationsIdPaymentJSONRequestBody PostOrganizationsIdPaymentJSONBody

// PostOrganizationsIdRotateApiKeyJSONRequestBody defines body for PostOrganizationsIdRotateApiKey for application/json ContentType.
type PostOrganizationsIdRotateApiKeyJSONRequestBody PostOrganizationsIdRotateApiKeyJSONBody

// PostOrganizationsIdSeatJSONRequestBody defines body for PostOrganizationsIdSeat for application/json ContentType.
type PostOrganizationsIdSeatJSONRequestBody PostOrganizationsIdSeatJSONBody

// PostOrganizationsIdStorageJSONRequestBody defines body for PostOrganizationsIdStorage for application/json ContentType.
type PostOrganizationsIdStorageJSONRequestBody PostOrganizationsIdStorageJSONBody

// PutOrganizationsIdTaxJSONRequestBody defines body for PutOrganizationsIdTax for application/json ContentType.
type PutOrganizationsIdTaxJSONRequestBody PutOrganizationsIdTaxJSONBody

// PostOrganizationsIdTwoFactorDisableJSONRequestBody defines body for PostOrganizationsIdTwoFactorDisable for application/json ContentType.
type PostOrganizationsIdTwoFactorDisableJSONRequestBody PostOrganizationsIdTwoFactorDisableJSONBody

// PutOrganizationsIdTwoFactorDisableJSONRequestBody defines body for PutOrganizationsIdTwoFactorDisable for application/json ContentType.
type PutOrganizationsIdTwoFactorDisableJSONRequestBody PutOrganizationsIdTwoFactorDisableJSONBody

// PostOrganizationsIdTwoFactorDuoJSONRequestBody defines body for PostOrganizationsIdTwoFactorDuo for application/json ContentType.
type PostOrganizationsIdTwoFactorDuoJSONRequestBody PostOrganizationsIdTwoFactorDuoJSONBody

// PutOrganizationsIdTwoFactorDuoJSONRequestBody defines body for PutOrganizationsIdTwoFactorDuo for application/json ContentType.
type PutOrganizationsIdTwoFactorDuoJSONRequestBody PutOrganizationsIdTwoFactorDuoJSONBody

// PostOrganizationsIdTwoFactorGetDuoJSONRequestBody defines body for PostOrganizationsIdTwoFactorGetDuo for application/json ContentType.
type PostOrganizationsIdTwoFactorGetDuoJSONRequestBody PostOrganizationsIdTwoFactorGetDuoJSONBody

// PostOrganizationsIdUpgradeJSONRequestBody defines body for PostOrganizationsIdUpgrade for application/json ContentType.
type PostOrganizationsIdUpgradeJSONRequestBody PostOrganizationsIdUpgradeJSONBody

// PostOrganizationsIdVerifyBankJSONRequestBody defines body for PostOrganizationsIdVerifyBank for application/json ContentType.
type PostOrganizationsIdVerifyBankJSONRequestBody PostOrganizationsIdVerifyBankJSONBody

// PostOrganizationsOrgIdCollectionsJSONRequestBody defines body for PostOrganizationsOrgIdCollections for application/json ContentType.
type PostOrganizationsOrgIdCollectionsJSONRequestBody PostOrganizationsOrgIdCollectionsJSONBody

// PostOrganizationsOrgIdCollectionsIdJSONRequestBody defines body for PostOrganizationsOrgIdCollectionsId for application/json ContentType.
type PostOrganizationsOrgIdCollectionsIdJSONRequestBody PostOrganizationsOrgIdCollectionsIdJSONBody

// PutOrganizationsOrgIdCollectionsIdJSONRequestBody defines body for PutOrganizationsOrgIdCollectionsId for application/json ContentType.
type PutOrganizationsOrgIdCollectionsIdJSONRequestBody PutOrganizationsOrgIdCollectionsIdJSONBody

// PutOrganizationsOrgIdCollectionsIdUsersJSONRequestBody defines body for PutOrganizationsOrgIdCollectionsIdUsers for application/json ContentType.
type PutOrganizationsOrgIdCollectionsIdUsersJSONRequestBody PutOrganizationsOrgIdCollectionsIdUsersJSONBody

// PostOrganizationsOrgIdGroupsJSONRequestBody defines body for PostOrganizationsOrgIdGroups for application/json ContentType.
type PostOrganizationsOrgIdGroupsJSONRequestBody PostOrganizationsOrgIdGroupsJSONBody

// PostOrganizationsOrgIdGroupsIdJSONRequestBody defines body for PostOrganizationsOrgIdGroupsId for application/json ContentType.
type PostOrganizationsOrgIdGroupsIdJSONRequestBody PostOrganizationsOrgIdGroupsIdJSONBody

// PutOrganizationsOrgIdGroupsIdJSONRequestBody defines body for PutOrganizationsOrgIdGroupsId for application/json ContentType.
type PutOrganizationsOrgIdGroupsIdJSONRequestBody PutOrganizationsOrgIdGroupsIdJSONBody

// PutOrganizationsOrgIdGroupsIdUsersJSONRequestBody defines body for PutOrganizationsOrgIdGroupsIdUsers for application/json ContentType.
type PutOrganizationsOrgIdGroupsIdUsersJSONRequestBody PutOrganizationsOrgIdGroupsIdUsersJSONBody

// PutOrganizationsOrgIdPoliciesTypeJSONRequestBody defines body for PutOrganizationsOrgIdPoliciesType for application/json ContentType.
type PutOrganizationsOrgIdPoliciesTypeJSONRequestBody PutOrganizationsOrgIdPoliciesTypeJSONBody

// DeleteOrganizationsOrgIdUsersJSONRequestBody defines body for DeleteOrganizationsOrgIdUsers for application/json ContentType.
type DeleteOrganizationsOrgIdUsersJSONRequestBody DeleteOrganizationsOrgIdUsersJSONBody

// PostOrganizationsOrgIdUsersConfirmJSONRequestBody defines body for PostOrganizationsOrgIdUsersConfirm for application/json ContentType.
type PostOrganizationsOrgIdUsersConfirmJSONRequestBody PostOrganizationsOrgIdUsersConfirmJSONBody

// PostOrganizationsOrgIdUsersDeleteJSONRequestBody defines body for PostOrganizationsOrgIdUsersDelete for application/json ContentType.
type PostOrganizationsOrgIdUsersDeleteJSONRequestBody PostOrganizationsOrgIdUsersDeleteJSONBody

// PostOrganizationsOrgIdUsersInviteJSONRequestBody defines body for PostOrganizationsOrgIdUsersInvite for application/json ContentType.
type PostOrganizationsOrgIdUsersInviteJSONRequestBody PostOrganizationsOrgIdUsersInviteJSONBody

// PostOrganizationsOrgIdUsersPublicKeysJSONRequestBody defines body for PostOrganizationsOrgIdUsersPublicKeys for application/json ContentType.
type PostOrganizationsOrgIdUsersPublicKeysJSONRequestBody PostOrganizationsOrgIdUsersPublicKeysJSONBody

// PostOrganizationsOrgIdUsersReinviteJSONRequestBody defines body for PostOrganizationsOrgIdUsersReinvite for application/json ContentType.
type PostOrganizationsOrgIdUsersReinviteJSONRequestBody PostOrganizationsOrgIdUsersReinviteJSONBody

// PostOrganizationsOrgIdUsersIdJSONRequestBody defines body for PostOrganizationsOrgIdUsersId for application/json ContentType.
type PostOrganizationsOrgIdUsersIdJSONRequestBody PostOrganizationsOrgIdUsersIdJSONBody

// PutOrganizationsOrgIdUsersIdJSONRequestBody defines body for PutOrganizationsOrgIdUsersId for application/json ContentType.
type PutOrganizationsOrgIdUsersIdJSONRequestBody PutOrganizationsOrgIdUsersIdJSONBody

// PostOrganizationsOrgIdUsersIdAcceptJSONRequestBody defines body for PostOrganizationsOrgIdUsersIdAccept for application/json ContentType.
type PostOrganizationsOrgIdUsersIdAcceptJSONRequestBody PostOrganizationsOrgIdUsersIdAcceptJSONBody

// PostOrganizationsOrgIdUsersIdConfirmJSONRequestBody defines body for PostOrganizationsOrgIdUsersIdConfirm for application/json ContentType.
type PostOrganizationsOrgIdUsersIdConfirmJSONRequestBody PostOrganizationsOrgIdUsersIdConfirmJSONBody

// PostOrganizationsOrgIdUsersIdGroupsJSONRequestBody defines body for PostOrganizationsOrgIdUsersIdGroups for application/json ContentType.
type PostOrganizationsOrgIdUsersIdGroupsJSONRequestBody PostOrganizationsOrgIdUsersIdGroupsJSONBody

// PutOrganizationsOrgIdUsersIdGroupsJSONRequestBody defines body for PutOrganizationsOrgIdUsersIdGroups for application/json ContentType.
type PutOrganizationsOrgIdUsersIdGroupsJSONRequestBody PutOrganizationsOrgIdUsersIdGroupsJSONBody

// PutOrganizationsOrgIdUsersIdResetPasswordJSONRequestBody defines body for PutOrganizationsOrgIdUsersIdResetPassword for application/json ContentType.
type PutOrganizationsOrgIdUsersIdResetPasswordJSONRequestBody PutOrganizationsOrgIdUsersIdResetPasswordJSONBody

// PutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentJSONRequestBody defines body for PutOrganizationsOrgIdUsersUserIdResetPasswordEnrollment for application/json ContentType.
type PutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentJSONRequestBody PutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentJSONBody

// PutPushAddOrganizationJSONRequestBody defines body for PutPushAddOrganization for application/json ContentType.
type PutPushAddOrganizationJSONRequestBody PutPushAddOrganizationJSONBody

// PutPushDeleteOrganizationJSONRequestBody defines body for PutPushDeleteOrganization for application/json ContentType.
type PutPushDeleteOrganizationJSONRequestBody PutPushDeleteOrganizationJSONBody

// PostPushRegisterJSONRequestBody defines body for PostPushRegister for application/json ContentType.
type PostPushRegisterJSONRequestBody PostPushRegisterJSONBody

// PostPushSendJSONRequestBody defines body for PostPushSend for application/json ContentType.
type PostPushSendJSONRequestBody PostPushSendJSONBody

// PostSendsJSONRequestBody defines body for PostSends for application/json ContentType.
type PostSendsJSONRequestBody PostSendsJSONBody

// PostSendsAccessIdJSONRequestBody defines body for PostSendsAccessId for application/json ContentType.
type PostSendsAccessIdJSONRequestBody PostSendsAccessIdJSONBody

// PostSendsFileV2JSONRequestBody defines body for PostSendsFileV2 for application/json ContentType.
type PostSendsFileV2JSONRequestBody PostSendsFileV2JSONBody

// PostSendsEncodedSendIdAccessFileFileIdJSONRequestBody defines body for PostSendsEncodedSendIdAccessFileFileId for application/json ContentType.
type PostSendsEncodedSendIdAccessFileFileIdJSONRequestBody PostSendsEncodedSendIdAccessFileFileIdJSONBody

// PutSendsIdJSONRequestBody defines body for PutSendsId for application/json ContentType.
type PutSendsIdJSONRequestBody PutSendsIdJSONBody

// PostSettingsDomainsJSONRequestBody defines body for PostSettingsDomains for application/json ContentType.
type PostSettingsDomainsJSONRequestBody PostSettingsDomainsJSONBody

// PutSettingsDomainsJSONRequestBody defines body for PutSettingsDomains for application/json ContentType.
type PutSettingsDomainsJSONRequestBody PutSettingsDomainsJSONBody

// PostTwoFactorAuthenticatorJSONRequestBody defines body for PostTwoFactorAuthenticator for application/json ContentType.
type PostTwoFactorAuthenticatorJSONRequestBody PostTwoFactorAuthenticatorJSONBody

// PutTwoFactorAuthenticatorJSONRequestBody defines body for PutTwoFactorAuthenticator for application/json ContentType.
type PutTwoFactorAuthenticatorJSONRequestBody PutTwoFactorAuthenticatorJSONBody

// PostTwoFactorDisableJSONRequestBody defines body for PostTwoFactorDisable for application/json ContentType.
type PostTwoFactorDisableJSONRequestBody PostTwoFactorDisableJSONBody

// PutTwoFactorDisableJSONRequestBody defines body for PutTwoFactorDisable for application/json ContentType.
type PutTwoFactorDisableJSONRequestBody PutTwoFactorDisableJSONBody

// PostTwoFactorDuoJSONRequestBody defines body for PostTwoFactorDuo for application/json ContentType.
type PostTwoFactorDuoJSONRequestBody PostTwoFactorDuoJSONBody

// PutTwoFactorDuoJSONRequestBody defines body for PutTwoFactorDuo for application/json ContentType.
type PutTwoFactorDuoJSONRequestBody PutTwoFactorDuoJSONBody

// PostTwoFactorEmailJSONRequestBody defines body for PostTwoFactorEmail for application/json ContentType.
type PostTwoFactorEmailJSONRequestBody PostTwoFactorEmailJSONBody

// PutTwoFactorEmailJSONRequestBody defines body for PutTwoFactorEmail for application/json ContentType.
type PutTwoFactorEmailJSONRequestBody PutTwoFactorEmailJSONBody

// PostTwoFactorGetAuthenticatorJSONRequestBody defines body for PostTwoFactorGetAuthenticator for application/json ContentType.
type PostTwoFactorGetAuthenticatorJSONRequestBody PostTwoFactorGetAuthenticatorJSONBody

// PostTwoFactorGetDuoJSONRequestBody defines body for PostTwoFactorGetDuo for application/json ContentType.
type PostTwoFactorGetDuoJSONRequestBody PostTwoFactorGetDuoJSONBody

// PostTwoFactorGetEmailJSONRequestBody defines body for PostTwoFactorGetEmail for application/json ContentType.
type PostTwoFactorGetEmailJSONRequestBody PostTwoFactorGetEmailJSONBody

// PostTwoFactorGetRecoverJSONRequestBody defines body for PostTwoFactorGetRecover for application/json ContentType.
type PostTwoFactorGetRecoverJSONRequestBody PostTwoFactorGetRecoverJSONBody

// PostTwoFactorGetWebauthnJSONRequestBody defines body for PostTwoFactorGetWebauthn for application/json ContentType.
type PostTwoFactorGetWebauthnJSONRequestBody PostTwoFactorGetWebauthnJSONBody

// PostTwoFactorGetWebauthnChallengeJSONRequestBody defines body for PostTwoFactorGetWebauthnChallenge for application/json ContentType.
type PostTwoFactorGetWebauthnChallengeJSONRequestBody PostTwoFactorGetWebauthnChallengeJSONBody

// PostTwoFactorGetYubikeyJSONRequestBody defines body for PostTwoFactorGetYubikey for application/json ContentType.
type PostTwoFactorGetYubikeyJSONRequestBody PostTwoFactorGetYubikeyJSONBody

// PostTwoFactorRecoverJSONRequestBody defines body for PostTwoFactorRecover for application/json ContentType.
type PostTwoFactorRecoverJSONRequestBody PostTwoFactorRecoverJSONBody

// PostTwoFactorSendEmailJSONRequestBody defines body for PostTwoFactorSendEmail for application/json ContentType.
type PostTwoFactorSendEmailJSONRequestBody PostTwoFactorSendEmailJSONBody

// PostTwoFactorSendEmailLoginJSONRequestBody defines body for PostTwoFactorSendEmailLogin for application/json ContentType.
type PostTwoFactorSendEmailLoginJSONRequestBody PostTwoFactorSendEmailLoginJSONBody

// DeleteTwoFactorWebauthnJSONRequestBody defines body for DeleteTwoFactorWebauthn for application/json ContentType.
type DeleteTwoFactorWebauthnJSONRequestBody DeleteTwoFactorWebauthnJSONBody

// PostTwoFactorWebauthnJSONRequestBody defines body for PostTwoFactorWebauthn for application/json ContentType.
type PostTwoFactorWebauthnJSONRequestBody PostTwoFactorWebauthnJSONBody

// PutTwoFactorWebauthnJSONRequestBody defines body for PutTwoFactorWebauthn for application/json ContentType.
type PutTwoFactorWebauthnJSONRequestBody PutTwoFactorWebauthnJSONBody

// PostTwoFactorYubikeyJSONRequestBody defines body for PostTwoFactorYubikey for application/json ContentType.
type PostTwoFactorYubikeyJSONRequestBody PostTwoFactorYubikeyJSONBody

// PutTwoFactorYubikeyJSONRequestBody defines body for PutTwoFactorYubikey for application/json ContentType.
type PutTwoFactorYubikeyJSONRequestBody PutTwoFactorYubikeyJSONBody

// Getter for additional properties for CipherRequestModel_Attachments. Returns the specified
// element and whether it was found
func (a CipherRequestModel_Attachments) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CipherRequestModel_Attachments
func (a *CipherRequestModel_Attachments) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CipherRequestModel_Attachments to handle AdditionalProperties
func (a *CipherRequestModel_Attachments) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CipherRequestModel_Attachments to handle AdditionalProperties
func (a CipherRequestModel_Attachments) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CipherRequestModel_Attachments2. Returns the specified
// element and whether it was found
func (a CipherRequestModel_Attachments2) Get(fieldName string) (value CipherAttachmentModel, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CipherRequestModel_Attachments2
func (a *CipherRequestModel_Attachments2) Set(fieldName string, value CipherAttachmentModel) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]CipherAttachmentModel)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CipherRequestModel_Attachments2 to handle AdditionalProperties
func (a *CipherRequestModel_Attachments2) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]CipherAttachmentModel)
		for fieldName, fieldBuf := range object {
			var fieldVal CipherAttachmentModel
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CipherRequestModel_Attachments2 to handle AdditionalProperties
func (a CipherRequestModel_Attachments2) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CipherWithIdRequestModel_Attachments. Returns the specified
// element and whether it was found
func (a CipherWithIdRequestModel_Attachments) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CipherWithIdRequestModel_Attachments
func (a *CipherWithIdRequestModel_Attachments) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CipherWithIdRequestModel_Attachments to handle AdditionalProperties
func (a *CipherWithIdRequestModel_Attachments) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CipherWithIdRequestModel_Attachments to handle AdditionalProperties
func (a CipherWithIdRequestModel_Attachments) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CipherWithIdRequestModel_Attachments2. Returns the specified
// element and whether it was found
func (a CipherWithIdRequestModel_Attachments2) Get(fieldName string) (value CipherAttachmentModel, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CipherWithIdRequestModel_Attachments2
func (a *CipherWithIdRequestModel_Attachments2) Set(fieldName string, value CipherAttachmentModel) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]CipherAttachmentModel)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CipherWithIdRequestModel_Attachments2 to handle AdditionalProperties
func (a *CipherWithIdRequestModel_Attachments2) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]CipherAttachmentModel)
		for fieldName, fieldBuf := range object {
			var fieldVal CipherAttachmentModel
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CipherWithIdRequestModel_Attachments2 to handle AdditionalProperties
func (a CipherWithIdRequestModel_Attachments2) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PolicyRequestModel_Data. Returns the specified
// element and whether it was found
func (a PolicyRequestModel_Data) Get(fieldName string) (value map[string]interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PolicyRequestModel_Data
func (a *PolicyRequestModel_Data) Set(fieldName string, value map[string]interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PolicyRequestModel_Data to handle AdditionalProperties
func (a *PolicyRequestModel_Data) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal map[string]interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PolicyRequestModel_Data to handle AdditionalProperties
func (a PolicyRequestModel_Data) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PolicyResponseModel_Data. Returns the specified
// element and whether it was found
func (a PolicyResponseModel_Data) Get(fieldName string) (value map[string]interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PolicyResponseModel_Data
func (a *PolicyResponseModel_Data) Set(fieldName string, value map[string]interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PolicyResponseModel_Data to handle AdditionalProperties
func (a *PolicyResponseModel_Data) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal map[string]interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PolicyResponseModel_Data to handle AdditionalProperties
func (a PolicyResponseModel_Data) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RegisterRequestModel_ReferenceData. Returns the specified
// element and whether it was found
func (a RegisterRequestModel_ReferenceData) Get(fieldName string) (value map[string]interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RegisterRequestModel_ReferenceData
func (a *RegisterRequestModel_ReferenceData) Set(fieldName string, value map[string]interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RegisterRequestModel_ReferenceData to handle AdditionalProperties
func (a *RegisterRequestModel_ReferenceData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal map[string]interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RegisterRequestModel_ReferenceData to handle AdditionalProperties
func (a RegisterRequestModel_ReferenceData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DeleteAccounts request  with any body
	DeleteAccountsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteAccounts(ctx context.Context, body DeleteAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAccountsApiKey request  with any body
	PostAccountsApiKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAccountsApiKey(ctx context.Context, body PostAccountsApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountsBilling request
	GetAccountsBilling(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAccountsCancelPremium request
	PostAccountsCancelPremium(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAccountsDelete request  with any body
	PostAccountsDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAccountsDelete(ctx context.Context, body PostAccountsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAccountsDeleteRecover request  with any body
	PostAccountsDeleteRecoverWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAccountsDeleteRecover(ctx context.Context, body PostAccountsDeleteRecoverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAccountsDeleteRecoverToken request  with any body
	PostAccountsDeleteRecoverTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAccountsDeleteRecoverToken(ctx context.Context, body PostAccountsDeleteRecoverTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAccountsEmail request  with any body
	PostAccountsEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAccountsEmail(ctx context.Context, body PostAccountsEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAccountsEmailToken request  with any body
	PostAccountsEmailTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAccountsEmailToken(ctx context.Context, body PostAccountsEmailTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountsEnterprisePortalSigninToken request
	GetAccountsEnterprisePortalSigninToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAccountsIapCheck request  with any body
	PostAccountsIapCheckWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAccountsIapCheck(ctx context.Context, body PostAccountsIapCheckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAccountsKdf request  with any body
	PostAccountsKdfWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAccountsKdf(ctx context.Context, body PostAccountsKdfJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAccountsKey request  with any body
	PostAccountsKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAccountsKey(ctx context.Context, body PostAccountsKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountsKeys request
	GetAccountsKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAccountsKeys request  with any body
	PostAccountsKeysWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAccountsKeys(ctx context.Context, body PostAccountsKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAccountsLicense request  with any body
	PostAccountsLicenseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountsOrganizations request
	GetAccountsOrganizations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAccountsPassword request  with any body
	PostAccountsPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAccountsPassword(ctx context.Context, body PostAccountsPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAccountsPasswordHint request  with any body
	PostAccountsPasswordHintWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAccountsPasswordHint(ctx context.Context, body PostAccountsPasswordHintJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAccountsPayment request  with any body
	PostAccountsPaymentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAccountsPayment(ctx context.Context, body PostAccountsPaymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAccountsPrelogin request  with any body
	PostAccountsPreloginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAccountsPrelogin(ctx context.Context, body PostAccountsPreloginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAccountsPremium request  with any body
	PostAccountsPremiumWithBody(ctx context.Context, params *PostAccountsPremiumParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountsProfile request
	GetAccountsProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAccountsProfile request  with any body
	PostAccountsProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAccountsProfile(ctx context.Context, body PostAccountsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAccountsProfile request  with any body
	PutAccountsProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAccountsProfile(ctx context.Context, body PutAccountsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAccountsRegister request  with any body
	PostAccountsRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAccountsRegister(ctx context.Context, body PostAccountsRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAccountsReinstatePremium request
	PostAccountsReinstatePremium(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountsRevisionDate request
	GetAccountsRevisionDate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAccountsRotateApiKey request  with any body
	PostAccountsRotateApiKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAccountsRotateApiKey(ctx context.Context, body PostAccountsRotateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAccountsSecurityStamp request  with any body
	PostAccountsSecurityStampWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAccountsSecurityStamp(ctx context.Context, body PostAccountsSecurityStampJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAccountsSetPassword request  with any body
	PostAccountsSetPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAccountsSetPassword(ctx context.Context, body PostAccountsSetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountsSsoUserIdentifier request
	GetAccountsSsoUserIdentifier(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAccountsSsoOrganizationId request
	DeleteAccountsSsoOrganizationId(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAccountsStorage request  with any body
	PostAccountsStorageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAccountsStorage(ctx context.Context, body PostAccountsStorageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountsSubscription request
	GetAccountsSubscription(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountsTax request
	GetAccountsTax(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAccountsTax request  with any body
	PutAccountsTaxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAccountsTax(ctx context.Context, body PutAccountsTaxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAccountsVerifyEmail request
	PostAccountsVerifyEmail(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAccountsVerifyEmailToken request  with any body
	PostAccountsVerifyEmailTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAccountsVerifyEmailToken(ctx context.Context, body PostAccountsVerifyEmailTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAccountsVerifyPassword request  with any body
	PostAccountsVerifyPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAccountsVerifyPassword(ctx context.Context, body PostAccountsVerifyPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlive request
	GetAlive(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBitpayInvoice request  with any body
	PostBitpayInvoiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBitpayInvoice(ctx context.Context, body PostBitpayInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCiphers request  with any body
	DeleteCiphersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteCiphers(ctx context.Context, body DeleteCiphersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCiphers request
	GetCiphers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCiphers request  with any body
	PostCiphersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCiphers(ctx context.Context, body PostCiphersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCiphersAdmin request  with any body
	DeleteCiphersAdminWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteCiphersAdmin(ctx context.Context, body DeleteCiphersAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCiphersAdmin request  with any body
	PostCiphersAdminWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCiphersAdmin(ctx context.Context, body PostCiphersAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCiphersAttachmentValidateAzure request
	PostCiphersAttachmentValidateAzure(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCiphersCreate request  with any body
	PostCiphersCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCiphersCreate(ctx context.Context, body PostCiphersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCiphersDelete request  with any body
	PostCiphersDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCiphersDelete(ctx context.Context, body PostCiphersDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCiphersDelete request  with any body
	PutCiphersDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCiphersDelete(ctx context.Context, body PutCiphersDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCiphersDeleteAdmin request  with any body
	PostCiphersDeleteAdminWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCiphersDeleteAdmin(ctx context.Context, body PostCiphersDeleteAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCiphersDeleteAdmin request  with any body
	PutCiphersDeleteAdminWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCiphersDeleteAdmin(ctx context.Context, body PutCiphersDeleteAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCiphersImport request  with any body
	PostCiphersImportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCiphersImport(ctx context.Context, body PostCiphersImportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCiphersImportOrganization request  with any body
	PostCiphersImportOrganizationWithBody(ctx context.Context, params *PostCiphersImportOrganizationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCiphersImportOrganization(ctx context.Context, params *PostCiphersImportOrganizationParams, body PostCiphersImportOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCiphersMove request  with any body
	PostCiphersMoveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCiphersMove(ctx context.Context, body PostCiphersMoveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCiphersMove request  with any body
	PutCiphersMoveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCiphersMove(ctx context.Context, body PutCiphersMoveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCiphersOrganizationDetails request
	GetCiphersOrganizationDetails(ctx context.Context, params *GetCiphersOrganizationDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCiphersPurge request  with any body
	PostCiphersPurgeWithBody(ctx context.Context, params *PostCiphersPurgeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCiphersPurge(ctx context.Context, params *PostCiphersPurgeParams, body PostCiphersPurgeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCiphersRestore request  with any body
	PutCiphersRestoreWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCiphersRestore(ctx context.Context, body PutCiphersRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCiphersShare request  with any body
	PostCiphersShareWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCiphersShare(ctx context.Context, body PostCiphersShareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCiphersShare request  with any body
	PutCiphersShareWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCiphersShare(ctx context.Context, body PutCiphersShareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCiphersId request
	DeleteCiphersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCiphersId request
	GetCiphersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCiphersId request  with any body
	PostCiphersIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCiphersId(ctx context.Context, id string, body PostCiphersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCiphersId request  with any body
	PutCiphersIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCiphersId(ctx context.Context, id string, body PutCiphersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCiphersIdAdmin request
	DeleteCiphersIdAdmin(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCiphersIdAdmin request
	GetCiphersIdAdmin(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCiphersIdAdmin request  with any body
	PostCiphersIdAdminWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCiphersIdAdmin(ctx context.Context, id string, body PostCiphersIdAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCiphersIdAdmin request  with any body
	PutCiphersIdAdminWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCiphersIdAdmin(ctx context.Context, id string, body PutCiphersIdAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCiphersIdAttachment request
	PostCiphersIdAttachment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCiphersIdAttachmentAdmin request
	PostCiphersIdAttachmentAdmin(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCiphersIdAttachmentV2 request  with any body
	PostCiphersIdAttachmentV2WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCiphersIdAttachmentV2(ctx context.Context, id string, body PostCiphersIdAttachmentV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCiphersIdAttachmentAttachmentId request
	DeleteCiphersIdAttachmentAttachmentId(ctx context.Context, id string, attachmentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCiphersIdAttachmentAttachmentId request
	GetCiphersIdAttachmentAttachmentId(ctx context.Context, id string, attachmentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCiphersIdAttachmentAttachmentId request
	PostCiphersIdAttachmentAttachmentId(ctx context.Context, id string, attachmentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCiphersIdAttachmentAttachmentIdAdmin request
	DeleteCiphersIdAttachmentAttachmentIdAdmin(ctx context.Context, id string, attachmentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCiphersIdAttachmentAttachmentIdDelete request
	PostCiphersIdAttachmentAttachmentIdDelete(ctx context.Context, id string, attachmentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCiphersIdAttachmentAttachmentIdDeleteAdmin request
	PostCiphersIdAttachmentAttachmentIdDeleteAdmin(ctx context.Context, id string, attachmentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCiphersIdAttachmentAttachmentIdRenew request
	GetCiphersIdAttachmentAttachmentIdRenew(ctx context.Context, id string, attachmentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCiphersIdAttachmentAttachmentIdShare request
	PostCiphersIdAttachmentAttachmentIdShare(ctx context.Context, id string, attachmentId string, params *PostCiphersIdAttachmentAttachmentIdShareParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCiphersIdCollections request  with any body
	PostCiphersIdCollectionsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCiphersIdCollections(ctx context.Context, id string, body PostCiphersIdCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCiphersIdCollections request  with any body
	PutCiphersIdCollectionsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCiphersIdCollections(ctx context.Context, id string, body PutCiphersIdCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCiphersIdCollectionsAdmin request  with any body
	PostCiphersIdCollectionsAdminWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCiphersIdCollectionsAdmin(ctx context.Context, id string, body PostCiphersIdCollectionsAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCiphersIdCollectionsAdmin request  with any body
	PutCiphersIdCollectionsAdminWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCiphersIdCollectionsAdmin(ctx context.Context, id string, body PutCiphersIdCollectionsAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCiphersIdDelete request
	PostCiphersIdDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCiphersIdDelete request
	PutCiphersIdDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCiphersIdDeleteAdmin request
	PostCiphersIdDeleteAdmin(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCiphersIdDeleteAdmin request
	PutCiphersIdDeleteAdmin(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCiphersIdDetails request
	GetCiphersIdDetails(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCiphersIdEvents request
	GetCiphersIdEvents(ctx context.Context, id string, params *GetCiphersIdEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCiphersIdFullDetails request
	GetCiphersIdFullDetails(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCiphersIdPartial request  with any body
	PostCiphersIdPartialWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCiphersIdPartial(ctx context.Context, id string, body PostCiphersIdPartialJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCiphersIdPartial request  with any body
	PutCiphersIdPartialWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCiphersIdPartial(ctx context.Context, id string, body PutCiphersIdPartialJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCiphersIdRestore request
	PutCiphersIdRestore(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCiphersIdRestoreAdmin request
	PutCiphersIdRestoreAdmin(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCiphersIdShare request  with any body
	PostCiphersIdShareWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCiphersIdShare(ctx context.Context, id string, body PostCiphersIdShareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCiphersIdShare request  with any body
	PutCiphersIdShareWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCiphersIdShare(ctx context.Context, id string, body PutCiphersIdShareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCollections request
	GetCollections(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDevices request
	GetDevices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDevices request  with any body
	PostDevicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDevices(ctx context.Context, body PostDevicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDevicesIdentifierIdentifier request
	GetDevicesIdentifierIdentifier(ctx context.Context, identifier string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDevicesIdentifierIdentifierClearToken request
	PostDevicesIdentifierIdentifierClearToken(ctx context.Context, identifier string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutDevicesIdentifierIdentifierClearToken request
	PutDevicesIdentifierIdentifierClearToken(ctx context.Context, identifier string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDevicesIdentifierIdentifierToken request  with any body
	PostDevicesIdentifierIdentifierTokenWithBody(ctx context.Context, identifier string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDevicesIdentifierIdentifierToken(ctx context.Context, identifier string, body PostDevicesIdentifierIdentifierTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutDevicesIdentifierIdentifierToken request  with any body
	PutDevicesIdentifierIdentifierTokenWithBody(ctx context.Context, identifier string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutDevicesIdentifierIdentifierToken(ctx context.Context, identifier string, body PutDevicesIdentifierIdentifierTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDevicesId request
	DeleteDevicesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDevicesId request
	GetDevicesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDevicesId request  with any body
	PostDevicesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDevicesId(ctx context.Context, id string, body PostDevicesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutDevicesId request  with any body
	PutDevicesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutDevicesId(ctx context.Context, id string, body PutDevicesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDevicesIdDelete request
	PostDevicesIdDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmergencyAccessGranted request
	GetEmergencyAccessGranted(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEmergencyAccessInvite request  with any body
	PostEmergencyAccessInviteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostEmergencyAccessInvite(ctx context.Context, body PostEmergencyAccessInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmergencyAccessTrusted request
	GetEmergencyAccessTrusted(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEmergencyAccessId request
	DeleteEmergencyAccessId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmergencyAccessId request
	GetEmergencyAccessId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEmergencyAccessId request  with any body
	PostEmergencyAccessIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostEmergencyAccessId(ctx context.Context, id string, body PostEmergencyAccessIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutEmergencyAccessId request  with any body
	PutEmergencyAccessIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutEmergencyAccessId(ctx context.Context, id string, body PutEmergencyAccessIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEmergencyAccessIdAccept request  with any body
	PostEmergencyAccessIdAcceptWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostEmergencyAccessIdAccept(ctx context.Context, id string, body PostEmergencyAccessIdAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEmergencyAccessIdApprove request
	PostEmergencyAccessIdApprove(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEmergencyAccessIdConfirm request  with any body
	PostEmergencyAccessIdConfirmWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostEmergencyAccessIdConfirm(ctx context.Context, id string, body PostEmergencyAccessIdConfirmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEmergencyAccessIdDelete request
	PostEmergencyAccessIdDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEmergencyAccessIdInitiate request
	PostEmergencyAccessIdInitiate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEmergencyAccessIdPassword request  with any body
	PostEmergencyAccessIdPasswordWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostEmergencyAccessIdPassword(ctx context.Context, id string, body PostEmergencyAccessIdPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmergencyAccessIdPolicies request
	GetEmergencyAccessIdPolicies(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEmergencyAccessIdReinvite request
	PostEmergencyAccessIdReinvite(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEmergencyAccessIdReject request
	PostEmergencyAccessIdReject(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEmergencyAccessIdTakeover request
	PostEmergencyAccessIdTakeover(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEmergencyAccessIdView request
	PostEmergencyAccessIdView(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmergencyAccessIdCipherIdAttachmentAttachmentId request
	GetEmergencyAccessIdCipherIdAttachmentAttachmentId(ctx context.Context, id string, cipherId string, attachmentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEvents request
	GetEvents(ctx context.Context, params *GetEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFolders request
	GetFolders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFolders request  with any body
	PostFoldersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFolders(ctx context.Context, body PostFoldersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFoldersId request
	DeleteFoldersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFoldersId request
	GetFoldersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFoldersId request  with any body
	PostFoldersIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFoldersId(ctx context.Context, id string, body PostFoldersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutFoldersId request  with any body
	PutFoldersIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutFoldersId(ctx context.Context, id string, body PutFoldersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFoldersIdDelete request
	PostFoldersIdDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHibpBreach request
	GetHibpBreach(ctx context.Context, params *GetHibpBreachParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInstallations request  with any body
	PostInstallationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInstallations(ctx context.Context, body PostInstallationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInstallationsId request
	GetInstallationsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIp request
	GetIp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLicensesOrganizationId request
	GetLicensesOrganizationId(ctx context.Context, id string, params *GetLicensesOrganizationIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLicensesUserId request
	GetLicensesUserId(ctx context.Context, id string, params *GetLicensesUserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNow request
	GetNow(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizations request
	GetOrganizations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizations request  with any body
	PostOrganizationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizations(ctx context.Context, body PostOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsLicense request  with any body
	PostOrganizationsLicenseWithBody(ctx context.Context, params *PostOrganizationsLicenseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganizationsId request  with any body
	DeleteOrganizationsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteOrganizationsId(ctx context.Context, id string, body DeleteOrganizationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsId request
	GetOrganizationsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsId request  with any body
	PostOrganizationsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsId(ctx context.Context, id string, body PostOrganizationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrganizationsId request  with any body
	PutOrganizationsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrganizationsId(ctx context.Context, id string, body PutOrganizationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsIdApiKey request  with any body
	PostOrganizationsIdApiKeyWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsIdApiKey(ctx context.Context, id string, body PostOrganizationsIdApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsIdBilling request
	GetOrganizationsIdBilling(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsIdCancel request
	PostOrganizationsIdCancel(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsIdDelete request  with any body
	PostOrganizationsIdDeleteWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsIdDelete(ctx context.Context, id string, body PostOrganizationsIdDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsIdEvents request
	GetOrganizationsIdEvents(ctx context.Context, id string, params *GetOrganizationsIdEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsIdImport request  with any body
	PostOrganizationsIdImportWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsIdImport(ctx context.Context, id string, body PostOrganizationsIdImportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsIdKeys request
	GetOrganizationsIdKeys(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsIdKeys request  with any body
	PostOrganizationsIdKeysWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsIdKeys(ctx context.Context, id string, body PostOrganizationsIdKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsIdLeave request
	PostOrganizationsIdLeave(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsIdLicense request
	GetOrganizationsIdLicense(ctx context.Context, id string, params *GetOrganizationsIdLicenseParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsIdLicense request  with any body
	PostOrganizationsIdLicenseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsIdPayment request  with any body
	PostOrganizationsIdPaymentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsIdPayment(ctx context.Context, id string, body PostOrganizationsIdPaymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsIdReinstate request
	PostOrganizationsIdReinstate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsIdRotateApiKey request  with any body
	PostOrganizationsIdRotateApiKeyWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsIdRotateApiKey(ctx context.Context, id string, body PostOrganizationsIdRotateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsIdSeat request  with any body
	PostOrganizationsIdSeatWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsIdSeat(ctx context.Context, id string, body PostOrganizationsIdSeatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsIdStorage request  with any body
	PostOrganizationsIdStorageWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsIdStorage(ctx context.Context, id string, body PostOrganizationsIdStorageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsIdSubscription request
	GetOrganizationsIdSubscription(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsIdTax request
	GetOrganizationsIdTax(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrganizationsIdTax request  with any body
	PutOrganizationsIdTaxWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrganizationsIdTax(ctx context.Context, id string, body PutOrganizationsIdTaxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsIdTwoFactor request
	GetOrganizationsIdTwoFactor(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsIdTwoFactorDisable request  with any body
	PostOrganizationsIdTwoFactorDisableWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsIdTwoFactorDisable(ctx context.Context, id string, body PostOrganizationsIdTwoFactorDisableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrganizationsIdTwoFactorDisable request  with any body
	PutOrganizationsIdTwoFactorDisableWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrganizationsIdTwoFactorDisable(ctx context.Context, id string, body PutOrganizationsIdTwoFactorDisableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsIdTwoFactorDuo request  with any body
	PostOrganizationsIdTwoFactorDuoWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsIdTwoFactorDuo(ctx context.Context, id string, body PostOrganizationsIdTwoFactorDuoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrganizationsIdTwoFactorDuo request  with any body
	PutOrganizationsIdTwoFactorDuoWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrganizationsIdTwoFactorDuo(ctx context.Context, id string, body PutOrganizationsIdTwoFactorDuoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsIdTwoFactorGetDuo request  with any body
	PostOrganizationsIdTwoFactorGetDuoWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsIdTwoFactorGetDuo(ctx context.Context, id string, body PostOrganizationsIdTwoFactorGetDuoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsIdUpgrade request  with any body
	PostOrganizationsIdUpgradeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsIdUpgrade(ctx context.Context, id string, body PostOrganizationsIdUpgradeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsIdVerifyBank request  with any body
	PostOrganizationsIdVerifyBankWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsIdVerifyBank(ctx context.Context, id string, body PostOrganizationsIdVerifyBankJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsOrgIdCollections request
	GetOrganizationsOrgIdCollections(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsOrgIdCollections request  with any body
	PostOrganizationsOrgIdCollectionsWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsOrgIdCollections(ctx context.Context, orgId string, body PostOrganizationsOrgIdCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganizationsOrgIdCollectionsId request
	DeleteOrganizationsOrgIdCollectionsId(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsOrgIdCollectionsId request
	GetOrganizationsOrgIdCollectionsId(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsOrgIdCollectionsId request  with any body
	PostOrganizationsOrgIdCollectionsIdWithBody(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsOrgIdCollectionsId(ctx context.Context, orgId string, id string, body PostOrganizationsOrgIdCollectionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrganizationsOrgIdCollectionsId request  with any body
	PutOrganizationsOrgIdCollectionsIdWithBody(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrganizationsOrgIdCollectionsId(ctx context.Context, orgId string, id string, body PutOrganizationsOrgIdCollectionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsOrgIdCollectionsIdDelete request
	PostOrganizationsOrgIdCollectionsIdDelete(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsOrgIdCollectionsIdDeleteUserOrgUserId request
	PostOrganizationsOrgIdCollectionsIdDeleteUserOrgUserId(ctx context.Context, orgId string, id string, orgUserId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsOrgIdCollectionsIdDetails request
	GetOrganizationsOrgIdCollectionsIdDetails(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganizationsOrgIdCollectionsIdUserOrgUserId request
	DeleteOrganizationsOrgIdCollectionsIdUserOrgUserId(ctx context.Context, orgId string, id string, orgUserId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsOrgIdCollectionsIdUsers request
	GetOrganizationsOrgIdCollectionsIdUsers(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrganizationsOrgIdCollectionsIdUsers request  with any body
	PutOrganizationsOrgIdCollectionsIdUsersWithBody(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrganizationsOrgIdCollectionsIdUsers(ctx context.Context, orgId string, id string, body PutOrganizationsOrgIdCollectionsIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsOrgIdGroups request
	GetOrganizationsOrgIdGroups(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsOrgIdGroups request  with any body
	PostOrganizationsOrgIdGroupsWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsOrgIdGroups(ctx context.Context, orgId string, body PostOrganizationsOrgIdGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganizationsOrgIdGroupsId request
	DeleteOrganizationsOrgIdGroupsId(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsOrgIdGroupsId request
	GetOrganizationsOrgIdGroupsId(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsOrgIdGroupsId request  with any body
	PostOrganizationsOrgIdGroupsIdWithBody(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsOrgIdGroupsId(ctx context.Context, orgId string, id string, body PostOrganizationsOrgIdGroupsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrganizationsOrgIdGroupsId request  with any body
	PutOrganizationsOrgIdGroupsIdWithBody(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrganizationsOrgIdGroupsId(ctx context.Context, orgId string, id string, body PutOrganizationsOrgIdGroupsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsOrgIdGroupsIdDelete request
	PostOrganizationsOrgIdGroupsIdDelete(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsOrgIdGroupsIdDeleteUserOrgUserId request
	PostOrganizationsOrgIdGroupsIdDeleteUserOrgUserId(ctx context.Context, orgId string, id string, orgUserId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsOrgIdGroupsIdDetails request
	GetOrganizationsOrgIdGroupsIdDetails(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganizationsOrgIdGroupsIdUserOrgUserId request
	DeleteOrganizationsOrgIdGroupsIdUserOrgUserId(ctx context.Context, orgId string, id string, orgUserId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsOrgIdGroupsIdUsers request
	GetOrganizationsOrgIdGroupsIdUsers(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrganizationsOrgIdGroupsIdUsers request  with any body
	PutOrganizationsOrgIdGroupsIdUsersWithBody(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrganizationsOrgIdGroupsIdUsers(ctx context.Context, orgId string, id string, body PutOrganizationsOrgIdGroupsIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsOrgIdPolicies request
	GetOrganizationsOrgIdPolicies(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsOrgIdPoliciesToken request
	GetOrganizationsOrgIdPoliciesToken(ctx context.Context, orgId string, params *GetOrganizationsOrgIdPoliciesTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsOrgIdPoliciesType request
	GetOrganizationsOrgIdPoliciesType(ctx context.Context, orgId string, pType int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrganizationsOrgIdPoliciesType request  with any body
	PutOrganizationsOrgIdPoliciesTypeWithBody(ctx context.Context, orgId string, pType int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrganizationsOrgIdPoliciesType(ctx context.Context, orgId string, pType int32, body PutOrganizationsOrgIdPoliciesTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganizationsOrgIdUsers request  with any body
	DeleteOrganizationsOrgIdUsersWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteOrganizationsOrgIdUsers(ctx context.Context, orgId string, body DeleteOrganizationsOrgIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsOrgIdUsers request
	GetOrganizationsOrgIdUsers(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsOrgIdUsersConfirm request  with any body
	PostOrganizationsOrgIdUsersConfirmWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsOrgIdUsersConfirm(ctx context.Context, orgId string, body PostOrganizationsOrgIdUsersConfirmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsOrgIdUsersDelete request  with any body
	PostOrganizationsOrgIdUsersDeleteWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsOrgIdUsersDelete(ctx context.Context, orgId string, body PostOrganizationsOrgIdUsersDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsOrgIdUsersInvite request  with any body
	PostOrganizationsOrgIdUsersInviteWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsOrgIdUsersInvite(ctx context.Context, orgId string, body PostOrganizationsOrgIdUsersInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsOrgIdUsersPublicKeys request  with any body
	PostOrganizationsOrgIdUsersPublicKeysWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsOrgIdUsersPublicKeys(ctx context.Context, orgId string, body PostOrganizationsOrgIdUsersPublicKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsOrgIdUsersReinvite request  with any body
	PostOrganizationsOrgIdUsersReinviteWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsOrgIdUsersReinvite(ctx context.Context, orgId string, body PostOrganizationsOrgIdUsersReinviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganizationsOrgIdUsersId request
	DeleteOrganizationsOrgIdUsersId(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsOrgIdUsersId request
	GetOrganizationsOrgIdUsersId(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsOrgIdUsersId request  with any body
	PostOrganizationsOrgIdUsersIdWithBody(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsOrgIdUsersId(ctx context.Context, orgId string, id string, body PostOrganizationsOrgIdUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrganizationsOrgIdUsersId request  with any body
	PutOrganizationsOrgIdUsersIdWithBody(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrganizationsOrgIdUsersId(ctx context.Context, orgId string, id string, body PutOrganizationsOrgIdUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsOrgIdUsersIdAccept request  with any body
	PostOrganizationsOrgIdUsersIdAcceptWithBody(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsOrgIdUsersIdAccept(ctx context.Context, orgId string, id string, body PostOrganizationsOrgIdUsersIdAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsOrgIdUsersIdConfirm request  with any body
	PostOrganizationsOrgIdUsersIdConfirmWithBody(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsOrgIdUsersIdConfirm(ctx context.Context, orgId string, id string, body PostOrganizationsOrgIdUsersIdConfirmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsOrgIdUsersIdDelete request
	PostOrganizationsOrgIdUsersIdDelete(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsOrgIdUsersIdEvents request
	GetOrganizationsOrgIdUsersIdEvents(ctx context.Context, orgId string, id string, params *GetOrganizationsOrgIdUsersIdEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsOrgIdUsersIdGroups request
	GetOrganizationsOrgIdUsersIdGroups(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsOrgIdUsersIdGroups request  with any body
	PostOrganizationsOrgIdUsersIdGroupsWithBody(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsOrgIdUsersIdGroups(ctx context.Context, orgId string, id string, body PostOrganizationsOrgIdUsersIdGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrganizationsOrgIdUsersIdGroups request  with any body
	PutOrganizationsOrgIdUsersIdGroupsWithBody(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrganizationsOrgIdUsersIdGroups(ctx context.Context, orgId string, id string, body PutOrganizationsOrgIdUsersIdGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsOrgIdUsersIdReinvite request
	PostOrganizationsOrgIdUsersIdReinvite(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrganizationsOrgIdUsersIdResetPassword request  with any body
	PutOrganizationsOrgIdUsersIdResetPasswordWithBody(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrganizationsOrgIdUsersIdResetPassword(ctx context.Context, orgId string, id string, body PutOrganizationsOrgIdUsersIdResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsOrgIdUsersIdResetPasswordDetails request
	GetOrganizationsOrgIdUsersIdResetPasswordDetails(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrganizationsOrgIdUsersUserIdResetPasswordEnrollment request  with any body
	PutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentWithBody(ctx context.Context, orgId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrganizationsOrgIdUsersUserIdResetPasswordEnrollment(ctx context.Context, orgId string, userId string, body PutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlans request
	GetPlans(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlansSalesTaxRates request
	GetPlansSalesTaxRates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPushAddOrganization request  with any body
	PutPushAddOrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPushAddOrganization(ctx context.Context, body PutPushAddOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPushDeleteOrganization request  with any body
	PutPushDeleteOrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPushDeleteOrganization(ctx context.Context, body PutPushDeleteOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPushRegister request  with any body
	PostPushRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPushRegister(ctx context.Context, body PostPushRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPushSend request  with any body
	PostPushSendWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPushSend(ctx context.Context, body PostPushSendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePushId request
	DeletePushId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSends request
	GetSends(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSends request  with any body
	PostSendsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSends(ctx context.Context, body PostSendsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSendsAccessId request  with any body
	PostSendsAccessIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSendsAccessId(ctx context.Context, id string, body PostSendsAccessIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSendsFile request
	PostSendsFile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSendsFileV2 request  with any body
	PostSendsFileV2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSendsFileV2(ctx context.Context, body PostSendsFileV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSendsFileValidateAzure request
	PostSendsFileValidateAzure(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSendsEncodedSendIdAccessFileFileId request  with any body
	PostSendsEncodedSendIdAccessFileFileIdWithBody(ctx context.Context, encodedSendId string, fileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSendsEncodedSendIdAccessFileFileId(ctx context.Context, encodedSendId string, fileId string, body PostSendsEncodedSendIdAccessFileFileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSendsId request
	DeleteSendsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSendsId request
	GetSendsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSendsId request  with any body
	PutSendsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSendsId(ctx context.Context, id string, body PutSendsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSendsIdFileFileId request
	GetSendsIdFileFileId(ctx context.Context, id string, fileId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSendsIdFileFileId request
	PostSendsIdFileFileId(ctx context.Context, id string, fileId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSendsIdRemovePassword request
	PutSendsIdRemovePassword(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsDomains request
	GetSettingsDomains(ctx context.Context, params *GetSettingsDomainsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSettingsDomains request  with any body
	PostSettingsDomainsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSettingsDomains(ctx context.Context, body PostSettingsDomainsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsDomains request  with any body
	PutSettingsDomainsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsDomains(ctx context.Context, body PutSettingsDomainsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSetupPayment request
	PostSetupPayment(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSync request
	GetSync(ctx context.Context, params *GetSyncParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTwoFactor request
	GetTwoFactor(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTwoFactorAuthenticator request  with any body
	PostTwoFactorAuthenticatorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTwoFactorAuthenticator(ctx context.Context, body PostTwoFactorAuthenticatorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTwoFactorAuthenticator request  with any body
	PutTwoFactorAuthenticatorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTwoFactorAuthenticator(ctx context.Context, body PutTwoFactorAuthenticatorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTwoFactorDisable request  with any body
	PostTwoFactorDisableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTwoFactorDisable(ctx context.Context, body PostTwoFactorDisableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTwoFactorDisable request  with any body
	PutTwoFactorDisableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTwoFactorDisable(ctx context.Context, body PutTwoFactorDisableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTwoFactorDuo request  with any body
	PostTwoFactorDuoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTwoFactorDuo(ctx context.Context, body PostTwoFactorDuoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTwoFactorDuo request  with any body
	PutTwoFactorDuoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTwoFactorDuo(ctx context.Context, body PutTwoFactorDuoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTwoFactorEmail request  with any body
	PostTwoFactorEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTwoFactorEmail(ctx context.Context, body PostTwoFactorEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTwoFactorEmail request  with any body
	PutTwoFactorEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTwoFactorEmail(ctx context.Context, body PutTwoFactorEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTwoFactorGetAuthenticator request  with any body
	PostTwoFactorGetAuthenticatorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTwoFactorGetAuthenticator(ctx context.Context, body PostTwoFactorGetAuthenticatorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTwoFactorGetDuo request  with any body
	PostTwoFactorGetDuoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTwoFactorGetDuo(ctx context.Context, body PostTwoFactorGetDuoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTwoFactorGetEmail request  with any body
	PostTwoFactorGetEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTwoFactorGetEmail(ctx context.Context, body PostTwoFactorGetEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTwoFactorGetRecover request  with any body
	PostTwoFactorGetRecoverWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTwoFactorGetRecover(ctx context.Context, body PostTwoFactorGetRecoverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTwoFactorGetWebauthn request  with any body
	PostTwoFactorGetWebauthnWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTwoFactorGetWebauthn(ctx context.Context, body PostTwoFactorGetWebauthnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTwoFactorGetWebauthnChallenge request  with any body
	PostTwoFactorGetWebauthnChallengeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTwoFactorGetWebauthnChallenge(ctx context.Context, body PostTwoFactorGetWebauthnChallengeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTwoFactorGetYubikey request  with any body
	PostTwoFactorGetYubikeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTwoFactorGetYubikey(ctx context.Context, body PostTwoFactorGetYubikeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTwoFactorRecover request  with any body
	PostTwoFactorRecoverWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTwoFactorRecover(ctx context.Context, body PostTwoFactorRecoverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTwoFactorSendEmail request  with any body
	PostTwoFactorSendEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTwoFactorSendEmail(ctx context.Context, body PostTwoFactorSendEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTwoFactorSendEmailLogin request  with any body
	PostTwoFactorSendEmailLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTwoFactorSendEmailLogin(ctx context.Context, body PostTwoFactorSendEmailLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTwoFactorWebauthn request  with any body
	DeleteTwoFactorWebauthnWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteTwoFactorWebauthn(ctx context.Context, body DeleteTwoFactorWebauthnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTwoFactorWebauthn request  with any body
	PostTwoFactorWebauthnWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTwoFactorWebauthn(ctx context.Context, body PostTwoFactorWebauthnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTwoFactorWebauthn request  with any body
	PutTwoFactorWebauthnWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTwoFactorWebauthn(ctx context.Context, body PutTwoFactorWebauthnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTwoFactorYubikey request  with any body
	PostTwoFactorYubikeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTwoFactorYubikey(ctx context.Context, body PostTwoFactorYubikeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTwoFactorYubikey request  with any body
	PutTwoFactorYubikeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTwoFactorYubikey(ctx context.Context, body PutTwoFactorYubikeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersIdPublicKey request
	GetUsersIdPublicKey(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVersion request
	GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) DeleteAccountsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAccountsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAccounts(ctx context.Context, body DeleteAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAccountsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsApiKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsApiKeyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsApiKey(ctx context.Context, body PostAccountsApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsApiKeyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountsBilling(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountsBillingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsCancelPremium(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsCancelPremiumRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsDelete(ctx context.Context, body PostAccountsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsDeleteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsDeleteRecoverWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsDeleteRecoverRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsDeleteRecover(ctx context.Context, body PostAccountsDeleteRecoverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsDeleteRecoverRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsDeleteRecoverTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsDeleteRecoverTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsDeleteRecoverToken(ctx context.Context, body PostAccountsDeleteRecoverTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsDeleteRecoverTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsEmailRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsEmail(ctx context.Context, body PostAccountsEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsEmailRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsEmailTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsEmailTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsEmailToken(ctx context.Context, body PostAccountsEmailTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsEmailTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountsEnterprisePortalSigninToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountsEnterprisePortalSigninTokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsIapCheckWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsIapCheckRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsIapCheck(ctx context.Context, body PostAccountsIapCheckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsIapCheckRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsKdfWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsKdfRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsKdf(ctx context.Context, body PostAccountsKdfJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsKdfRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsKeyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsKey(ctx context.Context, body PostAccountsKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsKeyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountsKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountsKeysRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsKeysWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsKeysRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsKeys(ctx context.Context, body PostAccountsKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsKeysRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsLicenseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsLicenseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountsOrganizations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountsOrganizationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsPasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsPassword(ctx context.Context, body PostAccountsPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsPasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsPasswordHintWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsPasswordHintRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsPasswordHint(ctx context.Context, body PostAccountsPasswordHintJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsPasswordHintRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsPaymentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsPaymentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsPayment(ctx context.Context, body PostAccountsPaymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsPaymentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsPreloginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsPreloginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsPrelogin(ctx context.Context, body PostAccountsPreloginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsPreloginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsPremiumWithBody(ctx context.Context, params *PostAccountsPremiumParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsPremiumRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountsProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountsProfileRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsProfileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsProfile(ctx context.Context, body PostAccountsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsProfileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAccountsProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAccountsProfileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAccountsProfile(ctx context.Context, body PutAccountsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAccountsProfileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsRegisterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsRegister(ctx context.Context, body PostAccountsRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsRegisterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsReinstatePremium(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsReinstatePremiumRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountsRevisionDate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountsRevisionDateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsRotateApiKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsRotateApiKeyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsRotateApiKey(ctx context.Context, body PostAccountsRotateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsRotateApiKeyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsSecurityStampWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsSecurityStampRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsSecurityStamp(ctx context.Context, body PostAccountsSecurityStampJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsSecurityStampRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsSetPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsSetPasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsSetPassword(ctx context.Context, body PostAccountsSetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsSetPasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountsSsoUserIdentifier(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountsSsoUserIdentifierRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAccountsSsoOrganizationId(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAccountsSsoOrganizationIdRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsStorageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsStorageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsStorage(ctx context.Context, body PostAccountsStorageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsStorageRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountsSubscription(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountsSubscriptionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountsTax(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountsTaxRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAccountsTaxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAccountsTaxRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAccountsTax(ctx context.Context, body PutAccountsTaxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAccountsTaxRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsVerifyEmail(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsVerifyEmailRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsVerifyEmailTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsVerifyEmailTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsVerifyEmailToken(ctx context.Context, body PostAccountsVerifyEmailTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsVerifyEmailTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsVerifyPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsVerifyPasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsVerifyPassword(ctx context.Context, body PostAccountsVerifyPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsVerifyPasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlive(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAliveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBitpayInvoiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBitpayInvoiceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBitpayInvoice(ctx context.Context, body PostBitpayInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBitpayInvoiceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCiphersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCiphersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCiphers(ctx context.Context, body DeleteCiphersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCiphersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCiphers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCiphersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphers(ctx context.Context, body PostCiphersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCiphersAdminWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCiphersAdminRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCiphersAdmin(ctx context.Context, body DeleteCiphersAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCiphersAdminRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersAdminWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersAdminRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersAdmin(ctx context.Context, body PostCiphersAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersAdminRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersAttachmentValidateAzure(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersAttachmentValidateAzureRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersCreate(ctx context.Context, body PostCiphersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersDelete(ctx context.Context, body PostCiphersDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersDeleteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCiphersDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCiphersDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCiphersDelete(ctx context.Context, body PutCiphersDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCiphersDeleteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersDeleteAdminWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersDeleteAdminRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersDeleteAdmin(ctx context.Context, body PostCiphersDeleteAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersDeleteAdminRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCiphersDeleteAdminWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCiphersDeleteAdminRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCiphersDeleteAdmin(ctx context.Context, body PutCiphersDeleteAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCiphersDeleteAdminRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersImportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersImportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersImport(ctx context.Context, body PostCiphersImportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersImportRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersImportOrganizationWithBody(ctx context.Context, params *PostCiphersImportOrganizationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersImportOrganizationRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersImportOrganization(ctx context.Context, params *PostCiphersImportOrganizationParams, body PostCiphersImportOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersImportOrganizationRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersMoveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersMoveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersMove(ctx context.Context, body PostCiphersMoveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersMoveRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCiphersMoveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCiphersMoveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCiphersMove(ctx context.Context, body PutCiphersMoveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCiphersMoveRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCiphersOrganizationDetails(ctx context.Context, params *GetCiphersOrganizationDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCiphersOrganizationDetailsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersPurgeWithBody(ctx context.Context, params *PostCiphersPurgeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersPurgeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersPurge(ctx context.Context, params *PostCiphersPurgeParams, body PostCiphersPurgeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersPurgeRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCiphersRestoreWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCiphersRestoreRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCiphersRestore(ctx context.Context, body PutCiphersRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCiphersRestoreRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersShareWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersShareRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersShare(ctx context.Context, body PostCiphersShareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersShareRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCiphersShareWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCiphersShareRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCiphersShare(ctx context.Context, body PutCiphersShareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCiphersShareRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCiphersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCiphersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCiphersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCiphersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersId(ctx context.Context, id string, body PostCiphersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCiphersIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCiphersIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCiphersId(ctx context.Context, id string, body PutCiphersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCiphersIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCiphersIdAdmin(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCiphersIdAdminRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCiphersIdAdmin(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCiphersIdAdminRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersIdAdminWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersIdAdminRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersIdAdmin(ctx context.Context, id string, body PostCiphersIdAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersIdAdminRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCiphersIdAdminWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCiphersIdAdminRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCiphersIdAdmin(ctx context.Context, id string, body PutCiphersIdAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCiphersIdAdminRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersIdAttachment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersIdAttachmentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersIdAttachmentAdmin(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersIdAttachmentAdminRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersIdAttachmentV2WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersIdAttachmentV2RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersIdAttachmentV2(ctx context.Context, id string, body PostCiphersIdAttachmentV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersIdAttachmentV2Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCiphersIdAttachmentAttachmentId(ctx context.Context, id string, attachmentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCiphersIdAttachmentAttachmentIdRequest(c.Server, id, attachmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCiphersIdAttachmentAttachmentId(ctx context.Context, id string, attachmentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCiphersIdAttachmentAttachmentIdRequest(c.Server, id, attachmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersIdAttachmentAttachmentId(ctx context.Context, id string, attachmentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersIdAttachmentAttachmentIdRequest(c.Server, id, attachmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCiphersIdAttachmentAttachmentIdAdmin(ctx context.Context, id string, attachmentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCiphersIdAttachmentAttachmentIdAdminRequest(c.Server, id, attachmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersIdAttachmentAttachmentIdDelete(ctx context.Context, id string, attachmentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersIdAttachmentAttachmentIdDeleteRequest(c.Server, id, attachmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersIdAttachmentAttachmentIdDeleteAdmin(ctx context.Context, id string, attachmentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersIdAttachmentAttachmentIdDeleteAdminRequest(c.Server, id, attachmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCiphersIdAttachmentAttachmentIdRenew(ctx context.Context, id string, attachmentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCiphersIdAttachmentAttachmentIdRenewRequest(c.Server, id, attachmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersIdAttachmentAttachmentIdShare(ctx context.Context, id string, attachmentId string, params *PostCiphersIdAttachmentAttachmentIdShareParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersIdAttachmentAttachmentIdShareRequest(c.Server, id, attachmentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersIdCollectionsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersIdCollectionsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersIdCollections(ctx context.Context, id string, body PostCiphersIdCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersIdCollectionsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCiphersIdCollectionsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCiphersIdCollectionsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCiphersIdCollections(ctx context.Context, id string, body PutCiphersIdCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCiphersIdCollectionsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersIdCollectionsAdminWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersIdCollectionsAdminRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersIdCollectionsAdmin(ctx context.Context, id string, body PostCiphersIdCollectionsAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersIdCollectionsAdminRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCiphersIdCollectionsAdminWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCiphersIdCollectionsAdminRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCiphersIdCollectionsAdmin(ctx context.Context, id string, body PutCiphersIdCollectionsAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCiphersIdCollectionsAdminRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersIdDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersIdDeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCiphersIdDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCiphersIdDeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersIdDeleteAdmin(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersIdDeleteAdminRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCiphersIdDeleteAdmin(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCiphersIdDeleteAdminRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCiphersIdDetails(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCiphersIdDetailsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCiphersIdEvents(ctx context.Context, id string, params *GetCiphersIdEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCiphersIdEventsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCiphersIdFullDetails(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCiphersIdFullDetailsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersIdPartialWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersIdPartialRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersIdPartial(ctx context.Context, id string, body PostCiphersIdPartialJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersIdPartialRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCiphersIdPartialWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCiphersIdPartialRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCiphersIdPartial(ctx context.Context, id string, body PutCiphersIdPartialJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCiphersIdPartialRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCiphersIdRestore(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCiphersIdRestoreRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCiphersIdRestoreAdmin(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCiphersIdRestoreAdminRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersIdShareWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersIdShareRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCiphersIdShare(ctx context.Context, id string, body PostCiphersIdShareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCiphersIdShareRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCiphersIdShareWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCiphersIdShareRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCiphersIdShare(ctx context.Context, id string, body PutCiphersIdShareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCiphersIdShareRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCollections(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCollectionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDevices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDevicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDevicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDevicesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDevices(ctx context.Context, body PostDevicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDevicesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDevicesIdentifierIdentifier(ctx context.Context, identifier string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDevicesIdentifierIdentifierRequest(c.Server, identifier)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDevicesIdentifierIdentifierClearToken(ctx context.Context, identifier string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDevicesIdentifierIdentifierClearTokenRequest(c.Server, identifier)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDevicesIdentifierIdentifierClearToken(ctx context.Context, identifier string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDevicesIdentifierIdentifierClearTokenRequest(c.Server, identifier)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDevicesIdentifierIdentifierTokenWithBody(ctx context.Context, identifier string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDevicesIdentifierIdentifierTokenRequestWithBody(c.Server, identifier, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDevicesIdentifierIdentifierToken(ctx context.Context, identifier string, body PostDevicesIdentifierIdentifierTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDevicesIdentifierIdentifierTokenRequest(c.Server, identifier, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDevicesIdentifierIdentifierTokenWithBody(ctx context.Context, identifier string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDevicesIdentifierIdentifierTokenRequestWithBody(c.Server, identifier, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDevicesIdentifierIdentifierToken(ctx context.Context, identifier string, body PutDevicesIdentifierIdentifierTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDevicesIdentifierIdentifierTokenRequest(c.Server, identifier, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDevicesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDevicesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDevicesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDevicesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDevicesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDevicesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDevicesId(ctx context.Context, id string, body PostDevicesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDevicesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDevicesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDevicesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDevicesId(ctx context.Context, id string, body PutDevicesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDevicesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDevicesIdDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDevicesIdDeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmergencyAccessGranted(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmergencyAccessGrantedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEmergencyAccessInviteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEmergencyAccessInviteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEmergencyAccessInvite(ctx context.Context, body PostEmergencyAccessInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEmergencyAccessInviteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmergencyAccessTrusted(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmergencyAccessTrustedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEmergencyAccessId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEmergencyAccessIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmergencyAccessId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmergencyAccessIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEmergencyAccessIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEmergencyAccessIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEmergencyAccessId(ctx context.Context, id string, body PostEmergencyAccessIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEmergencyAccessIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutEmergencyAccessIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutEmergencyAccessIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutEmergencyAccessId(ctx context.Context, id string, body PutEmergencyAccessIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutEmergencyAccessIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEmergencyAccessIdAcceptWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEmergencyAccessIdAcceptRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEmergencyAccessIdAccept(ctx context.Context, id string, body PostEmergencyAccessIdAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEmergencyAccessIdAcceptRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEmergencyAccessIdApprove(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEmergencyAccessIdApproveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEmergencyAccessIdConfirmWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEmergencyAccessIdConfirmRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEmergencyAccessIdConfirm(ctx context.Context, id string, body PostEmergencyAccessIdConfirmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEmergencyAccessIdConfirmRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEmergencyAccessIdDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEmergencyAccessIdDeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEmergencyAccessIdInitiate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEmergencyAccessIdInitiateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEmergencyAccessIdPasswordWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEmergencyAccessIdPasswordRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEmergencyAccessIdPassword(ctx context.Context, id string, body PostEmergencyAccessIdPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEmergencyAccessIdPasswordRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmergencyAccessIdPolicies(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmergencyAccessIdPoliciesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEmergencyAccessIdReinvite(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEmergencyAccessIdReinviteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEmergencyAccessIdReject(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEmergencyAccessIdRejectRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEmergencyAccessIdTakeover(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEmergencyAccessIdTakeoverRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEmergencyAccessIdView(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEmergencyAccessIdViewRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmergencyAccessIdCipherIdAttachmentAttachmentId(ctx context.Context, id string, cipherId string, attachmentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmergencyAccessIdCipherIdAttachmentAttachmentIdRequest(c.Server, id, cipherId, attachmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEvents(ctx context.Context, params *GetEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEventsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFolders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFoldersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFoldersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFoldersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFolders(ctx context.Context, body PostFoldersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFoldersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFoldersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFoldersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFoldersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFoldersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFoldersIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFoldersIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFoldersId(ctx context.Context, id string, body PostFoldersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFoldersIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFoldersIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFoldersIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFoldersId(ctx context.Context, id string, body PutFoldersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFoldersIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFoldersIdDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFoldersIdDeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHibpBreach(ctx context.Context, params *GetHibpBreachParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHibpBreachRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstallationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstallationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstallations(ctx context.Context, body PostInstallationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstallationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInstallationsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInstallationsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIpRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLicensesOrganizationId(ctx context.Context, id string, params *GetLicensesOrganizationIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLicensesOrganizationIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLicensesUserId(ctx context.Context, id string, params *GetLicensesUserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLicensesUserIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNow(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNowRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizations(ctx context.Context, body PostOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsLicenseWithBody(ctx context.Context, params *PostOrganizationsLicenseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsLicenseRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizationsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizationsId(ctx context.Context, id string, body DeleteOrganizationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsId(ctx context.Context, id string, body PostOrganizationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrganizationsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrganizationsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrganizationsId(ctx context.Context, id string, body PutOrganizationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrganizationsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsIdApiKeyWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdApiKeyRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsIdApiKey(ctx context.Context, id string, body PostOrganizationsIdApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdApiKeyRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsIdBilling(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsIdBillingRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsIdCancel(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdCancelRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsIdDeleteWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdDeleteRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsIdDelete(ctx context.Context, id string, body PostOrganizationsIdDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdDeleteRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsIdEvents(ctx context.Context, id string, params *GetOrganizationsIdEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsIdEventsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsIdImportWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdImportRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsIdImport(ctx context.Context, id string, body PostOrganizationsIdImportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdImportRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsIdKeys(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsIdKeysRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsIdKeysWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdKeysRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsIdKeys(ctx context.Context, id string, body PostOrganizationsIdKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdKeysRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsIdLeave(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdLeaveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsIdLicense(ctx context.Context, id string, params *GetOrganizationsIdLicenseParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsIdLicenseRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsIdLicenseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdLicenseRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsIdPaymentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdPaymentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsIdPayment(ctx context.Context, id string, body PostOrganizationsIdPaymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdPaymentRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsIdReinstate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdReinstateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsIdRotateApiKeyWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdRotateApiKeyRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsIdRotateApiKey(ctx context.Context, id string, body PostOrganizationsIdRotateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdRotateApiKeyRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsIdSeatWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdSeatRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsIdSeat(ctx context.Context, id string, body PostOrganizationsIdSeatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdSeatRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsIdStorageWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdStorageRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsIdStorage(ctx context.Context, id string, body PostOrganizationsIdStorageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdStorageRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsIdSubscription(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsIdSubscriptionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsIdTax(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsIdTaxRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrganizationsIdTaxWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrganizationsIdTaxRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrganizationsIdTax(ctx context.Context, id string, body PutOrganizationsIdTaxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrganizationsIdTaxRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsIdTwoFactor(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsIdTwoFactorRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsIdTwoFactorDisableWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdTwoFactorDisableRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsIdTwoFactorDisable(ctx context.Context, id string, body PostOrganizationsIdTwoFactorDisableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdTwoFactorDisableRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrganizationsIdTwoFactorDisableWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrganizationsIdTwoFactorDisableRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrganizationsIdTwoFactorDisable(ctx context.Context, id string, body PutOrganizationsIdTwoFactorDisableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrganizationsIdTwoFactorDisableRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsIdTwoFactorDuoWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdTwoFactorDuoRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsIdTwoFactorDuo(ctx context.Context, id string, body PostOrganizationsIdTwoFactorDuoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdTwoFactorDuoRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrganizationsIdTwoFactorDuoWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrganizationsIdTwoFactorDuoRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrganizationsIdTwoFactorDuo(ctx context.Context, id string, body PutOrganizationsIdTwoFactorDuoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrganizationsIdTwoFactorDuoRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsIdTwoFactorGetDuoWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdTwoFactorGetDuoRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsIdTwoFactorGetDuo(ctx context.Context, id string, body PostOrganizationsIdTwoFactorGetDuoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdTwoFactorGetDuoRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsIdUpgradeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdUpgradeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsIdUpgrade(ctx context.Context, id string, body PostOrganizationsIdUpgradeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdUpgradeRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsIdVerifyBankWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdVerifyBankRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsIdVerifyBank(ctx context.Context, id string, body PostOrganizationsIdVerifyBankJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdVerifyBankRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsOrgIdCollections(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsOrgIdCollectionsRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrgIdCollectionsWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrgIdCollectionsRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrgIdCollections(ctx context.Context, orgId string, body PostOrganizationsOrgIdCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrgIdCollectionsRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizationsOrgIdCollectionsId(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationsOrgIdCollectionsIdRequest(c.Server, orgId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsOrgIdCollectionsId(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsOrgIdCollectionsIdRequest(c.Server, orgId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrgIdCollectionsIdWithBody(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrgIdCollectionsIdRequestWithBody(c.Server, orgId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrgIdCollectionsId(ctx context.Context, orgId string, id string, body PostOrganizationsOrgIdCollectionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrgIdCollectionsIdRequest(c.Server, orgId, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrganizationsOrgIdCollectionsIdWithBody(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrganizationsOrgIdCollectionsIdRequestWithBody(c.Server, orgId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrganizationsOrgIdCollectionsId(ctx context.Context, orgId string, id string, body PutOrganizationsOrgIdCollectionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrganizationsOrgIdCollectionsIdRequest(c.Server, orgId, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrgIdCollectionsIdDelete(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrgIdCollectionsIdDeleteRequest(c.Server, orgId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrgIdCollectionsIdDeleteUserOrgUserId(ctx context.Context, orgId string, id string, orgUserId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrgIdCollectionsIdDeleteUserOrgUserIdRequest(c.Server, orgId, id, orgUserId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsOrgIdCollectionsIdDetails(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsOrgIdCollectionsIdDetailsRequest(c.Server, orgId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizationsOrgIdCollectionsIdUserOrgUserId(ctx context.Context, orgId string, id string, orgUserId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationsOrgIdCollectionsIdUserOrgUserIdRequest(c.Server, orgId, id, orgUserId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsOrgIdCollectionsIdUsers(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsOrgIdCollectionsIdUsersRequest(c.Server, orgId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrganizationsOrgIdCollectionsIdUsersWithBody(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrganizationsOrgIdCollectionsIdUsersRequestWithBody(c.Server, orgId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrganizationsOrgIdCollectionsIdUsers(ctx context.Context, orgId string, id string, body PutOrganizationsOrgIdCollectionsIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrganizationsOrgIdCollectionsIdUsersRequest(c.Server, orgId, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsOrgIdGroups(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsOrgIdGroupsRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrgIdGroupsWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrgIdGroupsRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrgIdGroups(ctx context.Context, orgId string, body PostOrganizationsOrgIdGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrgIdGroupsRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizationsOrgIdGroupsId(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationsOrgIdGroupsIdRequest(c.Server, orgId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsOrgIdGroupsId(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsOrgIdGroupsIdRequest(c.Server, orgId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrgIdGroupsIdWithBody(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrgIdGroupsIdRequestWithBody(c.Server, orgId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrgIdGroupsId(ctx context.Context, orgId string, id string, body PostOrganizationsOrgIdGroupsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrgIdGroupsIdRequest(c.Server, orgId, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrganizationsOrgIdGroupsIdWithBody(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrganizationsOrgIdGroupsIdRequestWithBody(c.Server, orgId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrganizationsOrgIdGroupsId(ctx context.Context, orgId string, id string, body PutOrganizationsOrgIdGroupsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrganizationsOrgIdGroupsIdRequest(c.Server, orgId, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrgIdGroupsIdDelete(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrgIdGroupsIdDeleteRequest(c.Server, orgId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrgIdGroupsIdDeleteUserOrgUserId(ctx context.Context, orgId string, id string, orgUserId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrgIdGroupsIdDeleteUserOrgUserIdRequest(c.Server, orgId, id, orgUserId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsOrgIdGroupsIdDetails(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsOrgIdGroupsIdDetailsRequest(c.Server, orgId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizationsOrgIdGroupsIdUserOrgUserId(ctx context.Context, orgId string, id string, orgUserId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationsOrgIdGroupsIdUserOrgUserIdRequest(c.Server, orgId, id, orgUserId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsOrgIdGroupsIdUsers(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsOrgIdGroupsIdUsersRequest(c.Server, orgId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrganizationsOrgIdGroupsIdUsersWithBody(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrganizationsOrgIdGroupsIdUsersRequestWithBody(c.Server, orgId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrganizationsOrgIdGroupsIdUsers(ctx context.Context, orgId string, id string, body PutOrganizationsOrgIdGroupsIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrganizationsOrgIdGroupsIdUsersRequest(c.Server, orgId, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsOrgIdPolicies(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsOrgIdPoliciesRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsOrgIdPoliciesToken(ctx context.Context, orgId string, params *GetOrganizationsOrgIdPoliciesTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsOrgIdPoliciesTokenRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsOrgIdPoliciesType(ctx context.Context, orgId string, pType int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsOrgIdPoliciesTypeRequest(c.Server, orgId, pType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrganizationsOrgIdPoliciesTypeWithBody(ctx context.Context, orgId string, pType int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrganizationsOrgIdPoliciesTypeRequestWithBody(c.Server, orgId, pType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrganizationsOrgIdPoliciesType(ctx context.Context, orgId string, pType int32, body PutOrganizationsOrgIdPoliciesTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrganizationsOrgIdPoliciesTypeRequest(c.Server, orgId, pType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizationsOrgIdUsersWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationsOrgIdUsersRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizationsOrgIdUsers(ctx context.Context, orgId string, body DeleteOrganizationsOrgIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationsOrgIdUsersRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsOrgIdUsers(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsOrgIdUsersRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrgIdUsersConfirmWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrgIdUsersConfirmRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrgIdUsersConfirm(ctx context.Context, orgId string, body PostOrganizationsOrgIdUsersConfirmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrgIdUsersConfirmRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrgIdUsersDeleteWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrgIdUsersDeleteRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrgIdUsersDelete(ctx context.Context, orgId string, body PostOrganizationsOrgIdUsersDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrgIdUsersDeleteRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrgIdUsersInviteWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrgIdUsersInviteRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrgIdUsersInvite(ctx context.Context, orgId string, body PostOrganizationsOrgIdUsersInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrgIdUsersInviteRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrgIdUsersPublicKeysWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrgIdUsersPublicKeysRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrgIdUsersPublicKeys(ctx context.Context, orgId string, body PostOrganizationsOrgIdUsersPublicKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrgIdUsersPublicKeysRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrgIdUsersReinviteWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrgIdUsersReinviteRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrgIdUsersReinvite(ctx context.Context, orgId string, body PostOrganizationsOrgIdUsersReinviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrgIdUsersReinviteRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizationsOrgIdUsersId(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationsOrgIdUsersIdRequest(c.Server, orgId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsOrgIdUsersId(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsOrgIdUsersIdRequest(c.Server, orgId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrgIdUsersIdWithBody(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrgIdUsersIdRequestWithBody(c.Server, orgId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrgIdUsersId(ctx context.Context, orgId string, id string, body PostOrganizationsOrgIdUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrgIdUsersIdRequest(c.Server, orgId, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrganizationsOrgIdUsersIdWithBody(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrganizationsOrgIdUsersIdRequestWithBody(c.Server, orgId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrganizationsOrgIdUsersId(ctx context.Context, orgId string, id string, body PutOrganizationsOrgIdUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrganizationsOrgIdUsersIdRequest(c.Server, orgId, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrgIdUsersIdAcceptWithBody(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrgIdUsersIdAcceptRequestWithBody(c.Server, orgId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrgIdUsersIdAccept(ctx context.Context, orgId string, id string, body PostOrganizationsOrgIdUsersIdAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrgIdUsersIdAcceptRequest(c.Server, orgId, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrgIdUsersIdConfirmWithBody(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrgIdUsersIdConfirmRequestWithBody(c.Server, orgId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrgIdUsersIdConfirm(ctx context.Context, orgId string, id string, body PostOrganizationsOrgIdUsersIdConfirmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrgIdUsersIdConfirmRequest(c.Server, orgId, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrgIdUsersIdDelete(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrgIdUsersIdDeleteRequest(c.Server, orgId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsOrgIdUsersIdEvents(ctx context.Context, orgId string, id string, params *GetOrganizationsOrgIdUsersIdEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsOrgIdUsersIdEventsRequest(c.Server, orgId, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsOrgIdUsersIdGroups(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsOrgIdUsersIdGroupsRequest(c.Server, orgId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrgIdUsersIdGroupsWithBody(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrgIdUsersIdGroupsRequestWithBody(c.Server, orgId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrgIdUsersIdGroups(ctx context.Context, orgId string, id string, body PostOrganizationsOrgIdUsersIdGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrgIdUsersIdGroupsRequest(c.Server, orgId, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrganizationsOrgIdUsersIdGroupsWithBody(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrganizationsOrgIdUsersIdGroupsRequestWithBody(c.Server, orgId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrganizationsOrgIdUsersIdGroups(ctx context.Context, orgId string, id string, body PutOrganizationsOrgIdUsersIdGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrganizationsOrgIdUsersIdGroupsRequest(c.Server, orgId, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrgIdUsersIdReinvite(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrgIdUsersIdReinviteRequest(c.Server, orgId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrganizationsOrgIdUsersIdResetPasswordWithBody(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrganizationsOrgIdUsersIdResetPasswordRequestWithBody(c.Server, orgId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrganizationsOrgIdUsersIdResetPassword(ctx context.Context, orgId string, id string, body PutOrganizationsOrgIdUsersIdResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrganizationsOrgIdUsersIdResetPasswordRequest(c.Server, orgId, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsOrgIdUsersIdResetPasswordDetails(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsOrgIdUsersIdResetPasswordDetailsRequest(c.Server, orgId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentWithBody(ctx context.Context, orgId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentRequestWithBody(c.Server, orgId, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrganizationsOrgIdUsersUserIdResetPasswordEnrollment(ctx context.Context, orgId string, userId string, body PutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentRequest(c.Server, orgId, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlans(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlansRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlansSalesTaxRates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlansSalesTaxRatesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPushAddOrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPushAddOrganizationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPushAddOrganization(ctx context.Context, body PutPushAddOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPushAddOrganizationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPushDeleteOrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPushDeleteOrganizationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPushDeleteOrganization(ctx context.Context, body PutPushDeleteOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPushDeleteOrganizationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPushRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPushRegisterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPushRegister(ctx context.Context, body PostPushRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPushRegisterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPushSendWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPushSendRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPushSend(ctx context.Context, body PostPushSendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPushSendRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePushId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePushIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSends(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSendsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSends(ctx context.Context, body PostSendsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendsAccessIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendsAccessIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendsAccessId(ctx context.Context, id string, body PostSendsAccessIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendsAccessIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendsFile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendsFileRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendsFileV2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendsFileV2RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendsFileV2(ctx context.Context, body PostSendsFileV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendsFileV2Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendsFileValidateAzure(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendsFileValidateAzureRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendsEncodedSendIdAccessFileFileIdWithBody(ctx context.Context, encodedSendId string, fileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendsEncodedSendIdAccessFileFileIdRequestWithBody(c.Server, encodedSendId, fileId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendsEncodedSendIdAccessFileFileId(ctx context.Context, encodedSendId string, fileId string, body PostSendsEncodedSendIdAccessFileFileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendsEncodedSendIdAccessFileFileIdRequest(c.Server, encodedSendId, fileId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSendsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSendsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSendsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSendsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSendsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSendsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSendsId(ctx context.Context, id string, body PutSendsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSendsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSendsIdFileFileId(ctx context.Context, id string, fileId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSendsIdFileFileIdRequest(c.Server, id, fileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendsIdFileFileId(ctx context.Context, id string, fileId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendsIdFileFileIdRequest(c.Server, id, fileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSendsIdRemovePassword(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSendsIdRemovePasswordRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsDomains(ctx context.Context, params *GetSettingsDomainsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsDomainsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSettingsDomainsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSettingsDomainsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSettingsDomains(ctx context.Context, body PostSettingsDomainsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSettingsDomainsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDomainsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDomainsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDomains(ctx context.Context, body PutSettingsDomainsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDomainsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSetupPayment(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSetupPaymentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSync(ctx context.Context, params *GetSyncParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSyncRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTwoFactor(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTwoFactorRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTwoFactorAuthenticatorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTwoFactorAuthenticatorRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTwoFactorAuthenticator(ctx context.Context, body PostTwoFactorAuthenticatorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTwoFactorAuthenticatorRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTwoFactorAuthenticatorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTwoFactorAuthenticatorRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTwoFactorAuthenticator(ctx context.Context, body PutTwoFactorAuthenticatorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTwoFactorAuthenticatorRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTwoFactorDisableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTwoFactorDisableRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTwoFactorDisable(ctx context.Context, body PostTwoFactorDisableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTwoFactorDisableRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTwoFactorDisableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTwoFactorDisableRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTwoFactorDisable(ctx context.Context, body PutTwoFactorDisableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTwoFactorDisableRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTwoFactorDuoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTwoFactorDuoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTwoFactorDuo(ctx context.Context, body PostTwoFactorDuoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTwoFactorDuoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTwoFactorDuoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTwoFactorDuoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTwoFactorDuo(ctx context.Context, body PutTwoFactorDuoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTwoFactorDuoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTwoFactorEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTwoFactorEmailRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTwoFactorEmail(ctx context.Context, body PostTwoFactorEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTwoFactorEmailRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTwoFactorEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTwoFactorEmailRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTwoFactorEmail(ctx context.Context, body PutTwoFactorEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTwoFactorEmailRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTwoFactorGetAuthenticatorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTwoFactorGetAuthenticatorRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTwoFactorGetAuthenticator(ctx context.Context, body PostTwoFactorGetAuthenticatorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTwoFactorGetAuthenticatorRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTwoFactorGetDuoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTwoFactorGetDuoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTwoFactorGetDuo(ctx context.Context, body PostTwoFactorGetDuoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTwoFactorGetDuoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTwoFactorGetEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTwoFactorGetEmailRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTwoFactorGetEmail(ctx context.Context, body PostTwoFactorGetEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTwoFactorGetEmailRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTwoFactorGetRecoverWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTwoFactorGetRecoverRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTwoFactorGetRecover(ctx context.Context, body PostTwoFactorGetRecoverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTwoFactorGetRecoverRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTwoFactorGetWebauthnWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTwoFactorGetWebauthnRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTwoFactorGetWebauthn(ctx context.Context, body PostTwoFactorGetWebauthnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTwoFactorGetWebauthnRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTwoFactorGetWebauthnChallengeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTwoFactorGetWebauthnChallengeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTwoFactorGetWebauthnChallenge(ctx context.Context, body PostTwoFactorGetWebauthnChallengeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTwoFactorGetWebauthnChallengeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTwoFactorGetYubikeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTwoFactorGetYubikeyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTwoFactorGetYubikey(ctx context.Context, body PostTwoFactorGetYubikeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTwoFactorGetYubikeyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTwoFactorRecoverWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTwoFactorRecoverRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTwoFactorRecover(ctx context.Context, body PostTwoFactorRecoverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTwoFactorRecoverRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTwoFactorSendEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTwoFactorSendEmailRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTwoFactorSendEmail(ctx context.Context, body PostTwoFactorSendEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTwoFactorSendEmailRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTwoFactorSendEmailLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTwoFactorSendEmailLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTwoFactorSendEmailLogin(ctx context.Context, body PostTwoFactorSendEmailLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTwoFactorSendEmailLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTwoFactorWebauthnWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTwoFactorWebauthnRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTwoFactorWebauthn(ctx context.Context, body DeleteTwoFactorWebauthnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTwoFactorWebauthnRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTwoFactorWebauthnWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTwoFactorWebauthnRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTwoFactorWebauthn(ctx context.Context, body PostTwoFactorWebauthnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTwoFactorWebauthnRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTwoFactorWebauthnWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTwoFactorWebauthnRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTwoFactorWebauthn(ctx context.Context, body PutTwoFactorWebauthnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTwoFactorWebauthnRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTwoFactorYubikeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTwoFactorYubikeyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTwoFactorYubikey(ctx context.Context, body PostTwoFactorYubikeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTwoFactorYubikeyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTwoFactorYubikeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTwoFactorYubikeyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTwoFactorYubikey(ctx context.Context, body PutTwoFactorYubikeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTwoFactorYubikeyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersIdPublicKey(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersIdPublicKeyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDeleteAccountsRequest calls the generic DeleteAccounts builder with application/json body
func NewDeleteAccountsRequest(server string, body DeleteAccountsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteAccountsRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteAccountsRequestWithBody generates requests for DeleteAccounts with any type of body
func NewDeleteAccountsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAccountsApiKeyRequest calls the generic PostAccountsApiKey builder with application/json body
func NewPostAccountsApiKeyRequest(server string, body PostAccountsApiKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAccountsApiKeyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAccountsApiKeyRequestWithBody generates requests for PostAccountsApiKey with any type of body
func NewPostAccountsApiKeyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/api-key")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAccountsBillingRequest generates requests for GetAccountsBilling
func NewGetAccountsBillingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/billing")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAccountsCancelPremiumRequest generates requests for PostAccountsCancelPremium
func NewPostAccountsCancelPremiumRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/cancel-premium")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAccountsDeleteRequest calls the generic PostAccountsDelete builder with application/json body
func NewPostAccountsDeleteRequest(server string, body PostAccountsDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAccountsDeleteRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAccountsDeleteRequestWithBody generates requests for PostAccountsDelete with any type of body
func NewPostAccountsDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/delete")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAccountsDeleteRecoverRequest calls the generic PostAccountsDeleteRecover builder with application/json body
func NewPostAccountsDeleteRecoverRequest(server string, body PostAccountsDeleteRecoverJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAccountsDeleteRecoverRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAccountsDeleteRecoverRequestWithBody generates requests for PostAccountsDeleteRecover with any type of body
func NewPostAccountsDeleteRecoverRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/delete-recover")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAccountsDeleteRecoverTokenRequest calls the generic PostAccountsDeleteRecoverToken builder with application/json body
func NewPostAccountsDeleteRecoverTokenRequest(server string, body PostAccountsDeleteRecoverTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAccountsDeleteRecoverTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAccountsDeleteRecoverTokenRequestWithBody generates requests for PostAccountsDeleteRecoverToken with any type of body
func NewPostAccountsDeleteRecoverTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/delete-recover-token")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAccountsEmailRequest calls the generic PostAccountsEmail builder with application/json body
func NewPostAccountsEmailRequest(server string, body PostAccountsEmailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAccountsEmailRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAccountsEmailRequestWithBody generates requests for PostAccountsEmail with any type of body
func NewPostAccountsEmailRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/email")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAccountsEmailTokenRequest calls the generic PostAccountsEmailToken builder with application/json body
func NewPostAccountsEmailTokenRequest(server string, body PostAccountsEmailTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAccountsEmailTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAccountsEmailTokenRequestWithBody generates requests for PostAccountsEmailToken with any type of body
func NewPostAccountsEmailTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/email-token")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAccountsEnterprisePortalSigninTokenRequest generates requests for GetAccountsEnterprisePortalSigninToken
func NewGetAccountsEnterprisePortalSigninTokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/enterprise-portal-signin-token")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAccountsIapCheckRequest calls the generic PostAccountsIapCheck builder with application/json body
func NewPostAccountsIapCheckRequest(server string, body PostAccountsIapCheckJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAccountsIapCheckRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAccountsIapCheckRequestWithBody generates requests for PostAccountsIapCheck with any type of body
func NewPostAccountsIapCheckRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/iap-check")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAccountsKdfRequest calls the generic PostAccountsKdf builder with application/json body
func NewPostAccountsKdfRequest(server string, body PostAccountsKdfJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAccountsKdfRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAccountsKdfRequestWithBody generates requests for PostAccountsKdf with any type of body
func NewPostAccountsKdfRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/kdf")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAccountsKeyRequest calls the generic PostAccountsKey builder with application/json body
func NewPostAccountsKeyRequest(server string, body PostAccountsKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAccountsKeyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAccountsKeyRequestWithBody generates requests for PostAccountsKey with any type of body
func NewPostAccountsKeyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/key")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAccountsKeysRequest generates requests for GetAccountsKeys
func NewGetAccountsKeysRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/keys")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAccountsKeysRequest calls the generic PostAccountsKeys builder with application/json body
func NewPostAccountsKeysRequest(server string, body PostAccountsKeysJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAccountsKeysRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAccountsKeysRequestWithBody generates requests for PostAccountsKeys with any type of body
func NewPostAccountsKeysRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/keys")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAccountsLicenseRequestWithBody generates requests for PostAccountsLicense with any type of body
func NewPostAccountsLicenseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/license")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAccountsOrganizationsRequest generates requests for GetAccountsOrganizations
func NewGetAccountsOrganizationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/organizations")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAccountsPasswordRequest calls the generic PostAccountsPassword builder with application/json body
func NewPostAccountsPasswordRequest(server string, body PostAccountsPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAccountsPasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAccountsPasswordRequestWithBody generates requests for PostAccountsPassword with any type of body
func NewPostAccountsPasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/password")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAccountsPasswordHintRequest calls the generic PostAccountsPasswordHint builder with application/json body
func NewPostAccountsPasswordHintRequest(server string, body PostAccountsPasswordHintJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAccountsPasswordHintRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAccountsPasswordHintRequestWithBody generates requests for PostAccountsPasswordHint with any type of body
func NewPostAccountsPasswordHintRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/password-hint")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAccountsPaymentRequest calls the generic PostAccountsPayment builder with application/json body
func NewPostAccountsPaymentRequest(server string, body PostAccountsPaymentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAccountsPaymentRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAccountsPaymentRequestWithBody generates requests for PostAccountsPayment with any type of body
func NewPostAccountsPaymentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/payment")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAccountsPreloginRequest calls the generic PostAccountsPrelogin builder with application/json body
func NewPostAccountsPreloginRequest(server string, body PostAccountsPreloginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAccountsPreloginRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAccountsPreloginRequestWithBody generates requests for PostAccountsPrelogin with any type of body
func NewPostAccountsPreloginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/prelogin")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAccountsPremiumRequestWithBody generates requests for PostAccountsPremium with any type of body
func NewPostAccountsPremiumRequestWithBody(server string, params *PostAccountsPremiumParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/premium")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "paymentMethodType", runtime.ParamLocationQuery, params.PaymentMethodType); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.PaymentToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "paymentToken", runtime.ParamLocationQuery, *params.PaymentToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AdditionalStorageGb != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "additionalStorageGb", runtime.ParamLocationQuery, *params.AdditionalStorageGb); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Country != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "country", runtime.ParamLocationQuery, *params.Country); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PostalCode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "postalCode", runtime.ParamLocationQuery, *params.PostalCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAccountsProfileRequest generates requests for GetAccountsProfile
func NewGetAccountsProfileRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/profile")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAccountsProfileRequest calls the generic PostAccountsProfile builder with application/json body
func NewPostAccountsProfileRequest(server string, body PostAccountsProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAccountsProfileRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAccountsProfileRequestWithBody generates requests for PostAccountsProfile with any type of body
func NewPostAccountsProfileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/profile")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutAccountsProfileRequest calls the generic PutAccountsProfile builder with application/json body
func NewPutAccountsProfileRequest(server string, body PutAccountsProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAccountsProfileRequestWithBody(server, "application/json", bodyReader)
}

// NewPutAccountsProfileRequestWithBody generates requests for PutAccountsProfile with any type of body
func NewPutAccountsProfileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/profile")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAccountsRegisterRequest calls the generic PostAccountsRegister builder with application/json body
func NewPostAccountsRegisterRequest(server string, body PostAccountsRegisterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAccountsRegisterRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAccountsRegisterRequestWithBody generates requests for PostAccountsRegister with any type of body
func NewPostAccountsRegisterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/register")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAccountsReinstatePremiumRequest generates requests for PostAccountsReinstatePremium
func NewPostAccountsReinstatePremiumRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/reinstate-premium")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccountsRevisionDateRequest generates requests for GetAccountsRevisionDate
func NewGetAccountsRevisionDateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/revision-date")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAccountsRotateApiKeyRequest calls the generic PostAccountsRotateApiKey builder with application/json body
func NewPostAccountsRotateApiKeyRequest(server string, body PostAccountsRotateApiKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAccountsRotateApiKeyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAccountsRotateApiKeyRequestWithBody generates requests for PostAccountsRotateApiKey with any type of body
func NewPostAccountsRotateApiKeyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/rotate-api-key")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAccountsSecurityStampRequest calls the generic PostAccountsSecurityStamp builder with application/json body
func NewPostAccountsSecurityStampRequest(server string, body PostAccountsSecurityStampJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAccountsSecurityStampRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAccountsSecurityStampRequestWithBody generates requests for PostAccountsSecurityStamp with any type of body
func NewPostAccountsSecurityStampRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/security-stamp")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAccountsSetPasswordRequest calls the generic PostAccountsSetPassword builder with application/json body
func NewPostAccountsSetPasswordRequest(server string, body PostAccountsSetPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAccountsSetPasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAccountsSetPasswordRequestWithBody generates requests for PostAccountsSetPassword with any type of body
func NewPostAccountsSetPasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/set-password")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAccountsSsoUserIdentifierRequest generates requests for GetAccountsSsoUserIdentifier
func NewGetAccountsSsoUserIdentifierRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/sso/user-identifier")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAccountsSsoOrganizationIdRequest generates requests for DeleteAccountsSsoOrganizationId
func NewDeleteAccountsSsoOrganizationIdRequest(server string, organizationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/sso/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAccountsStorageRequest calls the generic PostAccountsStorage builder with application/json body
func NewPostAccountsStorageRequest(server string, body PostAccountsStorageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAccountsStorageRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAccountsStorageRequestWithBody generates requests for PostAccountsStorage with any type of body
func NewPostAccountsStorageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/storage")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAccountsSubscriptionRequest generates requests for GetAccountsSubscription
func NewGetAccountsSubscriptionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/subscription")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccountsTaxRequest generates requests for GetAccountsTax
func NewGetAccountsTaxRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/tax")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAccountsTaxRequest calls the generic PutAccountsTax builder with application/json body
func NewPutAccountsTaxRequest(server string, body PutAccountsTaxJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAccountsTaxRequestWithBody(server, "application/json", bodyReader)
}

// NewPutAccountsTaxRequestWithBody generates requests for PutAccountsTax with any type of body
func NewPutAccountsTaxRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/tax")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAccountsVerifyEmailRequest generates requests for PostAccountsVerifyEmail
func NewPostAccountsVerifyEmailRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/verify-email")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAccountsVerifyEmailTokenRequest calls the generic PostAccountsVerifyEmailToken builder with application/json body
func NewPostAccountsVerifyEmailTokenRequest(server string, body PostAccountsVerifyEmailTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAccountsVerifyEmailTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAccountsVerifyEmailTokenRequestWithBody generates requests for PostAccountsVerifyEmailToken with any type of body
func NewPostAccountsVerifyEmailTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/verify-email-token")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAccountsVerifyPasswordRequest calls the generic PostAccountsVerifyPassword builder with application/json body
func NewPostAccountsVerifyPasswordRequest(server string, body PostAccountsVerifyPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAccountsVerifyPasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAccountsVerifyPasswordRequestWithBody generates requests for PostAccountsVerifyPassword with any type of body
func NewPostAccountsVerifyPasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/verify-password")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAliveRequest generates requests for GetAlive
func NewGetAliveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alive")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostBitpayInvoiceRequest calls the generic PostBitpayInvoice builder with application/json body
func NewPostBitpayInvoiceRequest(server string, body PostBitpayInvoiceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBitpayInvoiceRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBitpayInvoiceRequestWithBody generates requests for PostBitpayInvoice with any type of body
func NewPostBitpayInvoiceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bitpay-invoice")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCiphersRequest calls the generic DeleteCiphers builder with application/json body
func NewDeleteCiphersRequest(server string, body DeleteCiphersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteCiphersRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteCiphersRequestWithBody generates requests for DeleteCiphers with any type of body
func NewDeleteCiphersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCiphersRequest generates requests for GetCiphers
func NewGetCiphersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCiphersRequest calls the generic PostCiphers builder with application/json body
func NewPostCiphersRequest(server string, body PostCiphersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCiphersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCiphersRequestWithBody generates requests for PostCiphers with any type of body
func NewPostCiphersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCiphersAdminRequest calls the generic DeleteCiphersAdmin builder with application/json body
func NewDeleteCiphersAdminRequest(server string, body DeleteCiphersAdminJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteCiphersAdminRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteCiphersAdminRequestWithBody generates requests for DeleteCiphersAdmin with any type of body
func NewDeleteCiphersAdminRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/admin")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCiphersAdminRequest calls the generic PostCiphersAdmin builder with application/json body
func NewPostCiphersAdminRequest(server string, body PostCiphersAdminJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCiphersAdminRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCiphersAdminRequestWithBody generates requests for PostCiphersAdmin with any type of body
func NewPostCiphersAdminRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/admin")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCiphersAttachmentValidateAzureRequest generates requests for PostCiphersAttachmentValidateAzure
func NewPostCiphersAttachmentValidateAzureRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/attachment/validate/azure")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCiphersCreateRequest calls the generic PostCiphersCreate builder with application/json body
func NewPostCiphersCreateRequest(server string, body PostCiphersCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCiphersCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCiphersCreateRequestWithBody generates requests for PostCiphersCreate with any type of body
func NewPostCiphersCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/create")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCiphersDeleteRequest calls the generic PostCiphersDelete builder with application/json body
func NewPostCiphersDeleteRequest(server string, body PostCiphersDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCiphersDeleteRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCiphersDeleteRequestWithBody generates requests for PostCiphersDelete with any type of body
func NewPostCiphersDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/delete")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutCiphersDeleteRequest calls the generic PutCiphersDelete builder with application/json body
func NewPutCiphersDeleteRequest(server string, body PutCiphersDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCiphersDeleteRequestWithBody(server, "application/json", bodyReader)
}

// NewPutCiphersDeleteRequestWithBody generates requests for PutCiphersDelete with any type of body
func NewPutCiphersDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/delete")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCiphersDeleteAdminRequest calls the generic PostCiphersDeleteAdmin builder with application/json body
func NewPostCiphersDeleteAdminRequest(server string, body PostCiphersDeleteAdminJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCiphersDeleteAdminRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCiphersDeleteAdminRequestWithBody generates requests for PostCiphersDeleteAdmin with any type of body
func NewPostCiphersDeleteAdminRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/delete-admin")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutCiphersDeleteAdminRequest calls the generic PutCiphersDeleteAdmin builder with application/json body
func NewPutCiphersDeleteAdminRequest(server string, body PutCiphersDeleteAdminJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCiphersDeleteAdminRequestWithBody(server, "application/json", bodyReader)
}

// NewPutCiphersDeleteAdminRequestWithBody generates requests for PutCiphersDeleteAdmin with any type of body
func NewPutCiphersDeleteAdminRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/delete-admin")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCiphersImportRequest calls the generic PostCiphersImport builder with application/json body
func NewPostCiphersImportRequest(server string, body PostCiphersImportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCiphersImportRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCiphersImportRequestWithBody generates requests for PostCiphersImport with any type of body
func NewPostCiphersImportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/import")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCiphersImportOrganizationRequest calls the generic PostCiphersImportOrganization builder with application/json body
func NewPostCiphersImportOrganizationRequest(server string, params *PostCiphersImportOrganizationParams, body PostCiphersImportOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCiphersImportOrganizationRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostCiphersImportOrganizationRequestWithBody generates requests for PostCiphersImportOrganization with any type of body
func NewPostCiphersImportOrganizationRequestWithBody(server string, params *PostCiphersImportOrganizationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/import-organization")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OrganizationId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organizationId", runtime.ParamLocationQuery, *params.OrganizationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCiphersMoveRequest calls the generic PostCiphersMove builder with application/json body
func NewPostCiphersMoveRequest(server string, body PostCiphersMoveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCiphersMoveRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCiphersMoveRequestWithBody generates requests for PostCiphersMove with any type of body
func NewPostCiphersMoveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/move")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutCiphersMoveRequest calls the generic PutCiphersMove builder with application/json body
func NewPutCiphersMoveRequest(server string, body PutCiphersMoveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCiphersMoveRequestWithBody(server, "application/json", bodyReader)
}

// NewPutCiphersMoveRequestWithBody generates requests for PutCiphersMove with any type of body
func NewPutCiphersMoveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/move")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCiphersOrganizationDetailsRequest generates requests for GetCiphersOrganizationDetails
func NewGetCiphersOrganizationDetailsRequest(server string, params *GetCiphersOrganizationDetailsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/organization-details")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OrganizationId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organizationId", runtime.ParamLocationQuery, *params.OrganizationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCiphersPurgeRequest calls the generic PostCiphersPurge builder with application/json body
func NewPostCiphersPurgeRequest(server string, params *PostCiphersPurgeParams, body PostCiphersPurgeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCiphersPurgeRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostCiphersPurgeRequestWithBody generates requests for PostCiphersPurge with any type of body
func NewPostCiphersPurgeRequestWithBody(server string, params *PostCiphersPurgeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/purge")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OrganizationId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organizationId", runtime.ParamLocationQuery, *params.OrganizationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutCiphersRestoreRequest calls the generic PutCiphersRestore builder with application/json body
func NewPutCiphersRestoreRequest(server string, body PutCiphersRestoreJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCiphersRestoreRequestWithBody(server, "application/json", bodyReader)
}

// NewPutCiphersRestoreRequestWithBody generates requests for PutCiphersRestore with any type of body
func NewPutCiphersRestoreRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/restore")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCiphersShareRequest calls the generic PostCiphersShare builder with application/json body
func NewPostCiphersShareRequest(server string, body PostCiphersShareJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCiphersShareRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCiphersShareRequestWithBody generates requests for PostCiphersShare with any type of body
func NewPostCiphersShareRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/share")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutCiphersShareRequest calls the generic PutCiphersShare builder with application/json body
func NewPutCiphersShareRequest(server string, body PutCiphersShareJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCiphersShareRequestWithBody(server, "application/json", bodyReader)
}

// NewPutCiphersShareRequestWithBody generates requests for PutCiphersShare with any type of body
func NewPutCiphersShareRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/share")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCiphersIdRequest generates requests for DeleteCiphersId
func NewDeleteCiphersIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCiphersIdRequest generates requests for GetCiphersId
func NewGetCiphersIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCiphersIdRequest calls the generic PostCiphersId builder with application/json body
func NewPostCiphersIdRequest(server string, id string, body PostCiphersIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCiphersIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostCiphersIdRequestWithBody generates requests for PostCiphersId with any type of body
func NewPostCiphersIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutCiphersIdRequest calls the generic PutCiphersId builder with application/json body
func NewPutCiphersIdRequest(server string, id string, body PutCiphersIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCiphersIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutCiphersIdRequestWithBody generates requests for PutCiphersId with any type of body
func NewPutCiphersIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCiphersIdAdminRequest generates requests for DeleteCiphersIdAdmin
func NewDeleteCiphersIdAdminRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/%s/admin", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCiphersIdAdminRequest generates requests for GetCiphersIdAdmin
func NewGetCiphersIdAdminRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/%s/admin", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCiphersIdAdminRequest calls the generic PostCiphersIdAdmin builder with application/json body
func NewPostCiphersIdAdminRequest(server string, id string, body PostCiphersIdAdminJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCiphersIdAdminRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostCiphersIdAdminRequestWithBody generates requests for PostCiphersIdAdmin with any type of body
func NewPostCiphersIdAdminRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/%s/admin", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutCiphersIdAdminRequest calls the generic PutCiphersIdAdmin builder with application/json body
func NewPutCiphersIdAdminRequest(server string, id string, body PutCiphersIdAdminJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCiphersIdAdminRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutCiphersIdAdminRequestWithBody generates requests for PutCiphersIdAdmin with any type of body
func NewPutCiphersIdAdminRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/%s/admin", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCiphersIdAttachmentRequest generates requests for PostCiphersIdAttachment
func NewPostCiphersIdAttachmentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/%s/attachment", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCiphersIdAttachmentAdminRequest generates requests for PostCiphersIdAttachmentAdmin
func NewPostCiphersIdAttachmentAdminRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/%s/attachment-admin", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCiphersIdAttachmentV2Request calls the generic PostCiphersIdAttachmentV2 builder with application/json body
func NewPostCiphersIdAttachmentV2Request(server string, id string, body PostCiphersIdAttachmentV2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCiphersIdAttachmentV2RequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostCiphersIdAttachmentV2RequestWithBody generates requests for PostCiphersIdAttachmentV2 with any type of body
func NewPostCiphersIdAttachmentV2RequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/%s/attachment/v2", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCiphersIdAttachmentAttachmentIdRequest generates requests for DeleteCiphersIdAttachmentAttachmentId
func NewDeleteCiphersIdAttachmentAttachmentIdRequest(server string, id string, attachmentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attachmentId", runtime.ParamLocationPath, attachmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/%s/attachment/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCiphersIdAttachmentAttachmentIdRequest generates requests for GetCiphersIdAttachmentAttachmentId
func NewGetCiphersIdAttachmentAttachmentIdRequest(server string, id string, attachmentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attachmentId", runtime.ParamLocationPath, attachmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/%s/attachment/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCiphersIdAttachmentAttachmentIdRequest generates requests for PostCiphersIdAttachmentAttachmentId
func NewPostCiphersIdAttachmentAttachmentIdRequest(server string, id string, attachmentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attachmentId", runtime.ParamLocationPath, attachmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/%s/attachment/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteCiphersIdAttachmentAttachmentIdAdminRequest generates requests for DeleteCiphersIdAttachmentAttachmentIdAdmin
func NewDeleteCiphersIdAttachmentAttachmentIdAdminRequest(server string, id string, attachmentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attachmentId", runtime.ParamLocationPath, attachmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/%s/attachment/%s/admin", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCiphersIdAttachmentAttachmentIdDeleteRequest generates requests for PostCiphersIdAttachmentAttachmentIdDelete
func NewPostCiphersIdAttachmentAttachmentIdDeleteRequest(server string, id string, attachmentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attachmentId", runtime.ParamLocationPath, attachmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/%s/attachment/%s/delete", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCiphersIdAttachmentAttachmentIdDeleteAdminRequest generates requests for PostCiphersIdAttachmentAttachmentIdDeleteAdmin
func NewPostCiphersIdAttachmentAttachmentIdDeleteAdminRequest(server string, id string, attachmentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attachmentId", runtime.ParamLocationPath, attachmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/%s/attachment/%s/delete-admin", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCiphersIdAttachmentAttachmentIdRenewRequest generates requests for GetCiphersIdAttachmentAttachmentIdRenew
func NewGetCiphersIdAttachmentAttachmentIdRenewRequest(server string, id string, attachmentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attachmentId", runtime.ParamLocationPath, attachmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/%s/attachment/%s/renew", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCiphersIdAttachmentAttachmentIdShareRequest generates requests for PostCiphersIdAttachmentAttachmentIdShare
func NewPostCiphersIdAttachmentAttachmentIdShareRequest(server string, id string, attachmentId string, params *PostCiphersIdAttachmentAttachmentIdShareParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attachmentId", runtime.ParamLocationPath, attachmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/%s/attachment/%s/share", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.OrganizationId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organizationId", runtime.ParamLocationQuery, *params.OrganizationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCiphersIdCollectionsRequest calls the generic PostCiphersIdCollections builder with application/json body
func NewPostCiphersIdCollectionsRequest(server string, id string, body PostCiphersIdCollectionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCiphersIdCollectionsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostCiphersIdCollectionsRequestWithBody generates requests for PostCiphersIdCollections with any type of body
func NewPostCiphersIdCollectionsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/%s/collections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutCiphersIdCollectionsRequest calls the generic PutCiphersIdCollections builder with application/json body
func NewPutCiphersIdCollectionsRequest(server string, id string, body PutCiphersIdCollectionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCiphersIdCollectionsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutCiphersIdCollectionsRequestWithBody generates requests for PutCiphersIdCollections with any type of body
func NewPutCiphersIdCollectionsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/%s/collections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCiphersIdCollectionsAdminRequest calls the generic PostCiphersIdCollectionsAdmin builder with application/json body
func NewPostCiphersIdCollectionsAdminRequest(server string, id string, body PostCiphersIdCollectionsAdminJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCiphersIdCollectionsAdminRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostCiphersIdCollectionsAdminRequestWithBody generates requests for PostCiphersIdCollectionsAdmin with any type of body
func NewPostCiphersIdCollectionsAdminRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/%s/collections-admin", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutCiphersIdCollectionsAdminRequest calls the generic PutCiphersIdCollectionsAdmin builder with application/json body
func NewPutCiphersIdCollectionsAdminRequest(server string, id string, body PutCiphersIdCollectionsAdminJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCiphersIdCollectionsAdminRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutCiphersIdCollectionsAdminRequestWithBody generates requests for PutCiphersIdCollectionsAdmin with any type of body
func NewPutCiphersIdCollectionsAdminRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/%s/collections-admin", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCiphersIdDeleteRequest generates requests for PostCiphersIdDelete
func NewPostCiphersIdDeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/%s/delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutCiphersIdDeleteRequest generates requests for PutCiphersIdDelete
func NewPutCiphersIdDeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/%s/delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCiphersIdDeleteAdminRequest generates requests for PostCiphersIdDeleteAdmin
func NewPostCiphersIdDeleteAdminRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/%s/delete-admin", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutCiphersIdDeleteAdminRequest generates requests for PutCiphersIdDeleteAdmin
func NewPutCiphersIdDeleteAdminRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/%s/delete-admin", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCiphersIdDetailsRequest generates requests for GetCiphersIdDetails
func NewGetCiphersIdDetailsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/%s/details", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCiphersIdEventsRequest generates requests for GetCiphersIdEvents
func NewGetCiphersIdEventsRequest(server string, id string, params *GetCiphersIdEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.End != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, *params.End); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ContinuationToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "continuationToken", runtime.ParamLocationQuery, *params.ContinuationToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCiphersIdFullDetailsRequest generates requests for GetCiphersIdFullDetails
func NewGetCiphersIdFullDetailsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/%s/full-details", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCiphersIdPartialRequest calls the generic PostCiphersIdPartial builder with application/json body
func NewPostCiphersIdPartialRequest(server string, id string, body PostCiphersIdPartialJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCiphersIdPartialRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostCiphersIdPartialRequestWithBody generates requests for PostCiphersIdPartial with any type of body
func NewPostCiphersIdPartialRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/%s/partial", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutCiphersIdPartialRequest calls the generic PutCiphersIdPartial builder with application/json body
func NewPutCiphersIdPartialRequest(server string, id string, body PutCiphersIdPartialJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCiphersIdPartialRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutCiphersIdPartialRequestWithBody generates requests for PutCiphersIdPartial with any type of body
func NewPutCiphersIdPartialRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/%s/partial", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutCiphersIdRestoreRequest generates requests for PutCiphersIdRestore
func NewPutCiphersIdRestoreRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/%s/restore", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutCiphersIdRestoreAdminRequest generates requests for PutCiphersIdRestoreAdmin
func NewPutCiphersIdRestoreAdminRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/%s/restore-admin", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCiphersIdShareRequest calls the generic PostCiphersIdShare builder with application/json body
func NewPostCiphersIdShareRequest(server string, id string, body PostCiphersIdShareJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCiphersIdShareRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostCiphersIdShareRequestWithBody generates requests for PostCiphersIdShare with any type of body
func NewPostCiphersIdShareRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/%s/share", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutCiphersIdShareRequest calls the generic PutCiphersIdShare builder with application/json body
func NewPutCiphersIdShareRequest(server string, id string, body PutCiphersIdShareJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCiphersIdShareRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutCiphersIdShareRequestWithBody generates requests for PutCiphersIdShare with any type of body
func NewPutCiphersIdShareRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ciphers/%s/share", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCollectionsRequest generates requests for GetCollections
func NewGetCollectionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDevicesRequest generates requests for GetDevices
func NewGetDevicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/devices")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDevicesRequest calls the generic PostDevices builder with application/json body
func NewPostDevicesRequest(server string, body PostDevicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDevicesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDevicesRequestWithBody generates requests for PostDevices with any type of body
func NewPostDevicesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/devices")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDevicesIdentifierIdentifierRequest generates requests for GetDevicesIdentifierIdentifier
func NewGetDevicesIdentifierIdentifierRequest(server string, identifier string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/devices/identifier/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDevicesIdentifierIdentifierClearTokenRequest generates requests for PostDevicesIdentifierIdentifierClearToken
func NewPostDevicesIdentifierIdentifierClearTokenRequest(server string, identifier string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/devices/identifier/%s/clear-token", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutDevicesIdentifierIdentifierClearTokenRequest generates requests for PutDevicesIdentifierIdentifierClearToken
func NewPutDevicesIdentifierIdentifierClearTokenRequest(server string, identifier string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/devices/identifier/%s/clear-token", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDevicesIdentifierIdentifierTokenRequest calls the generic PostDevicesIdentifierIdentifierToken builder with application/json body
func NewPostDevicesIdentifierIdentifierTokenRequest(server string, identifier string, body PostDevicesIdentifierIdentifierTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDevicesIdentifierIdentifierTokenRequestWithBody(server, identifier, "application/json", bodyReader)
}

// NewPostDevicesIdentifierIdentifierTokenRequestWithBody generates requests for PostDevicesIdentifierIdentifierToken with any type of body
func NewPostDevicesIdentifierIdentifierTokenRequestWithBody(server string, identifier string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/devices/identifier/%s/token", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutDevicesIdentifierIdentifierTokenRequest calls the generic PutDevicesIdentifierIdentifierToken builder with application/json body
func NewPutDevicesIdentifierIdentifierTokenRequest(server string, identifier string, body PutDevicesIdentifierIdentifierTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutDevicesIdentifierIdentifierTokenRequestWithBody(server, identifier, "application/json", bodyReader)
}

// NewPutDevicesIdentifierIdentifierTokenRequestWithBody generates requests for PutDevicesIdentifierIdentifierToken with any type of body
func NewPutDevicesIdentifierIdentifierTokenRequestWithBody(server string, identifier string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/devices/identifier/%s/token", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDevicesIdRequest generates requests for DeleteDevicesId
func NewDeleteDevicesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/devices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDevicesIdRequest generates requests for GetDevicesId
func NewGetDevicesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/devices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDevicesIdRequest calls the generic PostDevicesId builder with application/json body
func NewPostDevicesIdRequest(server string, id string, body PostDevicesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDevicesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostDevicesIdRequestWithBody generates requests for PostDevicesId with any type of body
func NewPostDevicesIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/devices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutDevicesIdRequest calls the generic PutDevicesId builder with application/json body
func NewPutDevicesIdRequest(server string, id string, body PutDevicesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutDevicesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutDevicesIdRequestWithBody generates requests for PutDevicesId with any type of body
func NewPutDevicesIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/devices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDevicesIdDeleteRequest generates requests for PostDevicesIdDelete
func NewPostDevicesIdDeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/devices/%s/delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEmergencyAccessGrantedRequest generates requests for GetEmergencyAccessGranted
func NewGetEmergencyAccessGrantedRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/emergency-access/granted")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostEmergencyAccessInviteRequest calls the generic PostEmergencyAccessInvite builder with application/json body
func NewPostEmergencyAccessInviteRequest(server string, body PostEmergencyAccessInviteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostEmergencyAccessInviteRequestWithBody(server, "application/json", bodyReader)
}

// NewPostEmergencyAccessInviteRequestWithBody generates requests for PostEmergencyAccessInvite with any type of body
func NewPostEmergencyAccessInviteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/emergency-access/invite")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEmergencyAccessTrustedRequest generates requests for GetEmergencyAccessTrusted
func NewGetEmergencyAccessTrustedRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/emergency-access/trusted")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteEmergencyAccessIdRequest generates requests for DeleteEmergencyAccessId
func NewDeleteEmergencyAccessIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/emergency-access/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEmergencyAccessIdRequest generates requests for GetEmergencyAccessId
func NewGetEmergencyAccessIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/emergency-access/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostEmergencyAccessIdRequest calls the generic PostEmergencyAccessId builder with application/json body
func NewPostEmergencyAccessIdRequest(server string, id string, body PostEmergencyAccessIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostEmergencyAccessIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostEmergencyAccessIdRequestWithBody generates requests for PostEmergencyAccessId with any type of body
func NewPostEmergencyAccessIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/emergency-access/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutEmergencyAccessIdRequest calls the generic PutEmergencyAccessId builder with application/json body
func NewPutEmergencyAccessIdRequest(server string, id string, body PutEmergencyAccessIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutEmergencyAccessIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutEmergencyAccessIdRequestWithBody generates requests for PutEmergencyAccessId with any type of body
func NewPutEmergencyAccessIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/emergency-access/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostEmergencyAccessIdAcceptRequest calls the generic PostEmergencyAccessIdAccept builder with application/json body
func NewPostEmergencyAccessIdAcceptRequest(server string, id string, body PostEmergencyAccessIdAcceptJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostEmergencyAccessIdAcceptRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostEmergencyAccessIdAcceptRequestWithBody generates requests for PostEmergencyAccessIdAccept with any type of body
func NewPostEmergencyAccessIdAcceptRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/emergency-access/%s/accept", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostEmergencyAccessIdApproveRequest generates requests for PostEmergencyAccessIdApprove
func NewPostEmergencyAccessIdApproveRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/emergency-access/%s/approve", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostEmergencyAccessIdConfirmRequest calls the generic PostEmergencyAccessIdConfirm builder with application/json body
func NewPostEmergencyAccessIdConfirmRequest(server string, id string, body PostEmergencyAccessIdConfirmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostEmergencyAccessIdConfirmRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostEmergencyAccessIdConfirmRequestWithBody generates requests for PostEmergencyAccessIdConfirm with any type of body
func NewPostEmergencyAccessIdConfirmRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/emergency-access/%s/confirm", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostEmergencyAccessIdDeleteRequest generates requests for PostEmergencyAccessIdDelete
func NewPostEmergencyAccessIdDeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/emergency-access/%s/delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostEmergencyAccessIdInitiateRequest generates requests for PostEmergencyAccessIdInitiate
func NewPostEmergencyAccessIdInitiateRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/emergency-access/%s/initiate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostEmergencyAccessIdPasswordRequest calls the generic PostEmergencyAccessIdPassword builder with application/json body
func NewPostEmergencyAccessIdPasswordRequest(server string, id string, body PostEmergencyAccessIdPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostEmergencyAccessIdPasswordRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostEmergencyAccessIdPasswordRequestWithBody generates requests for PostEmergencyAccessIdPassword with any type of body
func NewPostEmergencyAccessIdPasswordRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/emergency-access/%s/password", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEmergencyAccessIdPoliciesRequest generates requests for GetEmergencyAccessIdPolicies
func NewGetEmergencyAccessIdPoliciesRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/emergency-access/%s/policies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostEmergencyAccessIdReinviteRequest generates requests for PostEmergencyAccessIdReinvite
func NewPostEmergencyAccessIdReinviteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/emergency-access/%s/reinvite", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostEmergencyAccessIdRejectRequest generates requests for PostEmergencyAccessIdReject
func NewPostEmergencyAccessIdRejectRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/emergency-access/%s/reject", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostEmergencyAccessIdTakeoverRequest generates requests for PostEmergencyAccessIdTakeover
func NewPostEmergencyAccessIdTakeoverRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/emergency-access/%s/takeover", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostEmergencyAccessIdViewRequest generates requests for PostEmergencyAccessIdView
func NewPostEmergencyAccessIdViewRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/emergency-access/%s/view", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEmergencyAccessIdCipherIdAttachmentAttachmentIdRequest generates requests for GetEmergencyAccessIdCipherIdAttachmentAttachmentId
func NewGetEmergencyAccessIdCipherIdAttachmentAttachmentIdRequest(server string, id string, cipherId string, attachmentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "cipherId", runtime.ParamLocationPath, cipherId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attachmentId", runtime.ParamLocationPath, attachmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/emergency-access/%s/%s/attachment/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEventsRequest generates requests for GetEvents
func NewGetEventsRequest(server string, params *GetEventsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.End != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, *params.End); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ContinuationToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "continuationToken", runtime.ParamLocationQuery, *params.ContinuationToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFoldersRequest generates requests for GetFolders
func NewGetFoldersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/folders")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostFoldersRequest calls the generic PostFolders builder with application/json body
func NewPostFoldersRequest(server string, body PostFoldersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFoldersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFoldersRequestWithBody generates requests for PostFolders with any type of body
func NewPostFoldersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/folders")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFoldersIdRequest generates requests for DeleteFoldersId
func NewDeleteFoldersIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/folders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFoldersIdRequest generates requests for GetFoldersId
func NewGetFoldersIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/folders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostFoldersIdRequest calls the generic PostFoldersId builder with application/json body
func NewPostFoldersIdRequest(server string, id string, body PostFoldersIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFoldersIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostFoldersIdRequestWithBody generates requests for PostFoldersId with any type of body
func NewPostFoldersIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/folders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutFoldersIdRequest calls the generic PutFoldersId builder with application/json body
func NewPutFoldersIdRequest(server string, id string, body PutFoldersIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutFoldersIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutFoldersIdRequestWithBody generates requests for PutFoldersId with any type of body
func NewPutFoldersIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/folders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostFoldersIdDeleteRequest generates requests for PostFoldersIdDelete
func NewPostFoldersIdDeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/folders/%s/delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHibpBreachRequest generates requests for GetHibpBreach
func NewGetHibpBreachRequest(server string, params *GetHibpBreachParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hibp/breach")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.Username != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, *params.Username); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostInstallationsRequest calls the generic PostInstallations builder with application/json body
func NewPostInstallationsRequest(server string, body PostInstallationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInstallationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostInstallationsRequestWithBody generates requests for PostInstallations with any type of body
func NewPostInstallationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/installations")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInstallationsIdRequest generates requests for GetInstallationsId
func NewGetInstallationsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/installations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIpRequest generates requests for GetIp
func NewGetIpRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ip")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLicensesOrganizationIdRequest generates requests for GetLicensesOrganizationId
func NewGetLicensesOrganizationIdRequest(server string, id string, params *GetLicensesOrganizationIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/licenses/organization/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.Key != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLicensesUserIdRequest generates requests for GetLicensesUserId
func NewGetLicensesUserIdRequest(server string, id string, params *GetLicensesUserIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/licenses/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.Key != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNowRequest generates requests for GetNow
func NewGetNowRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/now")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationsRequest generates requests for GetOrganizations
func NewGetOrganizationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrganizationsRequest calls the generic PostOrganizations builder with application/json body
func NewPostOrganizationsRequest(server string, body PostOrganizationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostOrganizationsRequestWithBody generates requests for PostOrganizations with any type of body
func NewPostOrganizationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOrganizationsLicenseRequestWithBody generates requests for PostOrganizationsLicense with any type of body
func NewPostOrganizationsLicenseRequestWithBody(server string, params *PostOrganizationsLicenseParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/license")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, params.Key); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.CollectionName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "collectionName", runtime.ParamLocationQuery, *params.CollectionName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "keys.PublicKey", runtime.ParamLocationQuery, params.KeysPublicKey); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "keys.EncryptedPrivateKey", runtime.ParamLocationQuery, params.KeysEncryptedPrivateKey); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrganizationsIdRequest calls the generic DeleteOrganizationsId builder with application/json body
func NewDeleteOrganizationsIdRequest(server string, id string, body DeleteOrganizationsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteOrganizationsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDeleteOrganizationsIdRequestWithBody generates requests for DeleteOrganizationsId with any type of body
func NewDeleteOrganizationsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrganizationsIdRequest generates requests for GetOrganizationsId
func NewGetOrganizationsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrganizationsIdRequest calls the generic PostOrganizationsId builder with application/json body
func NewPostOrganizationsIdRequest(server string, id string, body PostOrganizationsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostOrganizationsIdRequestWithBody generates requests for PostOrganizationsId with any type of body
func NewPostOrganizationsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutOrganizationsIdRequest calls the generic PutOrganizationsId builder with application/json body
func NewPutOrganizationsIdRequest(server string, id string, body PutOrganizationsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrganizationsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutOrganizationsIdRequestWithBody generates requests for PutOrganizationsId with any type of body
func NewPutOrganizationsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOrganizationsIdApiKeyRequest calls the generic PostOrganizationsIdApiKey builder with application/json body
func NewPostOrganizationsIdApiKeyRequest(server string, id string, body PostOrganizationsIdApiKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsIdApiKeyRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostOrganizationsIdApiKeyRequestWithBody generates requests for PostOrganizationsIdApiKey with any type of body
func NewPostOrganizationsIdApiKeyRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/api-key", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrganizationsIdBillingRequest generates requests for GetOrganizationsIdBilling
func NewGetOrganizationsIdBillingRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/billing", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrganizationsIdCancelRequest generates requests for PostOrganizationsIdCancel
func NewPostOrganizationsIdCancelRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/cancel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrganizationsIdDeleteRequest calls the generic PostOrganizationsIdDelete builder with application/json body
func NewPostOrganizationsIdDeleteRequest(server string, id string, body PostOrganizationsIdDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsIdDeleteRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostOrganizationsIdDeleteRequestWithBody generates requests for PostOrganizationsIdDelete with any type of body
func NewPostOrganizationsIdDeleteRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrganizationsIdEventsRequest generates requests for GetOrganizationsIdEvents
func NewGetOrganizationsIdEventsRequest(server string, id string, params *GetOrganizationsIdEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.End != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, *params.End); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ContinuationToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "continuationToken", runtime.ParamLocationQuery, *params.ContinuationToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrganizationsIdImportRequest calls the generic PostOrganizationsIdImport builder with application/json body
func NewPostOrganizationsIdImportRequest(server string, id string, body PostOrganizationsIdImportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsIdImportRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostOrganizationsIdImportRequestWithBody generates requests for PostOrganizationsIdImport with any type of body
func NewPostOrganizationsIdImportRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/import", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrganizationsIdKeysRequest generates requests for GetOrganizationsIdKeys
func NewGetOrganizationsIdKeysRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/keys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrganizationsIdKeysRequest calls the generic PostOrganizationsIdKeys builder with application/json body
func NewPostOrganizationsIdKeysRequest(server string, id string, body PostOrganizationsIdKeysJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsIdKeysRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostOrganizationsIdKeysRequestWithBody generates requests for PostOrganizationsIdKeys with any type of body
func NewPostOrganizationsIdKeysRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/keys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOrganizationsIdLeaveRequest generates requests for PostOrganizationsIdLeave
func NewPostOrganizationsIdLeaveRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/leave", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationsIdLicenseRequest generates requests for GetOrganizationsIdLicense
func NewGetOrganizationsIdLicenseRequest(server string, id string, params *GetOrganizationsIdLicenseParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/license", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.InstallationId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "installationId", runtime.ParamLocationQuery, *params.InstallationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrganizationsIdLicenseRequestWithBody generates requests for PostOrganizationsIdLicense with any type of body
func NewPostOrganizationsIdLicenseRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/license", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOrganizationsIdPaymentRequest calls the generic PostOrganizationsIdPayment builder with application/json body
func NewPostOrganizationsIdPaymentRequest(server string, id string, body PostOrganizationsIdPaymentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsIdPaymentRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostOrganizationsIdPaymentRequestWithBody generates requests for PostOrganizationsIdPayment with any type of body
func NewPostOrganizationsIdPaymentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/payment", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOrganizationsIdReinstateRequest generates requests for PostOrganizationsIdReinstate
func NewPostOrganizationsIdReinstateRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/reinstate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrganizationsIdRotateApiKeyRequest calls the generic PostOrganizationsIdRotateApiKey builder with application/json body
func NewPostOrganizationsIdRotateApiKeyRequest(server string, id string, body PostOrganizationsIdRotateApiKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsIdRotateApiKeyRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostOrganizationsIdRotateApiKeyRequestWithBody generates requests for PostOrganizationsIdRotateApiKey with any type of body
func NewPostOrganizationsIdRotateApiKeyRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/rotate-api-key", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOrganizationsIdSeatRequest calls the generic PostOrganizationsIdSeat builder with application/json body
func NewPostOrganizationsIdSeatRequest(server string, id string, body PostOrganizationsIdSeatJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsIdSeatRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostOrganizationsIdSeatRequestWithBody generates requests for PostOrganizationsIdSeat with any type of body
func NewPostOrganizationsIdSeatRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/seat", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOrganizationsIdStorageRequest calls the generic PostOrganizationsIdStorage builder with application/json body
func NewPostOrganizationsIdStorageRequest(server string, id string, body PostOrganizationsIdStorageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsIdStorageRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostOrganizationsIdStorageRequestWithBody generates requests for PostOrganizationsIdStorage with any type of body
func NewPostOrganizationsIdStorageRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/storage", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrganizationsIdSubscriptionRequest generates requests for GetOrganizationsIdSubscription
func NewGetOrganizationsIdSubscriptionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/subscription", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationsIdTaxRequest generates requests for GetOrganizationsIdTax
func NewGetOrganizationsIdTaxRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/tax", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutOrganizationsIdTaxRequest calls the generic PutOrganizationsIdTax builder with application/json body
func NewPutOrganizationsIdTaxRequest(server string, id string, body PutOrganizationsIdTaxJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrganizationsIdTaxRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutOrganizationsIdTaxRequestWithBody generates requests for PutOrganizationsIdTax with any type of body
func NewPutOrganizationsIdTaxRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/tax", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrganizationsIdTwoFactorRequest generates requests for GetOrganizationsIdTwoFactor
func NewGetOrganizationsIdTwoFactorRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/two-factor", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrganizationsIdTwoFactorDisableRequest calls the generic PostOrganizationsIdTwoFactorDisable builder with application/json body
func NewPostOrganizationsIdTwoFactorDisableRequest(server string, id string, body PostOrganizationsIdTwoFactorDisableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsIdTwoFactorDisableRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostOrganizationsIdTwoFactorDisableRequestWithBody generates requests for PostOrganizationsIdTwoFactorDisable with any type of body
func NewPostOrganizationsIdTwoFactorDisableRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/two-factor/disable", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutOrganizationsIdTwoFactorDisableRequest calls the generic PutOrganizationsIdTwoFactorDisable builder with application/json body
func NewPutOrganizationsIdTwoFactorDisableRequest(server string, id string, body PutOrganizationsIdTwoFactorDisableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrganizationsIdTwoFactorDisableRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutOrganizationsIdTwoFactorDisableRequestWithBody generates requests for PutOrganizationsIdTwoFactorDisable with any type of body
func NewPutOrganizationsIdTwoFactorDisableRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/two-factor/disable", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOrganizationsIdTwoFactorDuoRequest calls the generic PostOrganizationsIdTwoFactorDuo builder with application/json body
func NewPostOrganizationsIdTwoFactorDuoRequest(server string, id string, body PostOrganizationsIdTwoFactorDuoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsIdTwoFactorDuoRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostOrganizationsIdTwoFactorDuoRequestWithBody generates requests for PostOrganizationsIdTwoFactorDuo with any type of body
func NewPostOrganizationsIdTwoFactorDuoRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/two-factor/duo", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutOrganizationsIdTwoFactorDuoRequest calls the generic PutOrganizationsIdTwoFactorDuo builder with application/json body
func NewPutOrganizationsIdTwoFactorDuoRequest(server string, id string, body PutOrganizationsIdTwoFactorDuoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrganizationsIdTwoFactorDuoRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutOrganizationsIdTwoFactorDuoRequestWithBody generates requests for PutOrganizationsIdTwoFactorDuo with any type of body
func NewPutOrganizationsIdTwoFactorDuoRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/two-factor/duo", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOrganizationsIdTwoFactorGetDuoRequest calls the generic PostOrganizationsIdTwoFactorGetDuo builder with application/json body
func NewPostOrganizationsIdTwoFactorGetDuoRequest(server string, id string, body PostOrganizationsIdTwoFactorGetDuoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsIdTwoFactorGetDuoRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostOrganizationsIdTwoFactorGetDuoRequestWithBody generates requests for PostOrganizationsIdTwoFactorGetDuo with any type of body
func NewPostOrganizationsIdTwoFactorGetDuoRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/two-factor/get-duo", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOrganizationsIdUpgradeRequest calls the generic PostOrganizationsIdUpgrade builder with application/json body
func NewPostOrganizationsIdUpgradeRequest(server string, id string, body PostOrganizationsIdUpgradeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsIdUpgradeRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostOrganizationsIdUpgradeRequestWithBody generates requests for PostOrganizationsIdUpgrade with any type of body
func NewPostOrganizationsIdUpgradeRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/upgrade", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOrganizationsIdVerifyBankRequest calls the generic PostOrganizationsIdVerifyBank builder with application/json body
func NewPostOrganizationsIdVerifyBankRequest(server string, id string, body PostOrganizationsIdVerifyBankJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsIdVerifyBankRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostOrganizationsIdVerifyBankRequestWithBody generates requests for PostOrganizationsIdVerifyBank with any type of body
func NewPostOrganizationsIdVerifyBankRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/verify-bank", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrganizationsOrgIdCollectionsRequest generates requests for GetOrganizationsOrgIdCollections
func NewGetOrganizationsOrgIdCollectionsRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/collections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrganizationsOrgIdCollectionsRequest calls the generic PostOrganizationsOrgIdCollections builder with application/json body
func NewPostOrganizationsOrgIdCollectionsRequest(server string, orgId string, body PostOrganizationsOrgIdCollectionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsOrgIdCollectionsRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewPostOrganizationsOrgIdCollectionsRequestWithBody generates requests for PostOrganizationsOrgIdCollections with any type of body
func NewPostOrganizationsOrgIdCollectionsRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/collections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrganizationsOrgIdCollectionsIdRequest generates requests for DeleteOrganizationsOrgIdCollectionsId
func NewDeleteOrganizationsOrgIdCollectionsIdRequest(server string, orgId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/collections/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationsOrgIdCollectionsIdRequest generates requests for GetOrganizationsOrgIdCollectionsId
func NewGetOrganizationsOrgIdCollectionsIdRequest(server string, orgId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/collections/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrganizationsOrgIdCollectionsIdRequest calls the generic PostOrganizationsOrgIdCollectionsId builder with application/json body
func NewPostOrganizationsOrgIdCollectionsIdRequest(server string, orgId string, id string, body PostOrganizationsOrgIdCollectionsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsOrgIdCollectionsIdRequestWithBody(server, orgId, id, "application/json", bodyReader)
}

// NewPostOrganizationsOrgIdCollectionsIdRequestWithBody generates requests for PostOrganizationsOrgIdCollectionsId with any type of body
func NewPostOrganizationsOrgIdCollectionsIdRequestWithBody(server string, orgId string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/collections/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutOrganizationsOrgIdCollectionsIdRequest calls the generic PutOrganizationsOrgIdCollectionsId builder with application/json body
func NewPutOrganizationsOrgIdCollectionsIdRequest(server string, orgId string, id string, body PutOrganizationsOrgIdCollectionsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrganizationsOrgIdCollectionsIdRequestWithBody(server, orgId, id, "application/json", bodyReader)
}

// NewPutOrganizationsOrgIdCollectionsIdRequestWithBody generates requests for PutOrganizationsOrgIdCollectionsId with any type of body
func NewPutOrganizationsOrgIdCollectionsIdRequestWithBody(server string, orgId string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/collections/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOrganizationsOrgIdCollectionsIdDeleteRequest generates requests for PostOrganizationsOrgIdCollectionsIdDelete
func NewPostOrganizationsOrgIdCollectionsIdDeleteRequest(server string, orgId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/collections/%s/delete", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrganizationsOrgIdCollectionsIdDeleteUserOrgUserIdRequest generates requests for PostOrganizationsOrgIdCollectionsIdDeleteUserOrgUserId
func NewPostOrganizationsOrgIdCollectionsIdDeleteUserOrgUserIdRequest(server string, orgId string, id string, orgUserId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "orgUserId", runtime.ParamLocationPath, orgUserId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/collections/%s/delete-user/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationsOrgIdCollectionsIdDetailsRequest generates requests for GetOrganizationsOrgIdCollectionsIdDetails
func NewGetOrganizationsOrgIdCollectionsIdDetailsRequest(server string, orgId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/collections/%s/details", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteOrganizationsOrgIdCollectionsIdUserOrgUserIdRequest generates requests for DeleteOrganizationsOrgIdCollectionsIdUserOrgUserId
func NewDeleteOrganizationsOrgIdCollectionsIdUserOrgUserIdRequest(server string, orgId string, id string, orgUserId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "orgUserId", runtime.ParamLocationPath, orgUserId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/collections/%s/user/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationsOrgIdCollectionsIdUsersRequest generates requests for GetOrganizationsOrgIdCollectionsIdUsers
func NewGetOrganizationsOrgIdCollectionsIdUsersRequest(server string, orgId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/collections/%s/users", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutOrganizationsOrgIdCollectionsIdUsersRequest calls the generic PutOrganizationsOrgIdCollectionsIdUsers builder with application/json body
func NewPutOrganizationsOrgIdCollectionsIdUsersRequest(server string, orgId string, id string, body PutOrganizationsOrgIdCollectionsIdUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrganizationsOrgIdCollectionsIdUsersRequestWithBody(server, orgId, id, "application/json", bodyReader)
}

// NewPutOrganizationsOrgIdCollectionsIdUsersRequestWithBody generates requests for PutOrganizationsOrgIdCollectionsIdUsers with any type of body
func NewPutOrganizationsOrgIdCollectionsIdUsersRequestWithBody(server string, orgId string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/collections/%s/users", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrganizationsOrgIdGroupsRequest generates requests for GetOrganizationsOrgIdGroups
func NewGetOrganizationsOrgIdGroupsRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrganizationsOrgIdGroupsRequest calls the generic PostOrganizationsOrgIdGroups builder with application/json body
func NewPostOrganizationsOrgIdGroupsRequest(server string, orgId string, body PostOrganizationsOrgIdGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsOrgIdGroupsRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewPostOrganizationsOrgIdGroupsRequestWithBody generates requests for PostOrganizationsOrgIdGroups with any type of body
func NewPostOrganizationsOrgIdGroupsRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrganizationsOrgIdGroupsIdRequest generates requests for DeleteOrganizationsOrgIdGroupsId
func NewDeleteOrganizationsOrgIdGroupsIdRequest(server string, orgId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/groups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationsOrgIdGroupsIdRequest generates requests for GetOrganizationsOrgIdGroupsId
func NewGetOrganizationsOrgIdGroupsIdRequest(server string, orgId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/groups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrganizationsOrgIdGroupsIdRequest calls the generic PostOrganizationsOrgIdGroupsId builder with application/json body
func NewPostOrganizationsOrgIdGroupsIdRequest(server string, orgId string, id string, body PostOrganizationsOrgIdGroupsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsOrgIdGroupsIdRequestWithBody(server, orgId, id, "application/json", bodyReader)
}

// NewPostOrganizationsOrgIdGroupsIdRequestWithBody generates requests for PostOrganizationsOrgIdGroupsId with any type of body
func NewPostOrganizationsOrgIdGroupsIdRequestWithBody(server string, orgId string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/groups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutOrganizationsOrgIdGroupsIdRequest calls the generic PutOrganizationsOrgIdGroupsId builder with application/json body
func NewPutOrganizationsOrgIdGroupsIdRequest(server string, orgId string, id string, body PutOrganizationsOrgIdGroupsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrganizationsOrgIdGroupsIdRequestWithBody(server, orgId, id, "application/json", bodyReader)
}

// NewPutOrganizationsOrgIdGroupsIdRequestWithBody generates requests for PutOrganizationsOrgIdGroupsId with any type of body
func NewPutOrganizationsOrgIdGroupsIdRequestWithBody(server string, orgId string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/groups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOrganizationsOrgIdGroupsIdDeleteRequest generates requests for PostOrganizationsOrgIdGroupsIdDelete
func NewPostOrganizationsOrgIdGroupsIdDeleteRequest(server string, orgId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/groups/%s/delete", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrganizationsOrgIdGroupsIdDeleteUserOrgUserIdRequest generates requests for PostOrganizationsOrgIdGroupsIdDeleteUserOrgUserId
func NewPostOrganizationsOrgIdGroupsIdDeleteUserOrgUserIdRequest(server string, orgId string, id string, orgUserId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "orgUserId", runtime.ParamLocationPath, orgUserId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/groups/%s/delete-user/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationsOrgIdGroupsIdDetailsRequest generates requests for GetOrganizationsOrgIdGroupsIdDetails
func NewGetOrganizationsOrgIdGroupsIdDetailsRequest(server string, orgId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/groups/%s/details", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteOrganizationsOrgIdGroupsIdUserOrgUserIdRequest generates requests for DeleteOrganizationsOrgIdGroupsIdUserOrgUserId
func NewDeleteOrganizationsOrgIdGroupsIdUserOrgUserIdRequest(server string, orgId string, id string, orgUserId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "orgUserId", runtime.ParamLocationPath, orgUserId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/groups/%s/user/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationsOrgIdGroupsIdUsersRequest generates requests for GetOrganizationsOrgIdGroupsIdUsers
func NewGetOrganizationsOrgIdGroupsIdUsersRequest(server string, orgId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/groups/%s/users", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutOrganizationsOrgIdGroupsIdUsersRequest calls the generic PutOrganizationsOrgIdGroupsIdUsers builder with application/json body
func NewPutOrganizationsOrgIdGroupsIdUsersRequest(server string, orgId string, id string, body PutOrganizationsOrgIdGroupsIdUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrganizationsOrgIdGroupsIdUsersRequestWithBody(server, orgId, id, "application/json", bodyReader)
}

// NewPutOrganizationsOrgIdGroupsIdUsersRequestWithBody generates requests for PutOrganizationsOrgIdGroupsIdUsers with any type of body
func NewPutOrganizationsOrgIdGroupsIdUsersRequestWithBody(server string, orgId string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/groups/%s/users", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrganizationsOrgIdPoliciesRequest generates requests for GetOrganizationsOrgIdPolicies
func NewGetOrganizationsOrgIdPoliciesRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/policies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationsOrgIdPoliciesTokenRequest generates requests for GetOrganizationsOrgIdPoliciesToken
func NewGetOrganizationsOrgIdPoliciesTokenRequest(server string, orgId string, params *GetOrganizationsOrgIdPoliciesTokenParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/policies/token", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.Email != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Token != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrganizationUserId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organizationUserId", runtime.ParamLocationQuery, *params.OrganizationUserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationsOrgIdPoliciesTypeRequest generates requests for GetOrganizationsOrgIdPoliciesType
func NewGetOrganizationsOrgIdPoliciesTypeRequest(server string, orgId string, pType int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/policies/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutOrganizationsOrgIdPoliciesTypeRequest calls the generic PutOrganizationsOrgIdPoliciesType builder with application/json body
func NewPutOrganizationsOrgIdPoliciesTypeRequest(server string, orgId string, pType int32, body PutOrganizationsOrgIdPoliciesTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrganizationsOrgIdPoliciesTypeRequestWithBody(server, orgId, pType, "application/json", bodyReader)
}

// NewPutOrganizationsOrgIdPoliciesTypeRequestWithBody generates requests for PutOrganizationsOrgIdPoliciesType with any type of body
func NewPutOrganizationsOrgIdPoliciesTypeRequestWithBody(server string, orgId string, pType int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/policies/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrganizationsOrgIdUsersRequest calls the generic DeleteOrganizationsOrgIdUsers builder with application/json body
func NewDeleteOrganizationsOrgIdUsersRequest(server string, orgId string, body DeleteOrganizationsOrgIdUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteOrganizationsOrgIdUsersRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewDeleteOrganizationsOrgIdUsersRequestWithBody generates requests for DeleteOrganizationsOrgIdUsers with any type of body
func NewDeleteOrganizationsOrgIdUsersRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrganizationsOrgIdUsersRequest generates requests for GetOrganizationsOrgIdUsers
func NewGetOrganizationsOrgIdUsersRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrganizationsOrgIdUsersConfirmRequest calls the generic PostOrganizationsOrgIdUsersConfirm builder with application/json body
func NewPostOrganizationsOrgIdUsersConfirmRequest(server string, orgId string, body PostOrganizationsOrgIdUsersConfirmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsOrgIdUsersConfirmRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewPostOrganizationsOrgIdUsersConfirmRequestWithBody generates requests for PostOrganizationsOrgIdUsersConfirm with any type of body
func NewPostOrganizationsOrgIdUsersConfirmRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/confirm", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOrganizationsOrgIdUsersDeleteRequest calls the generic PostOrganizationsOrgIdUsersDelete builder with application/json body
func NewPostOrganizationsOrgIdUsersDeleteRequest(server string, orgId string, body PostOrganizationsOrgIdUsersDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsOrgIdUsersDeleteRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewPostOrganizationsOrgIdUsersDeleteRequestWithBody generates requests for PostOrganizationsOrgIdUsersDelete with any type of body
func NewPostOrganizationsOrgIdUsersDeleteRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOrganizationsOrgIdUsersInviteRequest calls the generic PostOrganizationsOrgIdUsersInvite builder with application/json body
func NewPostOrganizationsOrgIdUsersInviteRequest(server string, orgId string, body PostOrganizationsOrgIdUsersInviteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsOrgIdUsersInviteRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewPostOrganizationsOrgIdUsersInviteRequestWithBody generates requests for PostOrganizationsOrgIdUsersInvite with any type of body
func NewPostOrganizationsOrgIdUsersInviteRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/invite", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOrganizationsOrgIdUsersPublicKeysRequest calls the generic PostOrganizationsOrgIdUsersPublicKeys builder with application/json body
func NewPostOrganizationsOrgIdUsersPublicKeysRequest(server string, orgId string, body PostOrganizationsOrgIdUsersPublicKeysJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsOrgIdUsersPublicKeysRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewPostOrganizationsOrgIdUsersPublicKeysRequestWithBody generates requests for PostOrganizationsOrgIdUsersPublicKeys with any type of body
func NewPostOrganizationsOrgIdUsersPublicKeysRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/public-keys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOrganizationsOrgIdUsersReinviteRequest calls the generic PostOrganizationsOrgIdUsersReinvite builder with application/json body
func NewPostOrganizationsOrgIdUsersReinviteRequest(server string, orgId string, body PostOrganizationsOrgIdUsersReinviteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsOrgIdUsersReinviteRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewPostOrganizationsOrgIdUsersReinviteRequestWithBody generates requests for PostOrganizationsOrgIdUsersReinvite with any type of body
func NewPostOrganizationsOrgIdUsersReinviteRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/reinvite", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrganizationsOrgIdUsersIdRequest generates requests for DeleteOrganizationsOrgIdUsersId
func NewDeleteOrganizationsOrgIdUsersIdRequest(server string, orgId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationsOrgIdUsersIdRequest generates requests for GetOrganizationsOrgIdUsersId
func NewGetOrganizationsOrgIdUsersIdRequest(server string, orgId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrganizationsOrgIdUsersIdRequest calls the generic PostOrganizationsOrgIdUsersId builder with application/json body
func NewPostOrganizationsOrgIdUsersIdRequest(server string, orgId string, id string, body PostOrganizationsOrgIdUsersIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsOrgIdUsersIdRequestWithBody(server, orgId, id, "application/json", bodyReader)
}

// NewPostOrganizationsOrgIdUsersIdRequestWithBody generates requests for PostOrganizationsOrgIdUsersId with any type of body
func NewPostOrganizationsOrgIdUsersIdRequestWithBody(server string, orgId string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutOrganizationsOrgIdUsersIdRequest calls the generic PutOrganizationsOrgIdUsersId builder with application/json body
func NewPutOrganizationsOrgIdUsersIdRequest(server string, orgId string, id string, body PutOrganizationsOrgIdUsersIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrganizationsOrgIdUsersIdRequestWithBody(server, orgId, id, "application/json", bodyReader)
}

// NewPutOrganizationsOrgIdUsersIdRequestWithBody generates requests for PutOrganizationsOrgIdUsersId with any type of body
func NewPutOrganizationsOrgIdUsersIdRequestWithBody(server string, orgId string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOrganizationsOrgIdUsersIdAcceptRequest calls the generic PostOrganizationsOrgIdUsersIdAccept builder with application/json body
func NewPostOrganizationsOrgIdUsersIdAcceptRequest(server string, orgId string, id string, body PostOrganizationsOrgIdUsersIdAcceptJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsOrgIdUsersIdAcceptRequestWithBody(server, orgId, id, "application/json", bodyReader)
}

// NewPostOrganizationsOrgIdUsersIdAcceptRequestWithBody generates requests for PostOrganizationsOrgIdUsersIdAccept with any type of body
func NewPostOrganizationsOrgIdUsersIdAcceptRequestWithBody(server string, orgId string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/%s/accept", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOrganizationsOrgIdUsersIdConfirmRequest calls the generic PostOrganizationsOrgIdUsersIdConfirm builder with application/json body
func NewPostOrganizationsOrgIdUsersIdConfirmRequest(server string, orgId string, id string, body PostOrganizationsOrgIdUsersIdConfirmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsOrgIdUsersIdConfirmRequestWithBody(server, orgId, id, "application/json", bodyReader)
}

// NewPostOrganizationsOrgIdUsersIdConfirmRequestWithBody generates requests for PostOrganizationsOrgIdUsersIdConfirm with any type of body
func NewPostOrganizationsOrgIdUsersIdConfirmRequestWithBody(server string, orgId string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/%s/confirm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOrganizationsOrgIdUsersIdDeleteRequest generates requests for PostOrganizationsOrgIdUsersIdDelete
func NewPostOrganizationsOrgIdUsersIdDeleteRequest(server string, orgId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/%s/delete", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationsOrgIdUsersIdEventsRequest generates requests for GetOrganizationsOrgIdUsersIdEvents
func NewGetOrganizationsOrgIdUsersIdEventsRequest(server string, orgId string, id string, params *GetOrganizationsOrgIdUsersIdEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/%s/events", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.End != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, *params.End); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ContinuationToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "continuationToken", runtime.ParamLocationQuery, *params.ContinuationToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationsOrgIdUsersIdGroupsRequest generates requests for GetOrganizationsOrgIdUsersIdGroups
func NewGetOrganizationsOrgIdUsersIdGroupsRequest(server string, orgId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/%s/groups", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrganizationsOrgIdUsersIdGroupsRequest calls the generic PostOrganizationsOrgIdUsersIdGroups builder with application/json body
func NewPostOrganizationsOrgIdUsersIdGroupsRequest(server string, orgId string, id string, body PostOrganizationsOrgIdUsersIdGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsOrgIdUsersIdGroupsRequestWithBody(server, orgId, id, "application/json", bodyReader)
}

// NewPostOrganizationsOrgIdUsersIdGroupsRequestWithBody generates requests for PostOrganizationsOrgIdUsersIdGroups with any type of body
func NewPostOrganizationsOrgIdUsersIdGroupsRequestWithBody(server string, orgId string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/%s/groups", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutOrganizationsOrgIdUsersIdGroupsRequest calls the generic PutOrganizationsOrgIdUsersIdGroups builder with application/json body
func NewPutOrganizationsOrgIdUsersIdGroupsRequest(server string, orgId string, id string, body PutOrganizationsOrgIdUsersIdGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrganizationsOrgIdUsersIdGroupsRequestWithBody(server, orgId, id, "application/json", bodyReader)
}

// NewPutOrganizationsOrgIdUsersIdGroupsRequestWithBody generates requests for PutOrganizationsOrgIdUsersIdGroups with any type of body
func NewPutOrganizationsOrgIdUsersIdGroupsRequestWithBody(server string, orgId string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/%s/groups", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOrganizationsOrgIdUsersIdReinviteRequest generates requests for PostOrganizationsOrgIdUsersIdReinvite
func NewPostOrganizationsOrgIdUsersIdReinviteRequest(server string, orgId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/%s/reinvite", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutOrganizationsOrgIdUsersIdResetPasswordRequest calls the generic PutOrganizationsOrgIdUsersIdResetPassword builder with application/json body
func NewPutOrganizationsOrgIdUsersIdResetPasswordRequest(server string, orgId string, id string, body PutOrganizationsOrgIdUsersIdResetPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrganizationsOrgIdUsersIdResetPasswordRequestWithBody(server, orgId, id, "application/json", bodyReader)
}

// NewPutOrganizationsOrgIdUsersIdResetPasswordRequestWithBody generates requests for PutOrganizationsOrgIdUsersIdResetPassword with any type of body
func NewPutOrganizationsOrgIdUsersIdResetPasswordRequestWithBody(server string, orgId string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/%s/reset-password", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrganizationsOrgIdUsersIdResetPasswordDetailsRequest generates requests for GetOrganizationsOrgIdUsersIdResetPasswordDetails
func NewGetOrganizationsOrgIdUsersIdResetPasswordDetailsRequest(server string, orgId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/%s/reset-password-details", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentRequest calls the generic PutOrganizationsOrgIdUsersUserIdResetPasswordEnrollment builder with application/json body
func NewPutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentRequest(server string, orgId string, userId string, body PutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentRequestWithBody(server, orgId, userId, "application/json", bodyReader)
}

// NewPutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentRequestWithBody generates requests for PutOrganizationsOrgIdUsersUserIdResetPasswordEnrollment with any type of body
func NewPutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentRequestWithBody(server string, orgId string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/%s/reset-password-enrollment", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPlansRequest generates requests for GetPlans
func NewGetPlansRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plans")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlansSalesTaxRatesRequest generates requests for GetPlansSalesTaxRates
func NewGetPlansSalesTaxRatesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plans/sales-tax-rates")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPushAddOrganizationRequest calls the generic PutPushAddOrganization builder with application/json body
func NewPutPushAddOrganizationRequest(server string, body PutPushAddOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPushAddOrganizationRequestWithBody(server, "application/json", bodyReader)
}

// NewPutPushAddOrganizationRequestWithBody generates requests for PutPushAddOrganization with any type of body
func NewPutPushAddOrganizationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/push/add-organization")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutPushDeleteOrganizationRequest calls the generic PutPushDeleteOrganization builder with application/json body
func NewPutPushDeleteOrganizationRequest(server string, body PutPushDeleteOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPushDeleteOrganizationRequestWithBody(server, "application/json", bodyReader)
}

// NewPutPushDeleteOrganizationRequestWithBody generates requests for PutPushDeleteOrganization with any type of body
func NewPutPushDeleteOrganizationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/push/delete-organization")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPushRegisterRequest calls the generic PostPushRegister builder with application/json body
func NewPostPushRegisterRequest(server string, body PostPushRegisterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPushRegisterRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPushRegisterRequestWithBody generates requests for PostPushRegister with any type of body
func NewPostPushRegisterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/push/register")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPushSendRequest calls the generic PostPushSend builder with application/json body
func NewPostPushSendRequest(server string, body PostPushSendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPushSendRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPushSendRequestWithBody generates requests for PostPushSend with any type of body
func NewPostPushSendRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/push/send")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePushIdRequest generates requests for DeletePushId
func NewDeletePushIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/push/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSendsRequest generates requests for GetSends
func NewGetSendsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sends")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSendsRequest calls the generic PostSends builder with application/json body
func NewPostSendsRequest(server string, body PostSendsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSendsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSendsRequestWithBody generates requests for PostSends with any type of body
func NewPostSendsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sends")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSendsAccessIdRequest calls the generic PostSendsAccessId builder with application/json body
func NewPostSendsAccessIdRequest(server string, id string, body PostSendsAccessIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSendsAccessIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostSendsAccessIdRequestWithBody generates requests for PostSendsAccessId with any type of body
func NewPostSendsAccessIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sends/access/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSendsFileRequest generates requests for PostSendsFile
func NewPostSendsFileRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sends/file")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSendsFileV2Request calls the generic PostSendsFileV2 builder with application/json body
func NewPostSendsFileV2Request(server string, body PostSendsFileV2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSendsFileV2RequestWithBody(server, "application/json", bodyReader)
}

// NewPostSendsFileV2RequestWithBody generates requests for PostSendsFileV2 with any type of body
func NewPostSendsFileV2RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sends/file/v2")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSendsFileValidateAzureRequest generates requests for PostSendsFileValidateAzure
func NewPostSendsFileValidateAzureRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sends/file/validate/azure")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSendsEncodedSendIdAccessFileFileIdRequest calls the generic PostSendsEncodedSendIdAccessFileFileId builder with application/json body
func NewPostSendsEncodedSendIdAccessFileFileIdRequest(server string, encodedSendId string, fileId string, body PostSendsEncodedSendIdAccessFileFileIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSendsEncodedSendIdAccessFileFileIdRequestWithBody(server, encodedSendId, fileId, "application/json", bodyReader)
}

// NewPostSendsEncodedSendIdAccessFileFileIdRequestWithBody generates requests for PostSendsEncodedSendIdAccessFileFileId with any type of body
func NewPostSendsEncodedSendIdAccessFileFileIdRequestWithBody(server string, encodedSendId string, fileId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "encodedSendId", runtime.ParamLocationPath, encodedSendId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "fileId", runtime.ParamLocationPath, fileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sends/%s/access/file/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSendsIdRequest generates requests for DeleteSendsId
func NewDeleteSendsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sends/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSendsIdRequest generates requests for GetSendsId
func NewGetSendsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sends/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSendsIdRequest calls the generic PutSendsId builder with application/json body
func NewPutSendsIdRequest(server string, id string, body PutSendsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSendsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutSendsIdRequestWithBody generates requests for PutSendsId with any type of body
func NewPutSendsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sends/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSendsIdFileFileIdRequest generates requests for GetSendsIdFileFileId
func NewGetSendsIdFileFileIdRequest(server string, id string, fileId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "fileId", runtime.ParamLocationPath, fileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sends/%s/file/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSendsIdFileFileIdRequest generates requests for PostSendsIdFileFileId
func NewPostSendsIdFileFileIdRequest(server string, id string, fileId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "fileId", runtime.ParamLocationPath, fileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sends/%s/file/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSendsIdRemovePasswordRequest generates requests for PutSendsIdRemovePassword
func NewPutSendsIdRemovePasswordRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sends/%s/remove-password", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSettingsDomainsRequest generates requests for GetSettingsDomains
func NewGetSettingsDomainsRequest(server string, params *GetSettingsDomainsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/domains")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.Excluded != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "excluded", runtime.ParamLocationQuery, *params.Excluded); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSettingsDomainsRequest calls the generic PostSettingsDomains builder with application/json body
func NewPostSettingsDomainsRequest(server string, body PostSettingsDomainsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSettingsDomainsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSettingsDomainsRequestWithBody generates requests for PostSettingsDomains with any type of body
func NewPostSettingsDomainsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/domains")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutSettingsDomainsRequest calls the generic PutSettingsDomains builder with application/json body
func NewPutSettingsDomainsRequest(server string, body PutSettingsDomainsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsDomainsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSettingsDomainsRequestWithBody generates requests for PutSettingsDomains with any type of body
func NewPutSettingsDomainsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/domains")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSetupPaymentRequest generates requests for PostSetupPayment
func NewPostSetupPaymentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/setup-payment")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSyncRequest generates requests for GetSync
func NewGetSyncRequest(server string, params *GetSyncParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sync")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.ExcludeDomains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "excludeDomains", runtime.ParamLocationQuery, *params.ExcludeDomains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTwoFactorRequest generates requests for GetTwoFactor
func NewGetTwoFactorRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/two-factor")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTwoFactorAuthenticatorRequest calls the generic PostTwoFactorAuthenticator builder with application/json body
func NewPostTwoFactorAuthenticatorRequest(server string, body PostTwoFactorAuthenticatorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTwoFactorAuthenticatorRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTwoFactorAuthenticatorRequestWithBody generates requests for PostTwoFactorAuthenticator with any type of body
func NewPostTwoFactorAuthenticatorRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/two-factor/authenticator")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutTwoFactorAuthenticatorRequest calls the generic PutTwoFactorAuthenticator builder with application/json body
func NewPutTwoFactorAuthenticatorRequest(server string, body PutTwoFactorAuthenticatorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTwoFactorAuthenticatorRequestWithBody(server, "application/json", bodyReader)
}

// NewPutTwoFactorAuthenticatorRequestWithBody generates requests for PutTwoFactorAuthenticator with any type of body
func NewPutTwoFactorAuthenticatorRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/two-factor/authenticator")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTwoFactorDisableRequest calls the generic PostTwoFactorDisable builder with application/json body
func NewPostTwoFactorDisableRequest(server string, body PostTwoFactorDisableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTwoFactorDisableRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTwoFactorDisableRequestWithBody generates requests for PostTwoFactorDisable with any type of body
func NewPostTwoFactorDisableRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/two-factor/disable")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutTwoFactorDisableRequest calls the generic PutTwoFactorDisable builder with application/json body
func NewPutTwoFactorDisableRequest(server string, body PutTwoFactorDisableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTwoFactorDisableRequestWithBody(server, "application/json", bodyReader)
}

// NewPutTwoFactorDisableRequestWithBody generates requests for PutTwoFactorDisable with any type of body
func NewPutTwoFactorDisableRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/two-factor/disable")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTwoFactorDuoRequest calls the generic PostTwoFactorDuo builder with application/json body
func NewPostTwoFactorDuoRequest(server string, body PostTwoFactorDuoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTwoFactorDuoRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTwoFactorDuoRequestWithBody generates requests for PostTwoFactorDuo with any type of body
func NewPostTwoFactorDuoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/two-factor/duo")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutTwoFactorDuoRequest calls the generic PutTwoFactorDuo builder with application/json body
func NewPutTwoFactorDuoRequest(server string, body PutTwoFactorDuoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTwoFactorDuoRequestWithBody(server, "application/json", bodyReader)
}

// NewPutTwoFactorDuoRequestWithBody generates requests for PutTwoFactorDuo with any type of body
func NewPutTwoFactorDuoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/two-factor/duo")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTwoFactorEmailRequest calls the generic PostTwoFactorEmail builder with application/json body
func NewPostTwoFactorEmailRequest(server string, body PostTwoFactorEmailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTwoFactorEmailRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTwoFactorEmailRequestWithBody generates requests for PostTwoFactorEmail with any type of body
func NewPostTwoFactorEmailRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/two-factor/email")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutTwoFactorEmailRequest calls the generic PutTwoFactorEmail builder with application/json body
func NewPutTwoFactorEmailRequest(server string, body PutTwoFactorEmailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTwoFactorEmailRequestWithBody(server, "application/json", bodyReader)
}

// NewPutTwoFactorEmailRequestWithBody generates requests for PutTwoFactorEmail with any type of body
func NewPutTwoFactorEmailRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/two-factor/email")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTwoFactorGetAuthenticatorRequest calls the generic PostTwoFactorGetAuthenticator builder with application/json body
func NewPostTwoFactorGetAuthenticatorRequest(server string, body PostTwoFactorGetAuthenticatorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTwoFactorGetAuthenticatorRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTwoFactorGetAuthenticatorRequestWithBody generates requests for PostTwoFactorGetAuthenticator with any type of body
func NewPostTwoFactorGetAuthenticatorRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/two-factor/get-authenticator")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTwoFactorGetDuoRequest calls the generic PostTwoFactorGetDuo builder with application/json body
func NewPostTwoFactorGetDuoRequest(server string, body PostTwoFactorGetDuoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTwoFactorGetDuoRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTwoFactorGetDuoRequestWithBody generates requests for PostTwoFactorGetDuo with any type of body
func NewPostTwoFactorGetDuoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/two-factor/get-duo")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTwoFactorGetEmailRequest calls the generic PostTwoFactorGetEmail builder with application/json body
func NewPostTwoFactorGetEmailRequest(server string, body PostTwoFactorGetEmailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTwoFactorGetEmailRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTwoFactorGetEmailRequestWithBody generates requests for PostTwoFactorGetEmail with any type of body
func NewPostTwoFactorGetEmailRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/two-factor/get-email")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTwoFactorGetRecoverRequest calls the generic PostTwoFactorGetRecover builder with application/json body
func NewPostTwoFactorGetRecoverRequest(server string, body PostTwoFactorGetRecoverJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTwoFactorGetRecoverRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTwoFactorGetRecoverRequestWithBody generates requests for PostTwoFactorGetRecover with any type of body
func NewPostTwoFactorGetRecoverRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/two-factor/get-recover")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTwoFactorGetWebauthnRequest calls the generic PostTwoFactorGetWebauthn builder with application/json body
func NewPostTwoFactorGetWebauthnRequest(server string, body PostTwoFactorGetWebauthnJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTwoFactorGetWebauthnRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTwoFactorGetWebauthnRequestWithBody generates requests for PostTwoFactorGetWebauthn with any type of body
func NewPostTwoFactorGetWebauthnRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/two-factor/get-webauthn")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTwoFactorGetWebauthnChallengeRequest calls the generic PostTwoFactorGetWebauthnChallenge builder with application/json body
func NewPostTwoFactorGetWebauthnChallengeRequest(server string, body PostTwoFactorGetWebauthnChallengeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTwoFactorGetWebauthnChallengeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTwoFactorGetWebauthnChallengeRequestWithBody generates requests for PostTwoFactorGetWebauthnChallenge with any type of body
func NewPostTwoFactorGetWebauthnChallengeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/two-factor/get-webauthn-challenge")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTwoFactorGetYubikeyRequest calls the generic PostTwoFactorGetYubikey builder with application/json body
func NewPostTwoFactorGetYubikeyRequest(server string, body PostTwoFactorGetYubikeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTwoFactorGetYubikeyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTwoFactorGetYubikeyRequestWithBody generates requests for PostTwoFactorGetYubikey with any type of body
func NewPostTwoFactorGetYubikeyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/two-factor/get-yubikey")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTwoFactorRecoverRequest calls the generic PostTwoFactorRecover builder with application/json body
func NewPostTwoFactorRecoverRequest(server string, body PostTwoFactorRecoverJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTwoFactorRecoverRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTwoFactorRecoverRequestWithBody generates requests for PostTwoFactorRecover with any type of body
func NewPostTwoFactorRecoverRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/two-factor/recover")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTwoFactorSendEmailRequest calls the generic PostTwoFactorSendEmail builder with application/json body
func NewPostTwoFactorSendEmailRequest(server string, body PostTwoFactorSendEmailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTwoFactorSendEmailRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTwoFactorSendEmailRequestWithBody generates requests for PostTwoFactorSendEmail with any type of body
func NewPostTwoFactorSendEmailRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/two-factor/send-email")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTwoFactorSendEmailLoginRequest calls the generic PostTwoFactorSendEmailLogin builder with application/json body
func NewPostTwoFactorSendEmailLoginRequest(server string, body PostTwoFactorSendEmailLoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTwoFactorSendEmailLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTwoFactorSendEmailLoginRequestWithBody generates requests for PostTwoFactorSendEmailLogin with any type of body
func NewPostTwoFactorSendEmailLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/two-factor/send-email-login")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTwoFactorWebauthnRequest calls the generic DeleteTwoFactorWebauthn builder with application/json body
func NewDeleteTwoFactorWebauthnRequest(server string, body DeleteTwoFactorWebauthnJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteTwoFactorWebauthnRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteTwoFactorWebauthnRequestWithBody generates requests for DeleteTwoFactorWebauthn with any type of body
func NewDeleteTwoFactorWebauthnRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/two-factor/webauthn")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTwoFactorWebauthnRequest calls the generic PostTwoFactorWebauthn builder with application/json body
func NewPostTwoFactorWebauthnRequest(server string, body PostTwoFactorWebauthnJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTwoFactorWebauthnRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTwoFactorWebauthnRequestWithBody generates requests for PostTwoFactorWebauthn with any type of body
func NewPostTwoFactorWebauthnRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/two-factor/webauthn")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutTwoFactorWebauthnRequest calls the generic PutTwoFactorWebauthn builder with application/json body
func NewPutTwoFactorWebauthnRequest(server string, body PutTwoFactorWebauthnJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTwoFactorWebauthnRequestWithBody(server, "application/json", bodyReader)
}

// NewPutTwoFactorWebauthnRequestWithBody generates requests for PutTwoFactorWebauthn with any type of body
func NewPutTwoFactorWebauthnRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/two-factor/webauthn")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTwoFactorYubikeyRequest calls the generic PostTwoFactorYubikey builder with application/json body
func NewPostTwoFactorYubikeyRequest(server string, body PostTwoFactorYubikeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTwoFactorYubikeyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTwoFactorYubikeyRequestWithBody generates requests for PostTwoFactorYubikey with any type of body
func NewPostTwoFactorYubikeyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/two-factor/yubikey")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutTwoFactorYubikeyRequest calls the generic PutTwoFactorYubikey builder with application/json body
func NewPutTwoFactorYubikeyRequest(server string, body PutTwoFactorYubikeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTwoFactorYubikeyRequestWithBody(server, "application/json", bodyReader)
}

// NewPutTwoFactorYubikeyRequestWithBody generates requests for PutTwoFactorYubikey with any type of body
func NewPutTwoFactorYubikeyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/two-factor/yubikey")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsersIdPublicKeyRequest generates requests for GetUsersIdPublicKey
func NewGetUsersIdPublicKeyRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/public-key", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVersionRequest generates requests for GetVersion
func NewGetVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/version")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DeleteAccounts request  with any body
	DeleteAccountsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAccountsResponse, error)

	DeleteAccountsWithResponse(ctx context.Context, body DeleteAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAccountsResponse, error)

	// PostAccountsApiKey request  with any body
	PostAccountsApiKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsApiKeyResponse, error)

	PostAccountsApiKeyWithResponse(ctx context.Context, body PostAccountsApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsApiKeyResponse, error)

	// GetAccountsBilling request
	GetAccountsBillingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountsBillingResponse, error)

	// PostAccountsCancelPremium request
	PostAccountsCancelPremiumWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAccountsCancelPremiumResponse, error)

	// PostAccountsDelete request  with any body
	PostAccountsDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsDeleteResponse, error)

	PostAccountsDeleteWithResponse(ctx context.Context, body PostAccountsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsDeleteResponse, error)

	// PostAccountsDeleteRecover request  with any body
	PostAccountsDeleteRecoverWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsDeleteRecoverResponse, error)

	PostAccountsDeleteRecoverWithResponse(ctx context.Context, body PostAccountsDeleteRecoverJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsDeleteRecoverResponse, error)

	// PostAccountsDeleteRecoverToken request  with any body
	PostAccountsDeleteRecoverTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsDeleteRecoverTokenResponse, error)

	PostAccountsDeleteRecoverTokenWithResponse(ctx context.Context, body PostAccountsDeleteRecoverTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsDeleteRecoverTokenResponse, error)

	// PostAccountsEmail request  with any body
	PostAccountsEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsEmailResponse, error)

	PostAccountsEmailWithResponse(ctx context.Context, body PostAccountsEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsEmailResponse, error)

	// PostAccountsEmailToken request  with any body
	PostAccountsEmailTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsEmailTokenResponse, error)

	PostAccountsEmailTokenWithResponse(ctx context.Context, body PostAccountsEmailTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsEmailTokenResponse, error)

	// GetAccountsEnterprisePortalSigninToken request
	GetAccountsEnterprisePortalSigninTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountsEnterprisePortalSigninTokenResponse, error)

	// PostAccountsIapCheck request  with any body
	PostAccountsIapCheckWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsIapCheckResponse, error)

	PostAccountsIapCheckWithResponse(ctx context.Context, body PostAccountsIapCheckJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsIapCheckResponse, error)

	// PostAccountsKdf request  with any body
	PostAccountsKdfWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsKdfResponse, error)

	PostAccountsKdfWithResponse(ctx context.Context, body PostAccountsKdfJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsKdfResponse, error)

	// PostAccountsKey request  with any body
	PostAccountsKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsKeyResponse, error)

	PostAccountsKeyWithResponse(ctx context.Context, body PostAccountsKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsKeyResponse, error)

	// GetAccountsKeys request
	GetAccountsKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountsKeysResponse, error)

	// PostAccountsKeys request  with any body
	PostAccountsKeysWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsKeysResponse, error)

	PostAccountsKeysWithResponse(ctx context.Context, body PostAccountsKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsKeysResponse, error)

	// PostAccountsLicense request  with any body
	PostAccountsLicenseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsLicenseResponse, error)

	// GetAccountsOrganizations request
	GetAccountsOrganizationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountsOrganizationsResponse, error)

	// PostAccountsPassword request  with any body
	PostAccountsPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsPasswordResponse, error)

	PostAccountsPasswordWithResponse(ctx context.Context, body PostAccountsPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsPasswordResponse, error)

	// PostAccountsPasswordHint request  with any body
	PostAccountsPasswordHintWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsPasswordHintResponse, error)

	PostAccountsPasswordHintWithResponse(ctx context.Context, body PostAccountsPasswordHintJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsPasswordHintResponse, error)

	// PostAccountsPayment request  with any body
	PostAccountsPaymentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsPaymentResponse, error)

	PostAccountsPaymentWithResponse(ctx context.Context, body PostAccountsPaymentJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsPaymentResponse, error)

	// PostAccountsPrelogin request  with any body
	PostAccountsPreloginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsPreloginResponse, error)

	PostAccountsPreloginWithResponse(ctx context.Context, body PostAccountsPreloginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsPreloginResponse, error)

	// PostAccountsPremium request  with any body
	PostAccountsPremiumWithBodyWithResponse(ctx context.Context, params *PostAccountsPremiumParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsPremiumResponse, error)

	// GetAccountsProfile request
	GetAccountsProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountsProfileResponse, error)

	// PostAccountsProfile request  with any body
	PostAccountsProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsProfileResponse, error)

	PostAccountsProfileWithResponse(ctx context.Context, body PostAccountsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsProfileResponse, error)

	// PutAccountsProfile request  with any body
	PutAccountsProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAccountsProfileResponse, error)

	PutAccountsProfileWithResponse(ctx context.Context, body PutAccountsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAccountsProfileResponse, error)

	// PostAccountsRegister request  with any body
	PostAccountsRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsRegisterResponse, error)

	PostAccountsRegisterWithResponse(ctx context.Context, body PostAccountsRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsRegisterResponse, error)

	// PostAccountsReinstatePremium request
	PostAccountsReinstatePremiumWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAccountsReinstatePremiumResponse, error)

	// GetAccountsRevisionDate request
	GetAccountsRevisionDateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountsRevisionDateResponse, error)

	// PostAccountsRotateApiKey request  with any body
	PostAccountsRotateApiKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsRotateApiKeyResponse, error)

	PostAccountsRotateApiKeyWithResponse(ctx context.Context, body PostAccountsRotateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsRotateApiKeyResponse, error)

	// PostAccountsSecurityStamp request  with any body
	PostAccountsSecurityStampWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsSecurityStampResponse, error)

	PostAccountsSecurityStampWithResponse(ctx context.Context, body PostAccountsSecurityStampJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsSecurityStampResponse, error)

	// PostAccountsSetPassword request  with any body
	PostAccountsSetPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsSetPasswordResponse, error)

	PostAccountsSetPasswordWithResponse(ctx context.Context, body PostAccountsSetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsSetPasswordResponse, error)

	// GetAccountsSsoUserIdentifier request
	GetAccountsSsoUserIdentifierWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountsSsoUserIdentifierResponse, error)

	// DeleteAccountsSsoOrganizationId request
	DeleteAccountsSsoOrganizationIdWithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*DeleteAccountsSsoOrganizationIdResponse, error)

	// PostAccountsStorage request  with any body
	PostAccountsStorageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsStorageResponse, error)

	PostAccountsStorageWithResponse(ctx context.Context, body PostAccountsStorageJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsStorageResponse, error)

	// GetAccountsSubscription request
	GetAccountsSubscriptionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountsSubscriptionResponse, error)

	// GetAccountsTax request
	GetAccountsTaxWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountsTaxResponse, error)

	// PutAccountsTax request  with any body
	PutAccountsTaxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAccountsTaxResponse, error)

	PutAccountsTaxWithResponse(ctx context.Context, body PutAccountsTaxJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAccountsTaxResponse, error)

	// PostAccountsVerifyEmail request
	PostAccountsVerifyEmailWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAccountsVerifyEmailResponse, error)

	// PostAccountsVerifyEmailToken request  with any body
	PostAccountsVerifyEmailTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsVerifyEmailTokenResponse, error)

	PostAccountsVerifyEmailTokenWithResponse(ctx context.Context, body PostAccountsVerifyEmailTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsVerifyEmailTokenResponse, error)

	// PostAccountsVerifyPassword request  with any body
	PostAccountsVerifyPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsVerifyPasswordResponse, error)

	PostAccountsVerifyPasswordWithResponse(ctx context.Context, body PostAccountsVerifyPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsVerifyPasswordResponse, error)

	// GetAlive request
	GetAliveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAliveResponse, error)

	// PostBitpayInvoice request  with any body
	PostBitpayInvoiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBitpayInvoiceResponse, error)

	PostBitpayInvoiceWithResponse(ctx context.Context, body PostBitpayInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBitpayInvoiceResponse, error)

	// DeleteCiphers request  with any body
	DeleteCiphersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteCiphersResponse, error)

	DeleteCiphersWithResponse(ctx context.Context, body DeleteCiphersJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteCiphersResponse, error)

	// GetCiphers request
	GetCiphersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCiphersResponse, error)

	// PostCiphers request  with any body
	PostCiphersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCiphersResponse, error)

	PostCiphersWithResponse(ctx context.Context, body PostCiphersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCiphersResponse, error)

	// DeleteCiphersAdmin request  with any body
	DeleteCiphersAdminWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteCiphersAdminResponse, error)

	DeleteCiphersAdminWithResponse(ctx context.Context, body DeleteCiphersAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteCiphersAdminResponse, error)

	// PostCiphersAdmin request  with any body
	PostCiphersAdminWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCiphersAdminResponse, error)

	PostCiphersAdminWithResponse(ctx context.Context, body PostCiphersAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCiphersAdminResponse, error)

	// PostCiphersAttachmentValidateAzure request
	PostCiphersAttachmentValidateAzureWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostCiphersAttachmentValidateAzureResponse, error)

	// PostCiphersCreate request  with any body
	PostCiphersCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCiphersCreateResponse, error)

	PostCiphersCreateWithResponse(ctx context.Context, body PostCiphersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCiphersCreateResponse, error)

	// PostCiphersDelete request  with any body
	PostCiphersDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCiphersDeleteResponse, error)

	PostCiphersDeleteWithResponse(ctx context.Context, body PostCiphersDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCiphersDeleteResponse, error)

	// PutCiphersDelete request  with any body
	PutCiphersDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCiphersDeleteResponse, error)

	PutCiphersDeleteWithResponse(ctx context.Context, body PutCiphersDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCiphersDeleteResponse, error)

	// PostCiphersDeleteAdmin request  with any body
	PostCiphersDeleteAdminWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCiphersDeleteAdminResponse, error)

	PostCiphersDeleteAdminWithResponse(ctx context.Context, body PostCiphersDeleteAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCiphersDeleteAdminResponse, error)

	// PutCiphersDeleteAdmin request  with any body
	PutCiphersDeleteAdminWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCiphersDeleteAdminResponse, error)

	PutCiphersDeleteAdminWithResponse(ctx context.Context, body PutCiphersDeleteAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCiphersDeleteAdminResponse, error)

	// PostCiphersImport request  with any body
	PostCiphersImportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCiphersImportResponse, error)

	PostCiphersImportWithResponse(ctx context.Context, body PostCiphersImportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCiphersImportResponse, error)

	// PostCiphersImportOrganization request  with any body
	PostCiphersImportOrganizationWithBodyWithResponse(ctx context.Context, params *PostCiphersImportOrganizationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCiphersImportOrganizationResponse, error)

	PostCiphersImportOrganizationWithResponse(ctx context.Context, params *PostCiphersImportOrganizationParams, body PostCiphersImportOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCiphersImportOrganizationResponse, error)

	// PostCiphersMove request  with any body
	PostCiphersMoveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCiphersMoveResponse, error)

	PostCiphersMoveWithResponse(ctx context.Context, body PostCiphersMoveJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCiphersMoveResponse, error)

	// PutCiphersMove request  with any body
	PutCiphersMoveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCiphersMoveResponse, error)

	PutCiphersMoveWithResponse(ctx context.Context, body PutCiphersMoveJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCiphersMoveResponse, error)

	// GetCiphersOrganizationDetails request
	GetCiphersOrganizationDetailsWithResponse(ctx context.Context, params *GetCiphersOrganizationDetailsParams, reqEditors ...RequestEditorFn) (*GetCiphersOrganizationDetailsResponse, error)

	// PostCiphersPurge request  with any body
	PostCiphersPurgeWithBodyWithResponse(ctx context.Context, params *PostCiphersPurgeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCiphersPurgeResponse, error)

	PostCiphersPurgeWithResponse(ctx context.Context, params *PostCiphersPurgeParams, body PostCiphersPurgeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCiphersPurgeResponse, error)

	// PutCiphersRestore request  with any body
	PutCiphersRestoreWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCiphersRestoreResponse, error)

	PutCiphersRestoreWithResponse(ctx context.Context, body PutCiphersRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCiphersRestoreResponse, error)

	// PostCiphersShare request  with any body
	PostCiphersShareWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCiphersShareResponse, error)

	PostCiphersShareWithResponse(ctx context.Context, body PostCiphersShareJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCiphersShareResponse, error)

	// PutCiphersShare request  with any body
	PutCiphersShareWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCiphersShareResponse, error)

	PutCiphersShareWithResponse(ctx context.Context, body PutCiphersShareJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCiphersShareResponse, error)

	// DeleteCiphersId request
	DeleteCiphersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCiphersIdResponse, error)

	// GetCiphersId request
	GetCiphersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCiphersIdResponse, error)

	// PostCiphersId request  with any body
	PostCiphersIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCiphersIdResponse, error)

	PostCiphersIdWithResponse(ctx context.Context, id string, body PostCiphersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCiphersIdResponse, error)

	// PutCiphersId request  with any body
	PutCiphersIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCiphersIdResponse, error)

	PutCiphersIdWithResponse(ctx context.Context, id string, body PutCiphersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCiphersIdResponse, error)

	// DeleteCiphersIdAdmin request
	DeleteCiphersIdAdminWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCiphersIdAdminResponse, error)

	// GetCiphersIdAdmin request
	GetCiphersIdAdminWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCiphersIdAdminResponse, error)

	// PostCiphersIdAdmin request  with any body
	PostCiphersIdAdminWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCiphersIdAdminResponse, error)

	PostCiphersIdAdminWithResponse(ctx context.Context, id string, body PostCiphersIdAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCiphersIdAdminResponse, error)

	// PutCiphersIdAdmin request  with any body
	PutCiphersIdAdminWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCiphersIdAdminResponse, error)

	PutCiphersIdAdminWithResponse(ctx context.Context, id string, body PutCiphersIdAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCiphersIdAdminResponse, error)

	// PostCiphersIdAttachment request
	PostCiphersIdAttachmentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostCiphersIdAttachmentResponse, error)

	// PostCiphersIdAttachmentAdmin request
	PostCiphersIdAttachmentAdminWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostCiphersIdAttachmentAdminResponse, error)

	// PostCiphersIdAttachmentV2 request  with any body
	PostCiphersIdAttachmentV2WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCiphersIdAttachmentV2Response, error)

	PostCiphersIdAttachmentV2WithResponse(ctx context.Context, id string, body PostCiphersIdAttachmentV2JSONRequestBody, reqEditors ...RequestEditorFn) (*PostCiphersIdAttachmentV2Response, error)

	// DeleteCiphersIdAttachmentAttachmentId request
	DeleteCiphersIdAttachmentAttachmentIdWithResponse(ctx context.Context, id string, attachmentId string, reqEditors ...RequestEditorFn) (*DeleteCiphersIdAttachmentAttachmentIdResponse, error)

	// GetCiphersIdAttachmentAttachmentId request
	GetCiphersIdAttachmentAttachmentIdWithResponse(ctx context.Context, id string, attachmentId string, reqEditors ...RequestEditorFn) (*GetCiphersIdAttachmentAttachmentIdResponse, error)

	// PostCiphersIdAttachmentAttachmentId request
	PostCiphersIdAttachmentAttachmentIdWithResponse(ctx context.Context, id string, attachmentId string, reqEditors ...RequestEditorFn) (*PostCiphersIdAttachmentAttachmentIdResponse, error)

	// DeleteCiphersIdAttachmentAttachmentIdAdmin request
	DeleteCiphersIdAttachmentAttachmentIdAdminWithResponse(ctx context.Context, id string, attachmentId string, reqEditors ...RequestEditorFn) (*DeleteCiphersIdAttachmentAttachmentIdAdminResponse, error)

	// PostCiphersIdAttachmentAttachmentIdDelete request
	PostCiphersIdAttachmentAttachmentIdDeleteWithResponse(ctx context.Context, id string, attachmentId string, reqEditors ...RequestEditorFn) (*PostCiphersIdAttachmentAttachmentIdDeleteResponse, error)

	// PostCiphersIdAttachmentAttachmentIdDeleteAdmin request
	PostCiphersIdAttachmentAttachmentIdDeleteAdminWithResponse(ctx context.Context, id string, attachmentId string, reqEditors ...RequestEditorFn) (*PostCiphersIdAttachmentAttachmentIdDeleteAdminResponse, error)

	// GetCiphersIdAttachmentAttachmentIdRenew request
	GetCiphersIdAttachmentAttachmentIdRenewWithResponse(ctx context.Context, id string, attachmentId string, reqEditors ...RequestEditorFn) (*GetCiphersIdAttachmentAttachmentIdRenewResponse, error)

	// PostCiphersIdAttachmentAttachmentIdShare request
	PostCiphersIdAttachmentAttachmentIdShareWithResponse(ctx context.Context, id string, attachmentId string, params *PostCiphersIdAttachmentAttachmentIdShareParams, reqEditors ...RequestEditorFn) (*PostCiphersIdAttachmentAttachmentIdShareResponse, error)

	// PostCiphersIdCollections request  with any body
	PostCiphersIdCollectionsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCiphersIdCollectionsResponse, error)

	PostCiphersIdCollectionsWithResponse(ctx context.Context, id string, body PostCiphersIdCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCiphersIdCollectionsResponse, error)

	// PutCiphersIdCollections request  with any body
	PutCiphersIdCollectionsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCiphersIdCollectionsResponse, error)

	PutCiphersIdCollectionsWithResponse(ctx context.Context, id string, body PutCiphersIdCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCiphersIdCollectionsResponse, error)

	// PostCiphersIdCollectionsAdmin request  with any body
	PostCiphersIdCollectionsAdminWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCiphersIdCollectionsAdminResponse, error)

	PostCiphersIdCollectionsAdminWithResponse(ctx context.Context, id string, body PostCiphersIdCollectionsAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCiphersIdCollectionsAdminResponse, error)

	// PutCiphersIdCollectionsAdmin request  with any body
	PutCiphersIdCollectionsAdminWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCiphersIdCollectionsAdminResponse, error)

	PutCiphersIdCollectionsAdminWithResponse(ctx context.Context, id string, body PutCiphersIdCollectionsAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCiphersIdCollectionsAdminResponse, error)

	// PostCiphersIdDelete request
	PostCiphersIdDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostCiphersIdDeleteResponse, error)

	// PutCiphersIdDelete request
	PutCiphersIdDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PutCiphersIdDeleteResponse, error)

	// PostCiphersIdDeleteAdmin request
	PostCiphersIdDeleteAdminWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostCiphersIdDeleteAdminResponse, error)

	// PutCiphersIdDeleteAdmin request
	PutCiphersIdDeleteAdminWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PutCiphersIdDeleteAdminResponse, error)

	// GetCiphersIdDetails request
	GetCiphersIdDetailsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCiphersIdDetailsResponse, error)

	// GetCiphersIdEvents request
	GetCiphersIdEventsWithResponse(ctx context.Context, id string, params *GetCiphersIdEventsParams, reqEditors ...RequestEditorFn) (*GetCiphersIdEventsResponse, error)

	// GetCiphersIdFullDetails request
	GetCiphersIdFullDetailsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCiphersIdFullDetailsResponse, error)

	// PostCiphersIdPartial request  with any body
	PostCiphersIdPartialWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCiphersIdPartialResponse, error)

	PostCiphersIdPartialWithResponse(ctx context.Context, id string, body PostCiphersIdPartialJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCiphersIdPartialResponse, error)

	// PutCiphersIdPartial request  with any body
	PutCiphersIdPartialWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCiphersIdPartialResponse, error)

	PutCiphersIdPartialWithResponse(ctx context.Context, id string, body PutCiphersIdPartialJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCiphersIdPartialResponse, error)

	// PutCiphersIdRestore request
	PutCiphersIdRestoreWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PutCiphersIdRestoreResponse, error)

	// PutCiphersIdRestoreAdmin request
	PutCiphersIdRestoreAdminWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PutCiphersIdRestoreAdminResponse, error)

	// PostCiphersIdShare request  with any body
	PostCiphersIdShareWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCiphersIdShareResponse, error)

	PostCiphersIdShareWithResponse(ctx context.Context, id string, body PostCiphersIdShareJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCiphersIdShareResponse, error)

	// PutCiphersIdShare request  with any body
	PutCiphersIdShareWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCiphersIdShareResponse, error)

	PutCiphersIdShareWithResponse(ctx context.Context, id string, body PutCiphersIdShareJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCiphersIdShareResponse, error)

	// GetCollections request
	GetCollectionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCollectionsResponse, error)

	// GetDevices request
	GetDevicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDevicesResponse, error)

	// PostDevices request  with any body
	PostDevicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDevicesResponse, error)

	PostDevicesWithResponse(ctx context.Context, body PostDevicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDevicesResponse, error)

	// GetDevicesIdentifierIdentifier request
	GetDevicesIdentifierIdentifierWithResponse(ctx context.Context, identifier string, reqEditors ...RequestEditorFn) (*GetDevicesIdentifierIdentifierResponse, error)

	// PostDevicesIdentifierIdentifierClearToken request
	PostDevicesIdentifierIdentifierClearTokenWithResponse(ctx context.Context, identifier string, reqEditors ...RequestEditorFn) (*PostDevicesIdentifierIdentifierClearTokenResponse, error)

	// PutDevicesIdentifierIdentifierClearToken request
	PutDevicesIdentifierIdentifierClearTokenWithResponse(ctx context.Context, identifier string, reqEditors ...RequestEditorFn) (*PutDevicesIdentifierIdentifierClearTokenResponse, error)

	// PostDevicesIdentifierIdentifierToken request  with any body
	PostDevicesIdentifierIdentifierTokenWithBodyWithResponse(ctx context.Context, identifier string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDevicesIdentifierIdentifierTokenResponse, error)

	PostDevicesIdentifierIdentifierTokenWithResponse(ctx context.Context, identifier string, body PostDevicesIdentifierIdentifierTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDevicesIdentifierIdentifierTokenResponse, error)

	// PutDevicesIdentifierIdentifierToken request  with any body
	PutDevicesIdentifierIdentifierTokenWithBodyWithResponse(ctx context.Context, identifier string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDevicesIdentifierIdentifierTokenResponse, error)

	PutDevicesIdentifierIdentifierTokenWithResponse(ctx context.Context, identifier string, body PutDevicesIdentifierIdentifierTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDevicesIdentifierIdentifierTokenResponse, error)

	// DeleteDevicesId request
	DeleteDevicesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteDevicesIdResponse, error)

	// GetDevicesId request
	GetDevicesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetDevicesIdResponse, error)

	// PostDevicesId request  with any body
	PostDevicesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDevicesIdResponse, error)

	PostDevicesIdWithResponse(ctx context.Context, id string, body PostDevicesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDevicesIdResponse, error)

	// PutDevicesId request  with any body
	PutDevicesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDevicesIdResponse, error)

	PutDevicesIdWithResponse(ctx context.Context, id string, body PutDevicesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDevicesIdResponse, error)

	// PostDevicesIdDelete request
	PostDevicesIdDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostDevicesIdDeleteResponse, error)

	// GetEmergencyAccessGranted request
	GetEmergencyAccessGrantedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEmergencyAccessGrantedResponse, error)

	// PostEmergencyAccessInvite request  with any body
	PostEmergencyAccessInviteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEmergencyAccessInviteResponse, error)

	PostEmergencyAccessInviteWithResponse(ctx context.Context, body PostEmergencyAccessInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEmergencyAccessInviteResponse, error)

	// GetEmergencyAccessTrusted request
	GetEmergencyAccessTrustedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEmergencyAccessTrustedResponse, error)

	// DeleteEmergencyAccessId request
	DeleteEmergencyAccessIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteEmergencyAccessIdResponse, error)

	// GetEmergencyAccessId request
	GetEmergencyAccessIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetEmergencyAccessIdResponse, error)

	// PostEmergencyAccessId request  with any body
	PostEmergencyAccessIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEmergencyAccessIdResponse, error)

	PostEmergencyAccessIdWithResponse(ctx context.Context, id string, body PostEmergencyAccessIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEmergencyAccessIdResponse, error)

	// PutEmergencyAccessId request  with any body
	PutEmergencyAccessIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutEmergencyAccessIdResponse, error)

	PutEmergencyAccessIdWithResponse(ctx context.Context, id string, body PutEmergencyAccessIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutEmergencyAccessIdResponse, error)

	// PostEmergencyAccessIdAccept request  with any body
	PostEmergencyAccessIdAcceptWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEmergencyAccessIdAcceptResponse, error)

	PostEmergencyAccessIdAcceptWithResponse(ctx context.Context, id string, body PostEmergencyAccessIdAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEmergencyAccessIdAcceptResponse, error)

	// PostEmergencyAccessIdApprove request
	PostEmergencyAccessIdApproveWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostEmergencyAccessIdApproveResponse, error)

	// PostEmergencyAccessIdConfirm request  with any body
	PostEmergencyAccessIdConfirmWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEmergencyAccessIdConfirmResponse, error)

	PostEmergencyAccessIdConfirmWithResponse(ctx context.Context, id string, body PostEmergencyAccessIdConfirmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEmergencyAccessIdConfirmResponse, error)

	// PostEmergencyAccessIdDelete request
	PostEmergencyAccessIdDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostEmergencyAccessIdDeleteResponse, error)

	// PostEmergencyAccessIdInitiate request
	PostEmergencyAccessIdInitiateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostEmergencyAccessIdInitiateResponse, error)

	// PostEmergencyAccessIdPassword request  with any body
	PostEmergencyAccessIdPasswordWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEmergencyAccessIdPasswordResponse, error)

	PostEmergencyAccessIdPasswordWithResponse(ctx context.Context, id string, body PostEmergencyAccessIdPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEmergencyAccessIdPasswordResponse, error)

	// GetEmergencyAccessIdPolicies request
	GetEmergencyAccessIdPoliciesWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetEmergencyAccessIdPoliciesResponse, error)

	// PostEmergencyAccessIdReinvite request
	PostEmergencyAccessIdReinviteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostEmergencyAccessIdReinviteResponse, error)

	// PostEmergencyAccessIdReject request
	PostEmergencyAccessIdRejectWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostEmergencyAccessIdRejectResponse, error)

	// PostEmergencyAccessIdTakeover request
	PostEmergencyAccessIdTakeoverWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostEmergencyAccessIdTakeoverResponse, error)

	// PostEmergencyAccessIdView request
	PostEmergencyAccessIdViewWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostEmergencyAccessIdViewResponse, error)

	// GetEmergencyAccessIdCipherIdAttachmentAttachmentId request
	GetEmergencyAccessIdCipherIdAttachmentAttachmentIdWithResponse(ctx context.Context, id string, cipherId string, attachmentId string, reqEditors ...RequestEditorFn) (*GetEmergencyAccessIdCipherIdAttachmentAttachmentIdResponse, error)

	// GetEvents request
	GetEventsWithResponse(ctx context.Context, params *GetEventsParams, reqEditors ...RequestEditorFn) (*GetEventsResponse, error)

	// GetFolders request
	GetFoldersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFoldersResponse, error)

	// PostFolders request  with any body
	PostFoldersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFoldersResponse, error)

	PostFoldersWithResponse(ctx context.Context, body PostFoldersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFoldersResponse, error)

	// DeleteFoldersId request
	DeleteFoldersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFoldersIdResponse, error)

	// GetFoldersId request
	GetFoldersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFoldersIdResponse, error)

	// PostFoldersId request  with any body
	PostFoldersIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFoldersIdResponse, error)

	PostFoldersIdWithResponse(ctx context.Context, id string, body PostFoldersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFoldersIdResponse, error)

	// PutFoldersId request  with any body
	PutFoldersIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFoldersIdResponse, error)

	PutFoldersIdWithResponse(ctx context.Context, id string, body PutFoldersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFoldersIdResponse, error)

	// PostFoldersIdDelete request
	PostFoldersIdDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostFoldersIdDeleteResponse, error)

	// GetHibpBreach request
	GetHibpBreachWithResponse(ctx context.Context, params *GetHibpBreachParams, reqEditors ...RequestEditorFn) (*GetHibpBreachResponse, error)

	// PostInstallations request  with any body
	PostInstallationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstallationsResponse, error)

	PostInstallationsWithResponse(ctx context.Context, body PostInstallationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstallationsResponse, error)

	// GetInstallationsId request
	GetInstallationsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetInstallationsIdResponse, error)

	// GetIp request
	GetIpWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetIpResponse, error)

	// GetLicensesOrganizationId request
	GetLicensesOrganizationIdWithResponse(ctx context.Context, id string, params *GetLicensesOrganizationIdParams, reqEditors ...RequestEditorFn) (*GetLicensesOrganizationIdResponse, error)

	// GetLicensesUserId request
	GetLicensesUserIdWithResponse(ctx context.Context, id string, params *GetLicensesUserIdParams, reqEditors ...RequestEditorFn) (*GetLicensesUserIdResponse, error)

	// GetNow request
	GetNowWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNowResponse, error)

	// GetOrganizations request
	GetOrganizationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOrganizationsResponse, error)

	// PostOrganizations request  with any body
	PostOrganizationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsResponse, error)

	PostOrganizationsWithResponse(ctx context.Context, body PostOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsResponse, error)

	// PostOrganizationsLicense request  with any body
	PostOrganizationsLicenseWithBodyWithResponse(ctx context.Context, params *PostOrganizationsLicenseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsLicenseResponse, error)

	// DeleteOrganizationsId request  with any body
	DeleteOrganizationsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteOrganizationsIdResponse, error)

	DeleteOrganizationsIdWithResponse(ctx context.Context, id string, body DeleteOrganizationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteOrganizationsIdResponse, error)

	// GetOrganizationsId request
	GetOrganizationsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetOrganizationsIdResponse, error)

	// PostOrganizationsId request  with any body
	PostOrganizationsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsIdResponse, error)

	PostOrganizationsIdWithResponse(ctx context.Context, id string, body PostOrganizationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsIdResponse, error)

	// PutOrganizationsId request  with any body
	PutOrganizationsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrganizationsIdResponse, error)

	PutOrganizationsIdWithResponse(ctx context.Context, id string, body PutOrganizationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsIdResponse, error)

	// PostOrganizationsIdApiKey request  with any body
	PostOrganizationsIdApiKeyWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsIdApiKeyResponse, error)

	PostOrganizationsIdApiKeyWithResponse(ctx context.Context, id string, body PostOrganizationsIdApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsIdApiKeyResponse, error)

	// GetOrganizationsIdBilling request
	GetOrganizationsIdBillingWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetOrganizationsIdBillingResponse, error)

	// PostOrganizationsIdCancel request
	PostOrganizationsIdCancelWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostOrganizationsIdCancelResponse, error)

	// PostOrganizationsIdDelete request  with any body
	PostOrganizationsIdDeleteWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsIdDeleteResponse, error)

	PostOrganizationsIdDeleteWithResponse(ctx context.Context, id string, body PostOrganizationsIdDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsIdDeleteResponse, error)

	// GetOrganizationsIdEvents request
	GetOrganizationsIdEventsWithResponse(ctx context.Context, id string, params *GetOrganizationsIdEventsParams, reqEditors ...RequestEditorFn) (*GetOrganizationsIdEventsResponse, error)

	// PostOrganizationsIdImport request  with any body
	PostOrganizationsIdImportWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsIdImportResponse, error)

	PostOrganizationsIdImportWithResponse(ctx context.Context, id string, body PostOrganizationsIdImportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsIdImportResponse, error)

	// GetOrganizationsIdKeys request
	GetOrganizationsIdKeysWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetOrganizationsIdKeysResponse, error)

	// PostOrganizationsIdKeys request  with any body
	PostOrganizationsIdKeysWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsIdKeysResponse, error)

	PostOrganizationsIdKeysWithResponse(ctx context.Context, id string, body PostOrganizationsIdKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsIdKeysResponse, error)

	// PostOrganizationsIdLeave request
	PostOrganizationsIdLeaveWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostOrganizationsIdLeaveResponse, error)

	// GetOrganizationsIdLicense request
	GetOrganizationsIdLicenseWithResponse(ctx context.Context, id string, params *GetOrganizationsIdLicenseParams, reqEditors ...RequestEditorFn) (*GetOrganizationsIdLicenseResponse, error)

	// PostOrganizationsIdLicense request  with any body
	PostOrganizationsIdLicenseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsIdLicenseResponse, error)

	// PostOrganizationsIdPayment request  with any body
	PostOrganizationsIdPaymentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsIdPaymentResponse, error)

	PostOrganizationsIdPaymentWithResponse(ctx context.Context, id string, body PostOrganizationsIdPaymentJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsIdPaymentResponse, error)

	// PostOrganizationsIdReinstate request
	PostOrganizationsIdReinstateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostOrganizationsIdReinstateResponse, error)

	// PostOrganizationsIdRotateApiKey request  with any body
	PostOrganizationsIdRotateApiKeyWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsIdRotateApiKeyResponse, error)

	PostOrganizationsIdRotateApiKeyWithResponse(ctx context.Context, id string, body PostOrganizationsIdRotateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsIdRotateApiKeyResponse, error)

	// PostOrganizationsIdSeat request  with any body
	PostOrganizationsIdSeatWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsIdSeatResponse, error)

	PostOrganizationsIdSeatWithResponse(ctx context.Context, id string, body PostOrganizationsIdSeatJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsIdSeatResponse, error)

	// PostOrganizationsIdStorage request  with any body
	PostOrganizationsIdStorageWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsIdStorageResponse, error)

	PostOrganizationsIdStorageWithResponse(ctx context.Context, id string, body PostOrganizationsIdStorageJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsIdStorageResponse, error)

	// GetOrganizationsIdSubscription request
	GetOrganizationsIdSubscriptionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetOrganizationsIdSubscriptionResponse, error)

	// GetOrganizationsIdTax request
	GetOrganizationsIdTaxWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetOrganizationsIdTaxResponse, error)

	// PutOrganizationsIdTax request  with any body
	PutOrganizationsIdTaxWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrganizationsIdTaxResponse, error)

	PutOrganizationsIdTaxWithResponse(ctx context.Context, id string, body PutOrganizationsIdTaxJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsIdTaxResponse, error)

	// GetOrganizationsIdTwoFactor request
	GetOrganizationsIdTwoFactorWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetOrganizationsIdTwoFactorResponse, error)

	// PostOrganizationsIdTwoFactorDisable request  with any body
	PostOrganizationsIdTwoFactorDisableWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsIdTwoFactorDisableResponse, error)

	PostOrganizationsIdTwoFactorDisableWithResponse(ctx context.Context, id string, body PostOrganizationsIdTwoFactorDisableJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsIdTwoFactorDisableResponse, error)

	// PutOrganizationsIdTwoFactorDisable request  with any body
	PutOrganizationsIdTwoFactorDisableWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrganizationsIdTwoFactorDisableResponse, error)

	PutOrganizationsIdTwoFactorDisableWithResponse(ctx context.Context, id string, body PutOrganizationsIdTwoFactorDisableJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsIdTwoFactorDisableResponse, error)

	// PostOrganizationsIdTwoFactorDuo request  with any body
	PostOrganizationsIdTwoFactorDuoWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsIdTwoFactorDuoResponse, error)

	PostOrganizationsIdTwoFactorDuoWithResponse(ctx context.Context, id string, body PostOrganizationsIdTwoFactorDuoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsIdTwoFactorDuoResponse, error)

	// PutOrganizationsIdTwoFactorDuo request  with any body
	PutOrganizationsIdTwoFactorDuoWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrganizationsIdTwoFactorDuoResponse, error)

	PutOrganizationsIdTwoFactorDuoWithResponse(ctx context.Context, id string, body PutOrganizationsIdTwoFactorDuoJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsIdTwoFactorDuoResponse, error)

	// PostOrganizationsIdTwoFactorGetDuo request  with any body
	PostOrganizationsIdTwoFactorGetDuoWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsIdTwoFactorGetDuoResponse, error)

	PostOrganizationsIdTwoFactorGetDuoWithResponse(ctx context.Context, id string, body PostOrganizationsIdTwoFactorGetDuoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsIdTwoFactorGetDuoResponse, error)

	// PostOrganizationsIdUpgrade request  with any body
	PostOrganizationsIdUpgradeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsIdUpgradeResponse, error)

	PostOrganizationsIdUpgradeWithResponse(ctx context.Context, id string, body PostOrganizationsIdUpgradeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsIdUpgradeResponse, error)

	// PostOrganizationsIdVerifyBank request  with any body
	PostOrganizationsIdVerifyBankWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsIdVerifyBankResponse, error)

	PostOrganizationsIdVerifyBankWithResponse(ctx context.Context, id string, body PostOrganizationsIdVerifyBankJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsIdVerifyBankResponse, error)

	// GetOrganizationsOrgIdCollections request
	GetOrganizationsOrgIdCollectionsWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrganizationsOrgIdCollectionsResponse, error)

	// PostOrganizationsOrgIdCollections request  with any body
	PostOrganizationsOrgIdCollectionsWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdCollectionsResponse, error)

	PostOrganizationsOrgIdCollectionsWithResponse(ctx context.Context, orgId string, body PostOrganizationsOrgIdCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdCollectionsResponse, error)

	// DeleteOrganizationsOrgIdCollectionsId request
	DeleteOrganizationsOrgIdCollectionsIdWithResponse(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*DeleteOrganizationsOrgIdCollectionsIdResponse, error)

	// GetOrganizationsOrgIdCollectionsId request
	GetOrganizationsOrgIdCollectionsIdWithResponse(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*GetOrganizationsOrgIdCollectionsIdResponse, error)

	// PostOrganizationsOrgIdCollectionsId request  with any body
	PostOrganizationsOrgIdCollectionsIdWithBodyWithResponse(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdCollectionsIdResponse, error)

	PostOrganizationsOrgIdCollectionsIdWithResponse(ctx context.Context, orgId string, id string, body PostOrganizationsOrgIdCollectionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdCollectionsIdResponse, error)

	// PutOrganizationsOrgIdCollectionsId request  with any body
	PutOrganizationsOrgIdCollectionsIdWithBodyWithResponse(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrganizationsOrgIdCollectionsIdResponse, error)

	PutOrganizationsOrgIdCollectionsIdWithResponse(ctx context.Context, orgId string, id string, body PutOrganizationsOrgIdCollectionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsOrgIdCollectionsIdResponse, error)

	// PostOrganizationsOrgIdCollectionsIdDelete request
	PostOrganizationsOrgIdCollectionsIdDeleteWithResponse(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdCollectionsIdDeleteResponse, error)

	// PostOrganizationsOrgIdCollectionsIdDeleteUserOrgUserId request
	PostOrganizationsOrgIdCollectionsIdDeleteUserOrgUserIdWithResponse(ctx context.Context, orgId string, id string, orgUserId string, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdCollectionsIdDeleteUserOrgUserIdResponse, error)

	// GetOrganizationsOrgIdCollectionsIdDetails request
	GetOrganizationsOrgIdCollectionsIdDetailsWithResponse(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*GetOrganizationsOrgIdCollectionsIdDetailsResponse, error)

	// DeleteOrganizationsOrgIdCollectionsIdUserOrgUserId request
	DeleteOrganizationsOrgIdCollectionsIdUserOrgUserIdWithResponse(ctx context.Context, orgId string, id string, orgUserId string, reqEditors ...RequestEditorFn) (*DeleteOrganizationsOrgIdCollectionsIdUserOrgUserIdResponse, error)

	// GetOrganizationsOrgIdCollectionsIdUsers request
	GetOrganizationsOrgIdCollectionsIdUsersWithResponse(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*GetOrganizationsOrgIdCollectionsIdUsersResponse, error)

	// PutOrganizationsOrgIdCollectionsIdUsers request  with any body
	PutOrganizationsOrgIdCollectionsIdUsersWithBodyWithResponse(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrganizationsOrgIdCollectionsIdUsersResponse, error)

	PutOrganizationsOrgIdCollectionsIdUsersWithResponse(ctx context.Context, orgId string, id string, body PutOrganizationsOrgIdCollectionsIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsOrgIdCollectionsIdUsersResponse, error)

	// GetOrganizationsOrgIdGroups request
	GetOrganizationsOrgIdGroupsWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrganizationsOrgIdGroupsResponse, error)

	// PostOrganizationsOrgIdGroups request  with any body
	PostOrganizationsOrgIdGroupsWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdGroupsResponse, error)

	PostOrganizationsOrgIdGroupsWithResponse(ctx context.Context, orgId string, body PostOrganizationsOrgIdGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdGroupsResponse, error)

	// DeleteOrganizationsOrgIdGroupsId request
	DeleteOrganizationsOrgIdGroupsIdWithResponse(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*DeleteOrganizationsOrgIdGroupsIdResponse, error)

	// GetOrganizationsOrgIdGroupsId request
	GetOrganizationsOrgIdGroupsIdWithResponse(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*GetOrganizationsOrgIdGroupsIdResponse, error)

	// PostOrganizationsOrgIdGroupsId request  with any body
	PostOrganizationsOrgIdGroupsIdWithBodyWithResponse(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdGroupsIdResponse, error)

	PostOrganizationsOrgIdGroupsIdWithResponse(ctx context.Context, orgId string, id string, body PostOrganizationsOrgIdGroupsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdGroupsIdResponse, error)

	// PutOrganizationsOrgIdGroupsId request  with any body
	PutOrganizationsOrgIdGroupsIdWithBodyWithResponse(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrganizationsOrgIdGroupsIdResponse, error)

	PutOrganizationsOrgIdGroupsIdWithResponse(ctx context.Context, orgId string, id string, body PutOrganizationsOrgIdGroupsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsOrgIdGroupsIdResponse, error)

	// PostOrganizationsOrgIdGroupsIdDelete request
	PostOrganizationsOrgIdGroupsIdDeleteWithResponse(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdGroupsIdDeleteResponse, error)

	// PostOrganizationsOrgIdGroupsIdDeleteUserOrgUserId request
	PostOrganizationsOrgIdGroupsIdDeleteUserOrgUserIdWithResponse(ctx context.Context, orgId string, id string, orgUserId string, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdGroupsIdDeleteUserOrgUserIdResponse, error)

	// GetOrganizationsOrgIdGroupsIdDetails request
	GetOrganizationsOrgIdGroupsIdDetailsWithResponse(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*GetOrganizationsOrgIdGroupsIdDetailsResponse, error)

	// DeleteOrganizationsOrgIdGroupsIdUserOrgUserId request
	DeleteOrganizationsOrgIdGroupsIdUserOrgUserIdWithResponse(ctx context.Context, orgId string, id string, orgUserId string, reqEditors ...RequestEditorFn) (*DeleteOrganizationsOrgIdGroupsIdUserOrgUserIdResponse, error)

	// GetOrganizationsOrgIdGroupsIdUsers request
	GetOrganizationsOrgIdGroupsIdUsersWithResponse(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*GetOrganizationsOrgIdGroupsIdUsersResponse, error)

	// PutOrganizationsOrgIdGroupsIdUsers request  with any body
	PutOrganizationsOrgIdGroupsIdUsersWithBodyWithResponse(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrganizationsOrgIdGroupsIdUsersResponse, error)

	PutOrganizationsOrgIdGroupsIdUsersWithResponse(ctx context.Context, orgId string, id string, body PutOrganizationsOrgIdGroupsIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsOrgIdGroupsIdUsersResponse, error)

	// GetOrganizationsOrgIdPolicies request
	GetOrganizationsOrgIdPoliciesWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrganizationsOrgIdPoliciesResponse, error)

	// GetOrganizationsOrgIdPoliciesToken request
	GetOrganizationsOrgIdPoliciesTokenWithResponse(ctx context.Context, orgId string, params *GetOrganizationsOrgIdPoliciesTokenParams, reqEditors ...RequestEditorFn) (*GetOrganizationsOrgIdPoliciesTokenResponse, error)

	// GetOrganizationsOrgIdPoliciesType request
	GetOrganizationsOrgIdPoliciesTypeWithResponse(ctx context.Context, orgId string, pType int32, reqEditors ...RequestEditorFn) (*GetOrganizationsOrgIdPoliciesTypeResponse, error)

	// PutOrganizationsOrgIdPoliciesType request  with any body
	PutOrganizationsOrgIdPoliciesTypeWithBodyWithResponse(ctx context.Context, orgId string, pType int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrganizationsOrgIdPoliciesTypeResponse, error)

	PutOrganizationsOrgIdPoliciesTypeWithResponse(ctx context.Context, orgId string, pType int32, body PutOrganizationsOrgIdPoliciesTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsOrgIdPoliciesTypeResponse, error)

	// DeleteOrganizationsOrgIdUsers request  with any body
	DeleteOrganizationsOrgIdUsersWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteOrganizationsOrgIdUsersResponse, error)

	DeleteOrganizationsOrgIdUsersWithResponse(ctx context.Context, orgId string, body DeleteOrganizationsOrgIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteOrganizationsOrgIdUsersResponse, error)

	// GetOrganizationsOrgIdUsers request
	GetOrganizationsOrgIdUsersWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrganizationsOrgIdUsersResponse, error)

	// PostOrganizationsOrgIdUsersConfirm request  with any body
	PostOrganizationsOrgIdUsersConfirmWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersConfirmResponse, error)

	PostOrganizationsOrgIdUsersConfirmWithResponse(ctx context.Context, orgId string, body PostOrganizationsOrgIdUsersConfirmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersConfirmResponse, error)

	// PostOrganizationsOrgIdUsersDelete request  with any body
	PostOrganizationsOrgIdUsersDeleteWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersDeleteResponse, error)

	PostOrganizationsOrgIdUsersDeleteWithResponse(ctx context.Context, orgId string, body PostOrganizationsOrgIdUsersDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersDeleteResponse, error)

	// PostOrganizationsOrgIdUsersInvite request  with any body
	PostOrganizationsOrgIdUsersInviteWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersInviteResponse, error)

	PostOrganizationsOrgIdUsersInviteWithResponse(ctx context.Context, orgId string, body PostOrganizationsOrgIdUsersInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersInviteResponse, error)

	// PostOrganizationsOrgIdUsersPublicKeys request  with any body
	PostOrganizationsOrgIdUsersPublicKeysWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersPublicKeysResponse, error)

	PostOrganizationsOrgIdUsersPublicKeysWithResponse(ctx context.Context, orgId string, body PostOrganizationsOrgIdUsersPublicKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersPublicKeysResponse, error)

	// PostOrganizationsOrgIdUsersReinvite request  with any body
	PostOrganizationsOrgIdUsersReinviteWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersReinviteResponse, error)

	PostOrganizationsOrgIdUsersReinviteWithResponse(ctx context.Context, orgId string, body PostOrganizationsOrgIdUsersReinviteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersReinviteResponse, error)

	// DeleteOrganizationsOrgIdUsersId request
	DeleteOrganizationsOrgIdUsersIdWithResponse(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*DeleteOrganizationsOrgIdUsersIdResponse, error)

	// GetOrganizationsOrgIdUsersId request
	GetOrganizationsOrgIdUsersIdWithResponse(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*GetOrganizationsOrgIdUsersIdResponse, error)

	// PostOrganizationsOrgIdUsersId request  with any body
	PostOrganizationsOrgIdUsersIdWithBodyWithResponse(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersIdResponse, error)

	PostOrganizationsOrgIdUsersIdWithResponse(ctx context.Context, orgId string, id string, body PostOrganizationsOrgIdUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersIdResponse, error)

	// PutOrganizationsOrgIdUsersId request  with any body
	PutOrganizationsOrgIdUsersIdWithBodyWithResponse(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrganizationsOrgIdUsersIdResponse, error)

	PutOrganizationsOrgIdUsersIdWithResponse(ctx context.Context, orgId string, id string, body PutOrganizationsOrgIdUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsOrgIdUsersIdResponse, error)

	// PostOrganizationsOrgIdUsersIdAccept request  with any body
	PostOrganizationsOrgIdUsersIdAcceptWithBodyWithResponse(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersIdAcceptResponse, error)

	PostOrganizationsOrgIdUsersIdAcceptWithResponse(ctx context.Context, orgId string, id string, body PostOrganizationsOrgIdUsersIdAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersIdAcceptResponse, error)

	// PostOrganizationsOrgIdUsersIdConfirm request  with any body
	PostOrganizationsOrgIdUsersIdConfirmWithBodyWithResponse(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersIdConfirmResponse, error)

	PostOrganizationsOrgIdUsersIdConfirmWithResponse(ctx context.Context, orgId string, id string, body PostOrganizationsOrgIdUsersIdConfirmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersIdConfirmResponse, error)

	// PostOrganizationsOrgIdUsersIdDelete request
	PostOrganizationsOrgIdUsersIdDeleteWithResponse(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersIdDeleteResponse, error)

	// GetOrganizationsOrgIdUsersIdEvents request
	GetOrganizationsOrgIdUsersIdEventsWithResponse(ctx context.Context, orgId string, id string, params *GetOrganizationsOrgIdUsersIdEventsParams, reqEditors ...RequestEditorFn) (*GetOrganizationsOrgIdUsersIdEventsResponse, error)

	// GetOrganizationsOrgIdUsersIdGroups request
	GetOrganizationsOrgIdUsersIdGroupsWithResponse(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*GetOrganizationsOrgIdUsersIdGroupsResponse, error)

	// PostOrganizationsOrgIdUsersIdGroups request  with any body
	PostOrganizationsOrgIdUsersIdGroupsWithBodyWithResponse(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersIdGroupsResponse, error)

	PostOrganizationsOrgIdUsersIdGroupsWithResponse(ctx context.Context, orgId string, id string, body PostOrganizationsOrgIdUsersIdGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersIdGroupsResponse, error)

	// PutOrganizationsOrgIdUsersIdGroups request  with any body
	PutOrganizationsOrgIdUsersIdGroupsWithBodyWithResponse(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrganizationsOrgIdUsersIdGroupsResponse, error)

	PutOrganizationsOrgIdUsersIdGroupsWithResponse(ctx context.Context, orgId string, id string, body PutOrganizationsOrgIdUsersIdGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsOrgIdUsersIdGroupsResponse, error)

	// PostOrganizationsOrgIdUsersIdReinvite request
	PostOrganizationsOrgIdUsersIdReinviteWithResponse(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersIdReinviteResponse, error)

	// PutOrganizationsOrgIdUsersIdResetPassword request  with any body
	PutOrganizationsOrgIdUsersIdResetPasswordWithBodyWithResponse(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrganizationsOrgIdUsersIdResetPasswordResponse, error)

	PutOrganizationsOrgIdUsersIdResetPasswordWithResponse(ctx context.Context, orgId string, id string, body PutOrganizationsOrgIdUsersIdResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsOrgIdUsersIdResetPasswordResponse, error)

	// GetOrganizationsOrgIdUsersIdResetPasswordDetails request
	GetOrganizationsOrgIdUsersIdResetPasswordDetailsWithResponse(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*GetOrganizationsOrgIdUsersIdResetPasswordDetailsResponse, error)

	// PutOrganizationsOrgIdUsersUserIdResetPasswordEnrollment request  with any body
	PutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentWithBodyWithResponse(ctx context.Context, orgId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentResponse, error)

	PutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentWithResponse(ctx context.Context, orgId string, userId string, body PutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentResponse, error)

	// GetPlans request
	GetPlansWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPlansResponse, error)

	// GetPlansSalesTaxRates request
	GetPlansSalesTaxRatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPlansSalesTaxRatesResponse, error)

	// PutPushAddOrganization request  with any body
	PutPushAddOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPushAddOrganizationResponse, error)

	PutPushAddOrganizationWithResponse(ctx context.Context, body PutPushAddOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPushAddOrganizationResponse, error)

	// PutPushDeleteOrganization request  with any body
	PutPushDeleteOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPushDeleteOrganizationResponse, error)

	PutPushDeleteOrganizationWithResponse(ctx context.Context, body PutPushDeleteOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPushDeleteOrganizationResponse, error)

	// PostPushRegister request  with any body
	PostPushRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPushRegisterResponse, error)

	PostPushRegisterWithResponse(ctx context.Context, body PostPushRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPushRegisterResponse, error)

	// PostPushSend request  with any body
	PostPushSendWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPushSendResponse, error)

	PostPushSendWithResponse(ctx context.Context, body PostPushSendJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPushSendResponse, error)

	// DeletePushId request
	DeletePushIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePushIdResponse, error)

	// GetSends request
	GetSendsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSendsResponse, error)

	// PostSends request  with any body
	PostSendsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendsResponse, error)

	PostSendsWithResponse(ctx context.Context, body PostSendsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSendsResponse, error)

	// PostSendsAccessId request  with any body
	PostSendsAccessIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendsAccessIdResponse, error)

	PostSendsAccessIdWithResponse(ctx context.Context, id string, body PostSendsAccessIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSendsAccessIdResponse, error)

	// PostSendsFile request
	PostSendsFileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostSendsFileResponse, error)

	// PostSendsFileV2 request  with any body
	PostSendsFileV2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendsFileV2Response, error)

	PostSendsFileV2WithResponse(ctx context.Context, body PostSendsFileV2JSONRequestBody, reqEditors ...RequestEditorFn) (*PostSendsFileV2Response, error)

	// PostSendsFileValidateAzure request
	PostSendsFileValidateAzureWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostSendsFileValidateAzureResponse, error)

	// PostSendsEncodedSendIdAccessFileFileId request  with any body
	PostSendsEncodedSendIdAccessFileFileIdWithBodyWithResponse(ctx context.Context, encodedSendId string, fileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendsEncodedSendIdAccessFileFileIdResponse, error)

	PostSendsEncodedSendIdAccessFileFileIdWithResponse(ctx context.Context, encodedSendId string, fileId string, body PostSendsEncodedSendIdAccessFileFileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSendsEncodedSendIdAccessFileFileIdResponse, error)

	// DeleteSendsId request
	DeleteSendsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteSendsIdResponse, error)

	// GetSendsId request
	GetSendsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSendsIdResponse, error)

	// PutSendsId request  with any body
	PutSendsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSendsIdResponse, error)

	PutSendsIdWithResponse(ctx context.Context, id string, body PutSendsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSendsIdResponse, error)

	// GetSendsIdFileFileId request
	GetSendsIdFileFileIdWithResponse(ctx context.Context, id string, fileId string, reqEditors ...RequestEditorFn) (*GetSendsIdFileFileIdResponse, error)

	// PostSendsIdFileFileId request
	PostSendsIdFileFileIdWithResponse(ctx context.Context, id string, fileId string, reqEditors ...RequestEditorFn) (*PostSendsIdFileFileIdResponse, error)

	// PutSendsIdRemovePassword request
	PutSendsIdRemovePasswordWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PutSendsIdRemovePasswordResponse, error)

	// GetSettingsDomains request
	GetSettingsDomainsWithResponse(ctx context.Context, params *GetSettingsDomainsParams, reqEditors ...RequestEditorFn) (*GetSettingsDomainsResponse, error)

	// PostSettingsDomains request  with any body
	PostSettingsDomainsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSettingsDomainsResponse, error)

	PostSettingsDomainsWithResponse(ctx context.Context, body PostSettingsDomainsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSettingsDomainsResponse, error)

	// PutSettingsDomains request  with any body
	PutSettingsDomainsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDomainsResponse, error)

	PutSettingsDomainsWithResponse(ctx context.Context, body PutSettingsDomainsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDomainsResponse, error)

	// PostSetupPayment request
	PostSetupPaymentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostSetupPaymentResponse, error)

	// GetSync request
	GetSyncWithResponse(ctx context.Context, params *GetSyncParams, reqEditors ...RequestEditorFn) (*GetSyncResponse, error)

	// GetTwoFactor request
	GetTwoFactorWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTwoFactorResponse, error)

	// PostTwoFactorAuthenticator request  with any body
	PostTwoFactorAuthenticatorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTwoFactorAuthenticatorResponse, error)

	PostTwoFactorAuthenticatorWithResponse(ctx context.Context, body PostTwoFactorAuthenticatorJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTwoFactorAuthenticatorResponse, error)

	// PutTwoFactorAuthenticator request  with any body
	PutTwoFactorAuthenticatorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTwoFactorAuthenticatorResponse, error)

	PutTwoFactorAuthenticatorWithResponse(ctx context.Context, body PutTwoFactorAuthenticatorJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTwoFactorAuthenticatorResponse, error)

	// PostTwoFactorDisable request  with any body
	PostTwoFactorDisableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTwoFactorDisableResponse, error)

	PostTwoFactorDisableWithResponse(ctx context.Context, body PostTwoFactorDisableJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTwoFactorDisableResponse, error)

	// PutTwoFactorDisable request  with any body
	PutTwoFactorDisableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTwoFactorDisableResponse, error)

	PutTwoFactorDisableWithResponse(ctx context.Context, body PutTwoFactorDisableJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTwoFactorDisableResponse, error)

	// PostTwoFactorDuo request  with any body
	PostTwoFactorDuoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTwoFactorDuoResponse, error)

	PostTwoFactorDuoWithResponse(ctx context.Context, body PostTwoFactorDuoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTwoFactorDuoResponse, error)

	// PutTwoFactorDuo request  with any body
	PutTwoFactorDuoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTwoFactorDuoResponse, error)

	PutTwoFactorDuoWithResponse(ctx context.Context, body PutTwoFactorDuoJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTwoFactorDuoResponse, error)

	// PostTwoFactorEmail request  with any body
	PostTwoFactorEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTwoFactorEmailResponse, error)

	PostTwoFactorEmailWithResponse(ctx context.Context, body PostTwoFactorEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTwoFactorEmailResponse, error)

	// PutTwoFactorEmail request  with any body
	PutTwoFactorEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTwoFactorEmailResponse, error)

	PutTwoFactorEmailWithResponse(ctx context.Context, body PutTwoFactorEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTwoFactorEmailResponse, error)

	// PostTwoFactorGetAuthenticator request  with any body
	PostTwoFactorGetAuthenticatorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTwoFactorGetAuthenticatorResponse, error)

	PostTwoFactorGetAuthenticatorWithResponse(ctx context.Context, body PostTwoFactorGetAuthenticatorJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTwoFactorGetAuthenticatorResponse, error)

	// PostTwoFactorGetDuo request  with any body
	PostTwoFactorGetDuoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTwoFactorGetDuoResponse, error)

	PostTwoFactorGetDuoWithResponse(ctx context.Context, body PostTwoFactorGetDuoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTwoFactorGetDuoResponse, error)

	// PostTwoFactorGetEmail request  with any body
	PostTwoFactorGetEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTwoFactorGetEmailResponse, error)

	PostTwoFactorGetEmailWithResponse(ctx context.Context, body PostTwoFactorGetEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTwoFactorGetEmailResponse, error)

	// PostTwoFactorGetRecover request  with any body
	PostTwoFactorGetRecoverWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTwoFactorGetRecoverResponse, error)

	PostTwoFactorGetRecoverWithResponse(ctx context.Context, body PostTwoFactorGetRecoverJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTwoFactorGetRecoverResponse, error)

	// PostTwoFactorGetWebauthn request  with any body
	PostTwoFactorGetWebauthnWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTwoFactorGetWebauthnResponse, error)

	PostTwoFactorGetWebauthnWithResponse(ctx context.Context, body PostTwoFactorGetWebauthnJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTwoFactorGetWebauthnResponse, error)

	// PostTwoFactorGetWebauthnChallenge request  with any body
	PostTwoFactorGetWebauthnChallengeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTwoFactorGetWebauthnChallengeResponse, error)

	PostTwoFactorGetWebauthnChallengeWithResponse(ctx context.Context, body PostTwoFactorGetWebauthnChallengeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTwoFactorGetWebauthnChallengeResponse, error)

	// PostTwoFactorGetYubikey request  with any body
	PostTwoFactorGetYubikeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTwoFactorGetYubikeyResponse, error)

	PostTwoFactorGetYubikeyWithResponse(ctx context.Context, body PostTwoFactorGetYubikeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTwoFactorGetYubikeyResponse, error)

	// PostTwoFactorRecover request  with any body
	PostTwoFactorRecoverWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTwoFactorRecoverResponse, error)

	PostTwoFactorRecoverWithResponse(ctx context.Context, body PostTwoFactorRecoverJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTwoFactorRecoverResponse, error)

	// PostTwoFactorSendEmail request  with any body
	PostTwoFactorSendEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTwoFactorSendEmailResponse, error)

	PostTwoFactorSendEmailWithResponse(ctx context.Context, body PostTwoFactorSendEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTwoFactorSendEmailResponse, error)

	// PostTwoFactorSendEmailLogin request  with any body
	PostTwoFactorSendEmailLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTwoFactorSendEmailLoginResponse, error)

	PostTwoFactorSendEmailLoginWithResponse(ctx context.Context, body PostTwoFactorSendEmailLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTwoFactorSendEmailLoginResponse, error)

	// DeleteTwoFactorWebauthn request  with any body
	DeleteTwoFactorWebauthnWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteTwoFactorWebauthnResponse, error)

	DeleteTwoFactorWebauthnWithResponse(ctx context.Context, body DeleteTwoFactorWebauthnJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteTwoFactorWebauthnResponse, error)

	// PostTwoFactorWebauthn request  with any body
	PostTwoFactorWebauthnWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTwoFactorWebauthnResponse, error)

	PostTwoFactorWebauthnWithResponse(ctx context.Context, body PostTwoFactorWebauthnJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTwoFactorWebauthnResponse, error)

	// PutTwoFactorWebauthn request  with any body
	PutTwoFactorWebauthnWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTwoFactorWebauthnResponse, error)

	PutTwoFactorWebauthnWithResponse(ctx context.Context, body PutTwoFactorWebauthnJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTwoFactorWebauthnResponse, error)

	// PostTwoFactorYubikey request  with any body
	PostTwoFactorYubikeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTwoFactorYubikeyResponse, error)

	PostTwoFactorYubikeyWithResponse(ctx context.Context, body PostTwoFactorYubikeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTwoFactorYubikeyResponse, error)

	// PutTwoFactorYubikey request  with any body
	PutTwoFactorYubikeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTwoFactorYubikeyResponse, error)

	PutTwoFactorYubikeyWithResponse(ctx context.Context, body PutTwoFactorYubikeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTwoFactorYubikeyResponse, error)

	// GetUsersIdPublicKey request
	GetUsersIdPublicKeyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetUsersIdPublicKeyResponse, error)

	// GetVersion request
	GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error)
}

type DeleteAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAccountsApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiKeyResponseModel
}

// Status returns HTTPResponse.Status
func (r PostAccountsApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccountsApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountsBillingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingResponseModel
}

// Status returns HTTPResponse.Status
func (r GetAccountsBillingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountsBillingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAccountsCancelPremiumResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAccountsCancelPremiumResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccountsCancelPremiumResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAccountsDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAccountsDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccountsDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAccountsDeleteRecoverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAccountsDeleteRecoverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccountsDeleteRecoverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAccountsDeleteRecoverTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAccountsDeleteRecoverTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccountsDeleteRecoverTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAccountsEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAccountsEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccountsEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAccountsEmailTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAccountsEmailTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccountsEmailTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountsEnterprisePortalSigninTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetAccountsEnterprisePortalSigninTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountsEnterprisePortalSigninTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAccountsIapCheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAccountsIapCheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccountsIapCheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAccountsKdfResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAccountsKdfResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccountsKdfResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAccountsKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAccountsKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccountsKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountsKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KeysResponseModel
}

// Status returns HTTPResponse.Status
func (r GetAccountsKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountsKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAccountsKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KeysResponseModel
}

// Status returns HTTPResponse.Status
func (r PostAccountsKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccountsKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAccountsLicenseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAccountsLicenseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccountsLicenseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountsOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProfileOrganizationResponseModelListResponseModel
}

// Status returns HTTPResponse.Status
func (r GetAccountsOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountsOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAccountsPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAccountsPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccountsPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAccountsPasswordHintResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAccountsPasswordHintResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccountsPasswordHintResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAccountsPaymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAccountsPaymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccountsPaymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAccountsPreloginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PreloginResponseModel
}

// Status returns HTTPResponse.Status
func (r PostAccountsPreloginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccountsPreloginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAccountsPremiumResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaymentResponseModel
}

// Status returns HTTPResponse.Status
func (r PostAccountsPremiumResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccountsPremiumResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountsProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProfileResponseModel
}

// Status returns HTTPResponse.Status
func (r GetAccountsProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountsProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAccountsProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProfileResponseModel
}

// Status returns HTTPResponse.Status
func (r PostAccountsProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccountsProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAccountsProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProfileResponseModel
}

// Status returns HTTPResponse.Status
func (r PutAccountsProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAccountsProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAccountsRegisterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAccountsRegisterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccountsRegisterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAccountsReinstatePremiumResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAccountsReinstatePremiumResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccountsReinstatePremiumResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountsRevisionDateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *int64
}

// Status returns HTTPResponse.Status
func (r GetAccountsRevisionDateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountsRevisionDateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAccountsRotateApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiKeyResponseModel
}

// Status returns HTTPResponse.Status
func (r PostAccountsRotateApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccountsRotateApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAccountsSecurityStampResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAccountsSecurityStampResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccountsSecurityStampResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAccountsSetPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAccountsSetPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccountsSetPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountsSsoUserIdentifierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetAccountsSsoUserIdentifierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountsSsoUserIdentifierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAccountsSsoOrganizationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAccountsSsoOrganizationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAccountsSsoOrganizationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAccountsStorageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaymentResponseModel
}

// Status returns HTTPResponse.Status
func (r PostAccountsStorageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccountsStorageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountsSubscriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubscriptionResponseModel
}

// Status returns HTTPResponse.Status
func (r GetAccountsSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountsSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountsTaxResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaxInfoResponseModel
}

// Status returns HTTPResponse.Status
func (r GetAccountsTaxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountsTaxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAccountsTaxResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAccountsTaxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAccountsTaxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAccountsVerifyEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAccountsVerifyEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccountsVerifyEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAccountsVerifyEmailTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAccountsVerifyEmailTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccountsVerifyEmailTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAccountsVerifyPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAccountsVerifyPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccountsVerifyPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAliveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *time.Time
}

// Status returns HTTPResponse.Status
func (r GetAliveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAliveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBitpayInvoiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r PostBitpayInvoiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBitpayInvoiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCiphersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCiphersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCiphersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCiphersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CipherDetailsResponseModelListResponseModel
}

// Status returns HTTPResponse.Status
func (r GetCiphersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCiphersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCiphersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CipherResponseModel
}

// Status returns HTTPResponse.Status
func (r PostCiphersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCiphersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCiphersAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCiphersAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCiphersAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCiphersAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CipherMiniResponseModel
}

// Status returns HTTPResponse.Status
func (r PostCiphersAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCiphersAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCiphersAttachmentValidateAzureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCiphersAttachmentValidateAzureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCiphersAttachmentValidateAzureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCiphersCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CipherResponseModel
}

// Status returns HTTPResponse.Status
func (r PostCiphersCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCiphersCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCiphersDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCiphersDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCiphersDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCiphersDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutCiphersDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCiphersDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCiphersDeleteAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCiphersDeleteAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCiphersDeleteAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCiphersDeleteAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutCiphersDeleteAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCiphersDeleteAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCiphersImportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCiphersImportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCiphersImportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCiphersImportOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCiphersImportOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCiphersImportOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCiphersMoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCiphersMoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCiphersMoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCiphersMoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutCiphersMoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCiphersMoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCiphersOrganizationDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CipherMiniDetailsResponseModelListResponseModel
}

// Status returns HTTPResponse.Status
func (r GetCiphersOrganizationDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCiphersOrganizationDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCiphersPurgeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCiphersPurgeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCiphersPurgeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCiphersRestoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CipherResponseModelListResponseModel
}

// Status returns HTTPResponse.Status
func (r PutCiphersRestoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCiphersRestoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCiphersShareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCiphersShareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCiphersShareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCiphersShareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutCiphersShareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCiphersShareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCiphersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCiphersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCiphersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCiphersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CipherResponseModel
}

// Status returns HTTPResponse.Status
func (r GetCiphersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCiphersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCiphersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CipherResponseModel
}

// Status returns HTTPResponse.Status
func (r PostCiphersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCiphersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCiphersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CipherResponseModel
}

// Status returns HTTPResponse.Status
func (r PutCiphersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCiphersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCiphersIdAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCiphersIdAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCiphersIdAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCiphersIdAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CipherMiniResponseModel
}

// Status returns HTTPResponse.Status
func (r GetCiphersIdAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCiphersIdAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCiphersIdAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CipherMiniResponseModel
}

// Status returns HTTPResponse.Status
func (r PostCiphersIdAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCiphersIdAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCiphersIdAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CipherMiniResponseModel
}

// Status returns HTTPResponse.Status
func (r PutCiphersIdAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCiphersIdAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCiphersIdAttachmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CipherResponseModel
}

// Status returns HTTPResponse.Status
func (r PostCiphersIdAttachmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCiphersIdAttachmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCiphersIdAttachmentAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CipherMiniResponseModel
}

// Status returns HTTPResponse.Status
func (r PostCiphersIdAttachmentAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCiphersIdAttachmentAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCiphersIdAttachmentV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttachmentUploadDataResponseModel
}

// Status returns HTTPResponse.Status
func (r PostCiphersIdAttachmentV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCiphersIdAttachmentV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCiphersIdAttachmentAttachmentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCiphersIdAttachmentAttachmentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCiphersIdAttachmentAttachmentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCiphersIdAttachmentAttachmentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttachmentResponseModel
}

// Status returns HTTPResponse.Status
func (r GetCiphersIdAttachmentAttachmentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCiphersIdAttachmentAttachmentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCiphersIdAttachmentAttachmentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCiphersIdAttachmentAttachmentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCiphersIdAttachmentAttachmentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCiphersIdAttachmentAttachmentIdAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCiphersIdAttachmentAttachmentIdAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCiphersIdAttachmentAttachmentIdAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCiphersIdAttachmentAttachmentIdDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCiphersIdAttachmentAttachmentIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCiphersIdAttachmentAttachmentIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCiphersIdAttachmentAttachmentIdDeleteAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCiphersIdAttachmentAttachmentIdDeleteAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCiphersIdAttachmentAttachmentIdDeleteAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCiphersIdAttachmentAttachmentIdRenewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttachmentUploadDataResponseModel
}

// Status returns HTTPResponse.Status
func (r GetCiphersIdAttachmentAttachmentIdRenewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCiphersIdAttachmentAttachmentIdRenewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCiphersIdAttachmentAttachmentIdShareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCiphersIdAttachmentAttachmentIdShareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCiphersIdAttachmentAttachmentIdShareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCiphersIdCollectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCiphersIdCollectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCiphersIdCollectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCiphersIdCollectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutCiphersIdCollectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCiphersIdCollectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCiphersIdCollectionsAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCiphersIdCollectionsAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCiphersIdCollectionsAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCiphersIdCollectionsAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutCiphersIdCollectionsAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCiphersIdCollectionsAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCiphersIdDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCiphersIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCiphersIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCiphersIdDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutCiphersIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCiphersIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCiphersIdDeleteAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCiphersIdDeleteAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCiphersIdDeleteAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCiphersIdDeleteAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutCiphersIdDeleteAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCiphersIdDeleteAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCiphersIdDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CipherDetailsResponseModel
}

// Status returns HTTPResponse.Status
func (r GetCiphersIdDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCiphersIdDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCiphersIdEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EventResponseModelListResponseModel
}

// Status returns HTTPResponse.Status
func (r GetCiphersIdEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCiphersIdEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCiphersIdFullDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CipherDetailsResponseModel
}

// Status returns HTTPResponse.Status
func (r GetCiphersIdFullDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCiphersIdFullDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCiphersIdPartialResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCiphersIdPartialResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCiphersIdPartialResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCiphersIdPartialResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutCiphersIdPartialResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCiphersIdPartialResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCiphersIdRestoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CipherResponseModel
}

// Status returns HTTPResponse.Status
func (r PutCiphersIdRestoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCiphersIdRestoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCiphersIdRestoreAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CipherMiniResponseModel
}

// Status returns HTTPResponse.Status
func (r PutCiphersIdRestoreAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCiphersIdRestoreAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCiphersIdShareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CipherResponseModel
}

// Status returns HTTPResponse.Status
func (r PostCiphersIdShareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCiphersIdShareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCiphersIdShareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CipherResponseModel
}

// Status returns HTTPResponse.Status
func (r PutCiphersIdShareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCiphersIdShareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCollectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionDetailsResponseModelListResponseModel
}

// Status returns HTTPResponse.Status
func (r GetCollectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCollectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDevicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceResponseModelListResponseModel
}

// Status returns HTTPResponse.Status
func (r GetDevicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDevicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDevicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceResponseModel
}

// Status returns HTTPResponse.Status
func (r PostDevicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDevicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDevicesIdentifierIdentifierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceResponseModel
}

// Status returns HTTPResponse.Status
func (r GetDevicesIdentifierIdentifierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDevicesIdentifierIdentifierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDevicesIdentifierIdentifierClearTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostDevicesIdentifierIdentifierClearTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDevicesIdentifierIdentifierClearTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutDevicesIdentifierIdentifierClearTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutDevicesIdentifierIdentifierClearTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutDevicesIdentifierIdentifierClearTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDevicesIdentifierIdentifierTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostDevicesIdentifierIdentifierTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDevicesIdentifierIdentifierTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutDevicesIdentifierIdentifierTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutDevicesIdentifierIdentifierTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutDevicesIdentifierIdentifierTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDevicesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteDevicesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDevicesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDevicesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceResponseModel
}

// Status returns HTTPResponse.Status
func (r GetDevicesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDevicesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDevicesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceResponseModel
}

// Status returns HTTPResponse.Status
func (r PostDevicesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDevicesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutDevicesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceResponseModel
}

// Status returns HTTPResponse.Status
func (r PutDevicesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutDevicesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDevicesIdDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostDevicesIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDevicesIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmergencyAccessGrantedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmergencyAccessGrantorDetailsResponseModelListResponseModel
}

// Status returns HTTPResponse.Status
func (r GetEmergencyAccessGrantedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmergencyAccessGrantedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEmergencyAccessInviteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostEmergencyAccessInviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEmergencyAccessInviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmergencyAccessTrustedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmergencyAccessGranteeDetailsResponseModelListResponseModel
}

// Status returns HTTPResponse.Status
func (r GetEmergencyAccessTrustedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmergencyAccessTrustedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEmergencyAccessIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteEmergencyAccessIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEmergencyAccessIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmergencyAccessIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmergencyAccessGranteeDetailsResponseModel
}

// Status returns HTTPResponse.Status
func (r GetEmergencyAccessIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmergencyAccessIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEmergencyAccessIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostEmergencyAccessIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEmergencyAccessIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutEmergencyAccessIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutEmergencyAccessIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutEmergencyAccessIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEmergencyAccessIdAcceptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostEmergencyAccessIdAcceptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEmergencyAccessIdAcceptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEmergencyAccessIdApproveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostEmergencyAccessIdApproveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEmergencyAccessIdApproveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEmergencyAccessIdConfirmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostEmergencyAccessIdConfirmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEmergencyAccessIdConfirmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEmergencyAccessIdDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostEmergencyAccessIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEmergencyAccessIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEmergencyAccessIdInitiateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostEmergencyAccessIdInitiateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEmergencyAccessIdInitiateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEmergencyAccessIdPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostEmergencyAccessIdPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEmergencyAccessIdPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmergencyAccessIdPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PolicyResponseModelListResponseModel
}

// Status returns HTTPResponse.Status
func (r GetEmergencyAccessIdPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmergencyAccessIdPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEmergencyAccessIdReinviteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostEmergencyAccessIdReinviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEmergencyAccessIdReinviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEmergencyAccessIdRejectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostEmergencyAccessIdRejectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEmergencyAccessIdRejectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEmergencyAccessIdTakeoverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmergencyAccessTakeoverResponseModel
}

// Status returns HTTPResponse.Status
func (r PostEmergencyAccessIdTakeoverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEmergencyAccessIdTakeoverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEmergencyAccessIdViewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmergencyAccessViewResponseModel
}

// Status returns HTTPResponse.Status
func (r PostEmergencyAccessIdViewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEmergencyAccessIdViewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmergencyAccessIdCipherIdAttachmentAttachmentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttachmentResponseModel
}

// Status returns HTTPResponse.Status
func (r GetEmergencyAccessIdCipherIdAttachmentAttachmentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmergencyAccessIdCipherIdAttachmentAttachmentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EventResponseModelListResponseModel
}

// Status returns HTTPResponse.Status
func (r GetEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFoldersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FolderResponseModelListResponseModel
}

// Status returns HTTPResponse.Status
func (r GetFoldersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFoldersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFoldersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FolderResponseModel
}

// Status returns HTTPResponse.Status
func (r PostFoldersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFoldersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFoldersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteFoldersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFoldersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFoldersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FolderResponseModel
}

// Status returns HTTPResponse.Status
func (r GetFoldersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFoldersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFoldersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FolderResponseModel
}

// Status returns HTTPResponse.Status
func (r PostFoldersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFoldersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutFoldersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FolderResponseModel
}

// Status returns HTTPResponse.Status
func (r PutFoldersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutFoldersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFoldersIdDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostFoldersIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFoldersIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHibpBreachResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetHibpBreachResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHibpBreachResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInstallationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InstallationResponseModel
}

// Status returns HTTPResponse.Status
func (r PostInstallationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInstallationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInstallationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InstallationResponseModel
}

// Status returns HTTPResponse.Status
func (r GetInstallationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInstallationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLicensesOrganizationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationLicense
}

// Status returns HTTPResponse.Status
func (r GetLicensesOrganizationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLicensesOrganizationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLicensesUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserLicense
}

// Status returns HTTPResponse.Status
func (r GetLicensesUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLicensesUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *time.Time
}

// Status returns HTTPResponse.Status
func (r GetNowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProfileOrganizationResponseModelListResponseModel
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationResponseModel
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsLicenseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationResponseModel
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsLicenseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsLicenseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrganizationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationResponseModel
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationResponseModel
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrganizationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationResponseModel
}

// Status returns HTTPResponse.Status
func (r PutOrganizationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrganizationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsIdApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiKeyResponseModel
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsIdApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsIdApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsIdBillingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingResponseModel
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsIdBillingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsIdBillingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsIdCancelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsIdCancelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsIdCancelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsIdDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsIdEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EventResponseModelListResponseModel
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsIdEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsIdEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsIdImportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsIdImportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsIdImportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsIdKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationKeysResponseModel
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsIdKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsIdKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsIdKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationKeysResponseModel
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsIdKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsIdKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsIdLeaveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsIdLeaveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsIdLeaveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsIdLicenseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationLicense
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsIdLicenseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsIdLicenseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsIdLicenseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsIdLicenseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsIdLicenseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsIdPaymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsIdPaymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsIdPaymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsIdReinstateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsIdReinstateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsIdReinstateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsIdRotateApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiKeyResponseModel
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsIdRotateApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsIdRotateApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsIdSeatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaymentResponseModel
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsIdSeatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsIdSeatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsIdStorageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaymentResponseModel
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsIdStorageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsIdStorageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsIdSubscriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationSubscriptionResponseModel
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsIdSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsIdSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsIdTaxResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaxInfoResponseModel
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsIdTaxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsIdTaxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrganizationsIdTaxResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutOrganizationsIdTaxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrganizationsIdTaxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsIdTwoFactorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TwoFactorProviderResponseModelListResponseModel
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsIdTwoFactorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsIdTwoFactorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsIdTwoFactorDisableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TwoFactorProviderResponseModel
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsIdTwoFactorDisableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsIdTwoFactorDisableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrganizationsIdTwoFactorDisableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TwoFactorProviderResponseModel
}

// Status returns HTTPResponse.Status
func (r PutOrganizationsIdTwoFactorDisableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrganizationsIdTwoFactorDisableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsIdTwoFactorDuoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TwoFactorDuoResponseModel
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsIdTwoFactorDuoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsIdTwoFactorDuoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrganizationsIdTwoFactorDuoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TwoFactorDuoResponseModel
}

// Status returns HTTPResponse.Status
func (r PutOrganizationsIdTwoFactorDuoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrganizationsIdTwoFactorDuoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsIdTwoFactorGetDuoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TwoFactorDuoResponseModel
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsIdTwoFactorGetDuoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsIdTwoFactorGetDuoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsIdUpgradeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaymentResponseModel
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsIdUpgradeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsIdUpgradeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsIdVerifyBankResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsIdVerifyBankResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsIdVerifyBankResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsOrgIdCollectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionResponseModelListResponseModel
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsOrgIdCollectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsOrgIdCollectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsOrgIdCollectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionResponseModel
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsOrgIdCollectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsOrgIdCollectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrganizationsOrgIdCollectionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationsOrgIdCollectionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationsOrgIdCollectionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsOrgIdCollectionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionResponseModel
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsOrgIdCollectionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsOrgIdCollectionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsOrgIdCollectionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionResponseModel
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsOrgIdCollectionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsOrgIdCollectionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrganizationsOrgIdCollectionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionResponseModel
}

// Status returns HTTPResponse.Status
func (r PutOrganizationsOrgIdCollectionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrganizationsOrgIdCollectionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsOrgIdCollectionsIdDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsOrgIdCollectionsIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsOrgIdCollectionsIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsOrgIdCollectionsIdDeleteUserOrgUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsOrgIdCollectionsIdDeleteUserOrgUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsOrgIdCollectionsIdDeleteUserOrgUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsOrgIdCollectionsIdDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionGroupDetailsResponseModel
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsOrgIdCollectionsIdDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsOrgIdCollectionsIdDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrganizationsOrgIdCollectionsIdUserOrgUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationsOrgIdCollectionsIdUserOrgUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationsOrgIdCollectionsIdUserOrgUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsOrgIdCollectionsIdUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SelectionReadOnlyResponseModel
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsOrgIdCollectionsIdUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsOrgIdCollectionsIdUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrganizationsOrgIdCollectionsIdUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutOrganizationsOrgIdCollectionsIdUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrganizationsOrgIdCollectionsIdUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsOrgIdGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupResponseModelListResponseModel
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsOrgIdGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsOrgIdGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsOrgIdGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupResponseModel
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsOrgIdGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsOrgIdGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrganizationsOrgIdGroupsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationsOrgIdGroupsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationsOrgIdGroupsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsOrgIdGroupsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupResponseModel
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsOrgIdGroupsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsOrgIdGroupsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsOrgIdGroupsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupResponseModel
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsOrgIdGroupsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsOrgIdGroupsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrganizationsOrgIdGroupsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupResponseModel
}

// Status returns HTTPResponse.Status
func (r PutOrganizationsOrgIdGroupsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrganizationsOrgIdGroupsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsOrgIdGroupsIdDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsOrgIdGroupsIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsOrgIdGroupsIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsOrgIdGroupsIdDeleteUserOrgUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsOrgIdGroupsIdDeleteUserOrgUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsOrgIdGroupsIdDeleteUserOrgUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsOrgIdGroupsIdDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupDetailsResponseModel
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsOrgIdGroupsIdDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsOrgIdGroupsIdDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrganizationsOrgIdGroupsIdUserOrgUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationsOrgIdGroupsIdUserOrgUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationsOrgIdGroupsIdUserOrgUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsOrgIdGroupsIdUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsOrgIdGroupsIdUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsOrgIdGroupsIdUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrganizationsOrgIdGroupsIdUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutOrganizationsOrgIdGroupsIdUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrganizationsOrgIdGroupsIdUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsOrgIdPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PolicyResponseModelListResponseModel
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsOrgIdPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsOrgIdPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsOrgIdPoliciesTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PolicyResponseModelListResponseModel
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsOrgIdPoliciesTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsOrgIdPoliciesTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsOrgIdPoliciesTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PolicyResponseModel
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsOrgIdPoliciesTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsOrgIdPoliciesTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrganizationsOrgIdPoliciesTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PolicyResponseModel
}

// Status returns HTTPResponse.Status
func (r PutOrganizationsOrgIdPoliciesTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrganizationsOrgIdPoliciesTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrganizationsOrgIdUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationUserBulkResponseModelListResponseModel
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationsOrgIdUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationsOrgIdUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsOrgIdUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationUserUserDetailsResponseModelListResponseModel
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsOrgIdUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsOrgIdUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsOrgIdUsersConfirmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationUserBulkResponseModelListResponseModel
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsOrgIdUsersConfirmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsOrgIdUsersConfirmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsOrgIdUsersDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationUserBulkResponseModelListResponseModel
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsOrgIdUsersDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsOrgIdUsersDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsOrgIdUsersInviteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsOrgIdUsersInviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsOrgIdUsersInviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsOrgIdUsersPublicKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationUserPublicKeyResponseModelListResponseModel
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsOrgIdUsersPublicKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsOrgIdUsersPublicKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsOrgIdUsersReinviteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationUserBulkResponseModelListResponseModel
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsOrgIdUsersReinviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsOrgIdUsersReinviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrganizationsOrgIdUsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationsOrgIdUsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationsOrgIdUsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsOrgIdUsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationUserDetailsResponseModel
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsOrgIdUsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsOrgIdUsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsOrgIdUsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsOrgIdUsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsOrgIdUsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrganizationsOrgIdUsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutOrganizationsOrgIdUsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrganizationsOrgIdUsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsOrgIdUsersIdAcceptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsOrgIdUsersIdAcceptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsOrgIdUsersIdAcceptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsOrgIdUsersIdConfirmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsOrgIdUsersIdConfirmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsOrgIdUsersIdConfirmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsOrgIdUsersIdDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsOrgIdUsersIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsOrgIdUsersIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsOrgIdUsersIdEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EventResponseModelListResponseModel
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsOrgIdUsersIdEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsOrgIdUsersIdEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsOrgIdUsersIdGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsOrgIdUsersIdGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsOrgIdUsersIdGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsOrgIdUsersIdGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsOrgIdUsersIdGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsOrgIdUsersIdGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrganizationsOrgIdUsersIdGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutOrganizationsOrgIdUsersIdGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrganizationsOrgIdUsersIdGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsOrgIdUsersIdReinviteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsOrgIdUsersIdReinviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsOrgIdUsersIdReinviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrganizationsOrgIdUsersIdResetPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutOrganizationsOrgIdUsersIdResetPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrganizationsOrgIdUsersIdResetPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsOrgIdUsersIdResetPasswordDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationUserResetPasswordDetailsResponseModel
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsOrgIdUsersIdResetPasswordDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsOrgIdUsersIdResetPasswordDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlanResponseModelListResponseModel
}

// Status returns HTTPResponse.Status
func (r GetPlansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlansSalesTaxRatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaxRateResponseModelListResponseModel
}

// Status returns HTTPResponse.Status
func (r GetPlansSalesTaxRatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlansSalesTaxRatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPushAddOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutPushAddOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPushAddOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPushDeleteOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutPushDeleteOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPushDeleteOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPushRegisterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPushRegisterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPushRegisterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPushSendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPushSendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPushSendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePushIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePushIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePushIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSendsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SendResponseModelListResponseModel
}

// Status returns HTTPResponse.Status
func (r GetSendsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSendsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSendsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SendResponseModel
}

// Status returns HTTPResponse.Status
func (r PostSendsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSendsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSendsAccessIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSendsAccessIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSendsAccessIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSendsFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SendResponseModel
}

// Status returns HTTPResponse.Status
func (r PostSendsFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSendsFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSendsFileV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SendFileUploadDataResponseModel
}

// Status returns HTTPResponse.Status
func (r PostSendsFileV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSendsFileV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSendsFileValidateAzureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSendsFileValidateAzureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSendsFileValidateAzureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSendsEncodedSendIdAccessFileFileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSendsEncodedSendIdAccessFileFileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSendsEncodedSendIdAccessFileFileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSendsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSendsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSendsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSendsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SendResponseModel
}

// Status returns HTTPResponse.Status
func (r GetSendsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSendsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSendsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SendResponseModel
}

// Status returns HTTPResponse.Status
func (r PutSendsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSendsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSendsIdFileFileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SendFileUploadDataResponseModel
}

// Status returns HTTPResponse.Status
func (r GetSendsIdFileFileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSendsIdFileFileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSendsIdFileFileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSendsIdFileFileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSendsIdFileFileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSendsIdRemovePasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SendResponseModel
}

// Status returns HTTPResponse.Status
func (r PutSendsIdRemovePasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSendsIdRemovePasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsDomainsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DomainsResponseModel
}

// Status returns HTTPResponse.Status
func (r GetSettingsDomainsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsDomainsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSettingsDomainsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DomainsResponseModel
}

// Status returns HTTPResponse.Status
func (r PostSettingsDomainsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsDomainsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsDomainsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DomainsResponseModel
}

// Status returns HTTPResponse.Status
func (r PutSettingsDomainsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsDomainsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSetupPaymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r PostSetupPaymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSetupPaymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SyncResponseModel
}

// Status returns HTTPResponse.Status
func (r GetSyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTwoFactorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TwoFactorProviderResponseModelListResponseModel
}

// Status returns HTTPResponse.Status
func (r GetTwoFactorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTwoFactorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTwoFactorAuthenticatorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TwoFactorAuthenticatorResponseModel
}

// Status returns HTTPResponse.Status
func (r PostTwoFactorAuthenticatorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTwoFactorAuthenticatorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTwoFactorAuthenticatorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TwoFactorAuthenticatorResponseModel
}

// Status returns HTTPResponse.Status
func (r PutTwoFactorAuthenticatorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTwoFactorAuthenticatorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTwoFactorDisableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TwoFactorProviderResponseModel
}

// Status returns HTTPResponse.Status
func (r PostTwoFactorDisableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTwoFactorDisableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTwoFactorDisableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TwoFactorProviderResponseModel
}

// Status returns HTTPResponse.Status
func (r PutTwoFactorDisableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTwoFactorDisableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTwoFactorDuoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TwoFactorDuoResponseModel
}

// Status returns HTTPResponse.Status
func (r PostTwoFactorDuoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTwoFactorDuoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTwoFactorDuoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TwoFactorDuoResponseModel
}

// Status returns HTTPResponse.Status
func (r PutTwoFactorDuoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTwoFactorDuoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTwoFactorEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TwoFactorEmailResponseModel
}

// Status returns HTTPResponse.Status
func (r PostTwoFactorEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTwoFactorEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTwoFactorEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TwoFactorEmailResponseModel
}

// Status returns HTTPResponse.Status
func (r PutTwoFactorEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTwoFactorEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTwoFactorGetAuthenticatorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TwoFactorAuthenticatorResponseModel
}

// Status returns HTTPResponse.Status
func (r PostTwoFactorGetAuthenticatorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTwoFactorGetAuthenticatorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTwoFactorGetDuoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TwoFactorDuoResponseModel
}

// Status returns HTTPResponse.Status
func (r PostTwoFactorGetDuoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTwoFactorGetDuoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTwoFactorGetEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TwoFactorEmailResponseModel
}

// Status returns HTTPResponse.Status
func (r PostTwoFactorGetEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTwoFactorGetEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTwoFactorGetRecoverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TwoFactorRecoverResponseModel
}

// Status returns HTTPResponse.Status
func (r PostTwoFactorGetRecoverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTwoFactorGetRecoverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTwoFactorGetWebauthnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TwoFactorWebAuthnResponseModel
}

// Status returns HTTPResponse.Status
func (r PostTwoFactorGetWebauthnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTwoFactorGetWebauthnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTwoFactorGetWebauthnChallengeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CredentialCreateOptions
}

// Status returns HTTPResponse.Status
func (r PostTwoFactorGetWebauthnChallengeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTwoFactorGetWebauthnChallengeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTwoFactorGetYubikeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TwoFactorYubiKeyResponseModel
}

// Status returns HTTPResponse.Status
func (r PostTwoFactorGetYubikeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTwoFactorGetYubikeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTwoFactorRecoverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostTwoFactorRecoverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTwoFactorRecoverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTwoFactorSendEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostTwoFactorSendEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTwoFactorSendEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTwoFactorSendEmailLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostTwoFactorSendEmailLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTwoFactorSendEmailLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTwoFactorWebauthnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TwoFactorWebAuthnResponseModel
}

// Status returns HTTPResponse.Status
func (r DeleteTwoFactorWebauthnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTwoFactorWebauthnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTwoFactorWebauthnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TwoFactorWebAuthnResponseModel
}

// Status returns HTTPResponse.Status
func (r PostTwoFactorWebauthnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTwoFactorWebauthnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTwoFactorWebauthnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TwoFactorWebAuthnResponseModel
}

// Status returns HTTPResponse.Status
func (r PutTwoFactorWebauthnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTwoFactorWebauthnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTwoFactorYubikeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TwoFactorYubiKeyResponseModel
}

// Status returns HTTPResponse.Status
func (r PostTwoFactorYubikeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTwoFactorYubikeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTwoFactorYubikeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TwoFactorYubiKeyResponseModel
}

// Status returns HTTPResponse.Status
func (r PutTwoFactorYubikeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTwoFactorYubikeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersIdPublicKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserKeyResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUsersIdPublicKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersIdPublicKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VersionResponseModel
}

// Status returns HTTPResponse.Status
func (r GetVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DeleteAccountsWithBodyWithResponse request with arbitrary body returning *DeleteAccountsResponse
func (c *ClientWithResponses) DeleteAccountsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAccountsResponse, error) {
	rsp, err := c.DeleteAccountsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAccountsResponse(rsp)
}

func (c *ClientWithResponses) DeleteAccountsWithResponse(ctx context.Context, body DeleteAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAccountsResponse, error) {
	rsp, err := c.DeleteAccounts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAccountsResponse(rsp)
}

// PostAccountsApiKeyWithBodyWithResponse request with arbitrary body returning *PostAccountsApiKeyResponse
func (c *ClientWithResponses) PostAccountsApiKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsApiKeyResponse, error) {
	rsp, err := c.PostAccountsApiKeyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsApiKeyResponse(rsp)
}

func (c *ClientWithResponses) PostAccountsApiKeyWithResponse(ctx context.Context, body PostAccountsApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsApiKeyResponse, error) {
	rsp, err := c.PostAccountsApiKey(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsApiKeyResponse(rsp)
}

// GetAccountsBillingWithResponse request returning *GetAccountsBillingResponse
func (c *ClientWithResponses) GetAccountsBillingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountsBillingResponse, error) {
	rsp, err := c.GetAccountsBilling(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountsBillingResponse(rsp)
}

// PostAccountsCancelPremiumWithResponse request returning *PostAccountsCancelPremiumResponse
func (c *ClientWithResponses) PostAccountsCancelPremiumWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAccountsCancelPremiumResponse, error) {
	rsp, err := c.PostAccountsCancelPremium(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsCancelPremiumResponse(rsp)
}

// PostAccountsDeleteWithBodyWithResponse request with arbitrary body returning *PostAccountsDeleteResponse
func (c *ClientWithResponses) PostAccountsDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsDeleteResponse, error) {
	rsp, err := c.PostAccountsDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsDeleteResponse(rsp)
}

func (c *ClientWithResponses) PostAccountsDeleteWithResponse(ctx context.Context, body PostAccountsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsDeleteResponse, error) {
	rsp, err := c.PostAccountsDelete(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsDeleteResponse(rsp)
}

// PostAccountsDeleteRecoverWithBodyWithResponse request with arbitrary body returning *PostAccountsDeleteRecoverResponse
func (c *ClientWithResponses) PostAccountsDeleteRecoverWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsDeleteRecoverResponse, error) {
	rsp, err := c.PostAccountsDeleteRecoverWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsDeleteRecoverResponse(rsp)
}

func (c *ClientWithResponses) PostAccountsDeleteRecoverWithResponse(ctx context.Context, body PostAccountsDeleteRecoverJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsDeleteRecoverResponse, error) {
	rsp, err := c.PostAccountsDeleteRecover(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsDeleteRecoverResponse(rsp)
}

// PostAccountsDeleteRecoverTokenWithBodyWithResponse request with arbitrary body returning *PostAccountsDeleteRecoverTokenResponse
func (c *ClientWithResponses) PostAccountsDeleteRecoverTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsDeleteRecoverTokenResponse, error) {
	rsp, err := c.PostAccountsDeleteRecoverTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsDeleteRecoverTokenResponse(rsp)
}

func (c *ClientWithResponses) PostAccountsDeleteRecoverTokenWithResponse(ctx context.Context, body PostAccountsDeleteRecoverTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsDeleteRecoverTokenResponse, error) {
	rsp, err := c.PostAccountsDeleteRecoverToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsDeleteRecoverTokenResponse(rsp)
}

// PostAccountsEmailWithBodyWithResponse request with arbitrary body returning *PostAccountsEmailResponse
func (c *ClientWithResponses) PostAccountsEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsEmailResponse, error) {
	rsp, err := c.PostAccountsEmailWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsEmailResponse(rsp)
}

func (c *ClientWithResponses) PostAccountsEmailWithResponse(ctx context.Context, body PostAccountsEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsEmailResponse, error) {
	rsp, err := c.PostAccountsEmail(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsEmailResponse(rsp)
}

// PostAccountsEmailTokenWithBodyWithResponse request with arbitrary body returning *PostAccountsEmailTokenResponse
func (c *ClientWithResponses) PostAccountsEmailTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsEmailTokenResponse, error) {
	rsp, err := c.PostAccountsEmailTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsEmailTokenResponse(rsp)
}

func (c *ClientWithResponses) PostAccountsEmailTokenWithResponse(ctx context.Context, body PostAccountsEmailTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsEmailTokenResponse, error) {
	rsp, err := c.PostAccountsEmailToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsEmailTokenResponse(rsp)
}

// GetAccountsEnterprisePortalSigninTokenWithResponse request returning *GetAccountsEnterprisePortalSigninTokenResponse
func (c *ClientWithResponses) GetAccountsEnterprisePortalSigninTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountsEnterprisePortalSigninTokenResponse, error) {
	rsp, err := c.GetAccountsEnterprisePortalSigninToken(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountsEnterprisePortalSigninTokenResponse(rsp)
}

// PostAccountsIapCheckWithBodyWithResponse request with arbitrary body returning *PostAccountsIapCheckResponse
func (c *ClientWithResponses) PostAccountsIapCheckWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsIapCheckResponse, error) {
	rsp, err := c.PostAccountsIapCheckWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsIapCheckResponse(rsp)
}

func (c *ClientWithResponses) PostAccountsIapCheckWithResponse(ctx context.Context, body PostAccountsIapCheckJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsIapCheckResponse, error) {
	rsp, err := c.PostAccountsIapCheck(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsIapCheckResponse(rsp)
}

// PostAccountsKdfWithBodyWithResponse request with arbitrary body returning *PostAccountsKdfResponse
func (c *ClientWithResponses) PostAccountsKdfWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsKdfResponse, error) {
	rsp, err := c.PostAccountsKdfWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsKdfResponse(rsp)
}

func (c *ClientWithResponses) PostAccountsKdfWithResponse(ctx context.Context, body PostAccountsKdfJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsKdfResponse, error) {
	rsp, err := c.PostAccountsKdf(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsKdfResponse(rsp)
}

// PostAccountsKeyWithBodyWithResponse request with arbitrary body returning *PostAccountsKeyResponse
func (c *ClientWithResponses) PostAccountsKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsKeyResponse, error) {
	rsp, err := c.PostAccountsKeyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsKeyResponse(rsp)
}

func (c *ClientWithResponses) PostAccountsKeyWithResponse(ctx context.Context, body PostAccountsKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsKeyResponse, error) {
	rsp, err := c.PostAccountsKey(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsKeyResponse(rsp)
}

// GetAccountsKeysWithResponse request returning *GetAccountsKeysResponse
func (c *ClientWithResponses) GetAccountsKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountsKeysResponse, error) {
	rsp, err := c.GetAccountsKeys(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountsKeysResponse(rsp)
}

// PostAccountsKeysWithBodyWithResponse request with arbitrary body returning *PostAccountsKeysResponse
func (c *ClientWithResponses) PostAccountsKeysWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsKeysResponse, error) {
	rsp, err := c.PostAccountsKeysWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsKeysResponse(rsp)
}

func (c *ClientWithResponses) PostAccountsKeysWithResponse(ctx context.Context, body PostAccountsKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsKeysResponse, error) {
	rsp, err := c.PostAccountsKeys(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsKeysResponse(rsp)
}

// PostAccountsLicenseWithBodyWithResponse request with arbitrary body returning *PostAccountsLicenseResponse
func (c *ClientWithResponses) PostAccountsLicenseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsLicenseResponse, error) {
	rsp, err := c.PostAccountsLicenseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsLicenseResponse(rsp)
}

// GetAccountsOrganizationsWithResponse request returning *GetAccountsOrganizationsResponse
func (c *ClientWithResponses) GetAccountsOrganizationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountsOrganizationsResponse, error) {
	rsp, err := c.GetAccountsOrganizations(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountsOrganizationsResponse(rsp)
}

// PostAccountsPasswordWithBodyWithResponse request with arbitrary body returning *PostAccountsPasswordResponse
func (c *ClientWithResponses) PostAccountsPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsPasswordResponse, error) {
	rsp, err := c.PostAccountsPasswordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsPasswordResponse(rsp)
}

func (c *ClientWithResponses) PostAccountsPasswordWithResponse(ctx context.Context, body PostAccountsPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsPasswordResponse, error) {
	rsp, err := c.PostAccountsPassword(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsPasswordResponse(rsp)
}

// PostAccountsPasswordHintWithBodyWithResponse request with arbitrary body returning *PostAccountsPasswordHintResponse
func (c *ClientWithResponses) PostAccountsPasswordHintWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsPasswordHintResponse, error) {
	rsp, err := c.PostAccountsPasswordHintWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsPasswordHintResponse(rsp)
}

func (c *ClientWithResponses) PostAccountsPasswordHintWithResponse(ctx context.Context, body PostAccountsPasswordHintJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsPasswordHintResponse, error) {
	rsp, err := c.PostAccountsPasswordHint(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsPasswordHintResponse(rsp)
}

// PostAccountsPaymentWithBodyWithResponse request with arbitrary body returning *PostAccountsPaymentResponse
func (c *ClientWithResponses) PostAccountsPaymentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsPaymentResponse, error) {
	rsp, err := c.PostAccountsPaymentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsPaymentResponse(rsp)
}

func (c *ClientWithResponses) PostAccountsPaymentWithResponse(ctx context.Context, body PostAccountsPaymentJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsPaymentResponse, error) {
	rsp, err := c.PostAccountsPayment(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsPaymentResponse(rsp)
}

// PostAccountsPreloginWithBodyWithResponse request with arbitrary body returning *PostAccountsPreloginResponse
func (c *ClientWithResponses) PostAccountsPreloginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsPreloginResponse, error) {
	rsp, err := c.PostAccountsPreloginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsPreloginResponse(rsp)
}

func (c *ClientWithResponses) PostAccountsPreloginWithResponse(ctx context.Context, body PostAccountsPreloginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsPreloginResponse, error) {
	rsp, err := c.PostAccountsPrelogin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsPreloginResponse(rsp)
}

// PostAccountsPremiumWithBodyWithResponse request with arbitrary body returning *PostAccountsPremiumResponse
func (c *ClientWithResponses) PostAccountsPremiumWithBodyWithResponse(ctx context.Context, params *PostAccountsPremiumParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsPremiumResponse, error) {
	rsp, err := c.PostAccountsPremiumWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsPremiumResponse(rsp)
}

// GetAccountsProfileWithResponse request returning *GetAccountsProfileResponse
func (c *ClientWithResponses) GetAccountsProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountsProfileResponse, error) {
	rsp, err := c.GetAccountsProfile(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountsProfileResponse(rsp)
}

// PostAccountsProfileWithBodyWithResponse request with arbitrary body returning *PostAccountsProfileResponse
func (c *ClientWithResponses) PostAccountsProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsProfileResponse, error) {
	rsp, err := c.PostAccountsProfileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsProfileResponse(rsp)
}

func (c *ClientWithResponses) PostAccountsProfileWithResponse(ctx context.Context, body PostAccountsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsProfileResponse, error) {
	rsp, err := c.PostAccountsProfile(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsProfileResponse(rsp)
}

// PutAccountsProfileWithBodyWithResponse request with arbitrary body returning *PutAccountsProfileResponse
func (c *ClientWithResponses) PutAccountsProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAccountsProfileResponse, error) {
	rsp, err := c.PutAccountsProfileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAccountsProfileResponse(rsp)
}

func (c *ClientWithResponses) PutAccountsProfileWithResponse(ctx context.Context, body PutAccountsProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAccountsProfileResponse, error) {
	rsp, err := c.PutAccountsProfile(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAccountsProfileResponse(rsp)
}

// PostAccountsRegisterWithBodyWithResponse request with arbitrary body returning *PostAccountsRegisterResponse
func (c *ClientWithResponses) PostAccountsRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsRegisterResponse, error) {
	rsp, err := c.PostAccountsRegisterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsRegisterResponse(rsp)
}

func (c *ClientWithResponses) PostAccountsRegisterWithResponse(ctx context.Context, body PostAccountsRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsRegisterResponse, error) {
	rsp, err := c.PostAccountsRegister(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsRegisterResponse(rsp)
}

// PostAccountsReinstatePremiumWithResponse request returning *PostAccountsReinstatePremiumResponse
func (c *ClientWithResponses) PostAccountsReinstatePremiumWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAccountsReinstatePremiumResponse, error) {
	rsp, err := c.PostAccountsReinstatePremium(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsReinstatePremiumResponse(rsp)
}

// GetAccountsRevisionDateWithResponse request returning *GetAccountsRevisionDateResponse
func (c *ClientWithResponses) GetAccountsRevisionDateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountsRevisionDateResponse, error) {
	rsp, err := c.GetAccountsRevisionDate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountsRevisionDateResponse(rsp)
}

// PostAccountsRotateApiKeyWithBodyWithResponse request with arbitrary body returning *PostAccountsRotateApiKeyResponse
func (c *ClientWithResponses) PostAccountsRotateApiKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsRotateApiKeyResponse, error) {
	rsp, err := c.PostAccountsRotateApiKeyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsRotateApiKeyResponse(rsp)
}

func (c *ClientWithResponses) PostAccountsRotateApiKeyWithResponse(ctx context.Context, body PostAccountsRotateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsRotateApiKeyResponse, error) {
	rsp, err := c.PostAccountsRotateApiKey(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsRotateApiKeyResponse(rsp)
}

// PostAccountsSecurityStampWithBodyWithResponse request with arbitrary body returning *PostAccountsSecurityStampResponse
func (c *ClientWithResponses) PostAccountsSecurityStampWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsSecurityStampResponse, error) {
	rsp, err := c.PostAccountsSecurityStampWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsSecurityStampResponse(rsp)
}

func (c *ClientWithResponses) PostAccountsSecurityStampWithResponse(ctx context.Context, body PostAccountsSecurityStampJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsSecurityStampResponse, error) {
	rsp, err := c.PostAccountsSecurityStamp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsSecurityStampResponse(rsp)
}

// PostAccountsSetPasswordWithBodyWithResponse request with arbitrary body returning *PostAccountsSetPasswordResponse
func (c *ClientWithResponses) PostAccountsSetPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsSetPasswordResponse, error) {
	rsp, err := c.PostAccountsSetPasswordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsSetPasswordResponse(rsp)
}

func (c *ClientWithResponses) PostAccountsSetPasswordWithResponse(ctx context.Context, body PostAccountsSetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsSetPasswordResponse, error) {
	rsp, err := c.PostAccountsSetPassword(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsSetPasswordResponse(rsp)
}

// GetAccountsSsoUserIdentifierWithResponse request returning *GetAccountsSsoUserIdentifierResponse
func (c *ClientWithResponses) GetAccountsSsoUserIdentifierWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountsSsoUserIdentifierResponse, error) {
	rsp, err := c.GetAccountsSsoUserIdentifier(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountsSsoUserIdentifierResponse(rsp)
}

// DeleteAccountsSsoOrganizationIdWithResponse request returning *DeleteAccountsSsoOrganizationIdResponse
func (c *ClientWithResponses) DeleteAccountsSsoOrganizationIdWithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*DeleteAccountsSsoOrganizationIdResponse, error) {
	rsp, err := c.DeleteAccountsSsoOrganizationId(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAccountsSsoOrganizationIdResponse(rsp)
}

// PostAccountsStorageWithBodyWithResponse request with arbitrary body returning *PostAccountsStorageResponse
func (c *ClientWithResponses) PostAccountsStorageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsStorageResponse, error) {
	rsp, err := c.PostAccountsStorageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsStorageResponse(rsp)
}

func (c *ClientWithResponses) PostAccountsStorageWithResponse(ctx context.Context, body PostAccountsStorageJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsStorageResponse, error) {
	rsp, err := c.PostAccountsStorage(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsStorageResponse(rsp)
}

// GetAccountsSubscriptionWithResponse request returning *GetAccountsSubscriptionResponse
func (c *ClientWithResponses) GetAccountsSubscriptionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountsSubscriptionResponse, error) {
	rsp, err := c.GetAccountsSubscription(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountsSubscriptionResponse(rsp)
}

// GetAccountsTaxWithResponse request returning *GetAccountsTaxResponse
func (c *ClientWithResponses) GetAccountsTaxWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountsTaxResponse, error) {
	rsp, err := c.GetAccountsTax(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountsTaxResponse(rsp)
}

// PutAccountsTaxWithBodyWithResponse request with arbitrary body returning *PutAccountsTaxResponse
func (c *ClientWithResponses) PutAccountsTaxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAccountsTaxResponse, error) {
	rsp, err := c.PutAccountsTaxWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAccountsTaxResponse(rsp)
}

func (c *ClientWithResponses) PutAccountsTaxWithResponse(ctx context.Context, body PutAccountsTaxJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAccountsTaxResponse, error) {
	rsp, err := c.PutAccountsTax(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAccountsTaxResponse(rsp)
}

// PostAccountsVerifyEmailWithResponse request returning *PostAccountsVerifyEmailResponse
func (c *ClientWithResponses) PostAccountsVerifyEmailWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAccountsVerifyEmailResponse, error) {
	rsp, err := c.PostAccountsVerifyEmail(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsVerifyEmailResponse(rsp)
}

// PostAccountsVerifyEmailTokenWithBodyWithResponse request with arbitrary body returning *PostAccountsVerifyEmailTokenResponse
func (c *ClientWithResponses) PostAccountsVerifyEmailTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsVerifyEmailTokenResponse, error) {
	rsp, err := c.PostAccountsVerifyEmailTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsVerifyEmailTokenResponse(rsp)
}

func (c *ClientWithResponses) PostAccountsVerifyEmailTokenWithResponse(ctx context.Context, body PostAccountsVerifyEmailTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsVerifyEmailTokenResponse, error) {
	rsp, err := c.PostAccountsVerifyEmailToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsVerifyEmailTokenResponse(rsp)
}

// PostAccountsVerifyPasswordWithBodyWithResponse request with arbitrary body returning *PostAccountsVerifyPasswordResponse
func (c *ClientWithResponses) PostAccountsVerifyPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsVerifyPasswordResponse, error) {
	rsp, err := c.PostAccountsVerifyPasswordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsVerifyPasswordResponse(rsp)
}

func (c *ClientWithResponses) PostAccountsVerifyPasswordWithResponse(ctx context.Context, body PostAccountsVerifyPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsVerifyPasswordResponse, error) {
	rsp, err := c.PostAccountsVerifyPassword(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsVerifyPasswordResponse(rsp)
}

// GetAliveWithResponse request returning *GetAliveResponse
func (c *ClientWithResponses) GetAliveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAliveResponse, error) {
	rsp, err := c.GetAlive(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAliveResponse(rsp)
}

// PostBitpayInvoiceWithBodyWithResponse request with arbitrary body returning *PostBitpayInvoiceResponse
func (c *ClientWithResponses) PostBitpayInvoiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBitpayInvoiceResponse, error) {
	rsp, err := c.PostBitpayInvoiceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBitpayInvoiceResponse(rsp)
}

func (c *ClientWithResponses) PostBitpayInvoiceWithResponse(ctx context.Context, body PostBitpayInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBitpayInvoiceResponse, error) {
	rsp, err := c.PostBitpayInvoice(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBitpayInvoiceResponse(rsp)
}

// DeleteCiphersWithBodyWithResponse request with arbitrary body returning *DeleteCiphersResponse
func (c *ClientWithResponses) DeleteCiphersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteCiphersResponse, error) {
	rsp, err := c.DeleteCiphersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCiphersResponse(rsp)
}

func (c *ClientWithResponses) DeleteCiphersWithResponse(ctx context.Context, body DeleteCiphersJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteCiphersResponse, error) {
	rsp, err := c.DeleteCiphers(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCiphersResponse(rsp)
}

// GetCiphersWithResponse request returning *GetCiphersResponse
func (c *ClientWithResponses) GetCiphersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCiphersResponse, error) {
	rsp, err := c.GetCiphers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCiphersResponse(rsp)
}

// PostCiphersWithBodyWithResponse request with arbitrary body returning *PostCiphersResponse
func (c *ClientWithResponses) PostCiphersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCiphersResponse, error) {
	rsp, err := c.PostCiphersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersResponse(rsp)
}

func (c *ClientWithResponses) PostCiphersWithResponse(ctx context.Context, body PostCiphersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCiphersResponse, error) {
	rsp, err := c.PostCiphers(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersResponse(rsp)
}

// DeleteCiphersAdminWithBodyWithResponse request with arbitrary body returning *DeleteCiphersAdminResponse
func (c *ClientWithResponses) DeleteCiphersAdminWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteCiphersAdminResponse, error) {
	rsp, err := c.DeleteCiphersAdminWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCiphersAdminResponse(rsp)
}

func (c *ClientWithResponses) DeleteCiphersAdminWithResponse(ctx context.Context, body DeleteCiphersAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteCiphersAdminResponse, error) {
	rsp, err := c.DeleteCiphersAdmin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCiphersAdminResponse(rsp)
}

// PostCiphersAdminWithBodyWithResponse request with arbitrary body returning *PostCiphersAdminResponse
func (c *ClientWithResponses) PostCiphersAdminWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCiphersAdminResponse, error) {
	rsp, err := c.PostCiphersAdminWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersAdminResponse(rsp)
}

func (c *ClientWithResponses) PostCiphersAdminWithResponse(ctx context.Context, body PostCiphersAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCiphersAdminResponse, error) {
	rsp, err := c.PostCiphersAdmin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersAdminResponse(rsp)
}

// PostCiphersAttachmentValidateAzureWithResponse request returning *PostCiphersAttachmentValidateAzureResponse
func (c *ClientWithResponses) PostCiphersAttachmentValidateAzureWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostCiphersAttachmentValidateAzureResponse, error) {
	rsp, err := c.PostCiphersAttachmentValidateAzure(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersAttachmentValidateAzureResponse(rsp)
}

// PostCiphersCreateWithBodyWithResponse request with arbitrary body returning *PostCiphersCreateResponse
func (c *ClientWithResponses) PostCiphersCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCiphersCreateResponse, error) {
	rsp, err := c.PostCiphersCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersCreateResponse(rsp)
}

func (c *ClientWithResponses) PostCiphersCreateWithResponse(ctx context.Context, body PostCiphersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCiphersCreateResponse, error) {
	rsp, err := c.PostCiphersCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersCreateResponse(rsp)
}

// PostCiphersDeleteWithBodyWithResponse request with arbitrary body returning *PostCiphersDeleteResponse
func (c *ClientWithResponses) PostCiphersDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCiphersDeleteResponse, error) {
	rsp, err := c.PostCiphersDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersDeleteResponse(rsp)
}

func (c *ClientWithResponses) PostCiphersDeleteWithResponse(ctx context.Context, body PostCiphersDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCiphersDeleteResponse, error) {
	rsp, err := c.PostCiphersDelete(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersDeleteResponse(rsp)
}

// PutCiphersDeleteWithBodyWithResponse request with arbitrary body returning *PutCiphersDeleteResponse
func (c *ClientWithResponses) PutCiphersDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCiphersDeleteResponse, error) {
	rsp, err := c.PutCiphersDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCiphersDeleteResponse(rsp)
}

func (c *ClientWithResponses) PutCiphersDeleteWithResponse(ctx context.Context, body PutCiphersDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCiphersDeleteResponse, error) {
	rsp, err := c.PutCiphersDelete(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCiphersDeleteResponse(rsp)
}

// PostCiphersDeleteAdminWithBodyWithResponse request with arbitrary body returning *PostCiphersDeleteAdminResponse
func (c *ClientWithResponses) PostCiphersDeleteAdminWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCiphersDeleteAdminResponse, error) {
	rsp, err := c.PostCiphersDeleteAdminWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersDeleteAdminResponse(rsp)
}

func (c *ClientWithResponses) PostCiphersDeleteAdminWithResponse(ctx context.Context, body PostCiphersDeleteAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCiphersDeleteAdminResponse, error) {
	rsp, err := c.PostCiphersDeleteAdmin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersDeleteAdminResponse(rsp)
}

// PutCiphersDeleteAdminWithBodyWithResponse request with arbitrary body returning *PutCiphersDeleteAdminResponse
func (c *ClientWithResponses) PutCiphersDeleteAdminWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCiphersDeleteAdminResponse, error) {
	rsp, err := c.PutCiphersDeleteAdminWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCiphersDeleteAdminResponse(rsp)
}

func (c *ClientWithResponses) PutCiphersDeleteAdminWithResponse(ctx context.Context, body PutCiphersDeleteAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCiphersDeleteAdminResponse, error) {
	rsp, err := c.PutCiphersDeleteAdmin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCiphersDeleteAdminResponse(rsp)
}

// PostCiphersImportWithBodyWithResponse request with arbitrary body returning *PostCiphersImportResponse
func (c *ClientWithResponses) PostCiphersImportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCiphersImportResponse, error) {
	rsp, err := c.PostCiphersImportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersImportResponse(rsp)
}

func (c *ClientWithResponses) PostCiphersImportWithResponse(ctx context.Context, body PostCiphersImportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCiphersImportResponse, error) {
	rsp, err := c.PostCiphersImport(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersImportResponse(rsp)
}

// PostCiphersImportOrganizationWithBodyWithResponse request with arbitrary body returning *PostCiphersImportOrganizationResponse
func (c *ClientWithResponses) PostCiphersImportOrganizationWithBodyWithResponse(ctx context.Context, params *PostCiphersImportOrganizationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCiphersImportOrganizationResponse, error) {
	rsp, err := c.PostCiphersImportOrganizationWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersImportOrganizationResponse(rsp)
}

func (c *ClientWithResponses) PostCiphersImportOrganizationWithResponse(ctx context.Context, params *PostCiphersImportOrganizationParams, body PostCiphersImportOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCiphersImportOrganizationResponse, error) {
	rsp, err := c.PostCiphersImportOrganization(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersImportOrganizationResponse(rsp)
}

// PostCiphersMoveWithBodyWithResponse request with arbitrary body returning *PostCiphersMoveResponse
func (c *ClientWithResponses) PostCiphersMoveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCiphersMoveResponse, error) {
	rsp, err := c.PostCiphersMoveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersMoveResponse(rsp)
}

func (c *ClientWithResponses) PostCiphersMoveWithResponse(ctx context.Context, body PostCiphersMoveJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCiphersMoveResponse, error) {
	rsp, err := c.PostCiphersMove(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersMoveResponse(rsp)
}

// PutCiphersMoveWithBodyWithResponse request with arbitrary body returning *PutCiphersMoveResponse
func (c *ClientWithResponses) PutCiphersMoveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCiphersMoveResponse, error) {
	rsp, err := c.PutCiphersMoveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCiphersMoveResponse(rsp)
}

func (c *ClientWithResponses) PutCiphersMoveWithResponse(ctx context.Context, body PutCiphersMoveJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCiphersMoveResponse, error) {
	rsp, err := c.PutCiphersMove(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCiphersMoveResponse(rsp)
}

// GetCiphersOrganizationDetailsWithResponse request returning *GetCiphersOrganizationDetailsResponse
func (c *ClientWithResponses) GetCiphersOrganizationDetailsWithResponse(ctx context.Context, params *GetCiphersOrganizationDetailsParams, reqEditors ...RequestEditorFn) (*GetCiphersOrganizationDetailsResponse, error) {
	rsp, err := c.GetCiphersOrganizationDetails(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCiphersOrganizationDetailsResponse(rsp)
}

// PostCiphersPurgeWithBodyWithResponse request with arbitrary body returning *PostCiphersPurgeResponse
func (c *ClientWithResponses) PostCiphersPurgeWithBodyWithResponse(ctx context.Context, params *PostCiphersPurgeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCiphersPurgeResponse, error) {
	rsp, err := c.PostCiphersPurgeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersPurgeResponse(rsp)
}

func (c *ClientWithResponses) PostCiphersPurgeWithResponse(ctx context.Context, params *PostCiphersPurgeParams, body PostCiphersPurgeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCiphersPurgeResponse, error) {
	rsp, err := c.PostCiphersPurge(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersPurgeResponse(rsp)
}

// PutCiphersRestoreWithBodyWithResponse request with arbitrary body returning *PutCiphersRestoreResponse
func (c *ClientWithResponses) PutCiphersRestoreWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCiphersRestoreResponse, error) {
	rsp, err := c.PutCiphersRestoreWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCiphersRestoreResponse(rsp)
}

func (c *ClientWithResponses) PutCiphersRestoreWithResponse(ctx context.Context, body PutCiphersRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCiphersRestoreResponse, error) {
	rsp, err := c.PutCiphersRestore(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCiphersRestoreResponse(rsp)
}

// PostCiphersShareWithBodyWithResponse request with arbitrary body returning *PostCiphersShareResponse
func (c *ClientWithResponses) PostCiphersShareWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCiphersShareResponse, error) {
	rsp, err := c.PostCiphersShareWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersShareResponse(rsp)
}

func (c *ClientWithResponses) PostCiphersShareWithResponse(ctx context.Context, body PostCiphersShareJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCiphersShareResponse, error) {
	rsp, err := c.PostCiphersShare(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersShareResponse(rsp)
}

// PutCiphersShareWithBodyWithResponse request with arbitrary body returning *PutCiphersShareResponse
func (c *ClientWithResponses) PutCiphersShareWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCiphersShareResponse, error) {
	rsp, err := c.PutCiphersShareWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCiphersShareResponse(rsp)
}

func (c *ClientWithResponses) PutCiphersShareWithResponse(ctx context.Context, body PutCiphersShareJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCiphersShareResponse, error) {
	rsp, err := c.PutCiphersShare(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCiphersShareResponse(rsp)
}

// DeleteCiphersIdWithResponse request returning *DeleteCiphersIdResponse
func (c *ClientWithResponses) DeleteCiphersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCiphersIdResponse, error) {
	rsp, err := c.DeleteCiphersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCiphersIdResponse(rsp)
}

// GetCiphersIdWithResponse request returning *GetCiphersIdResponse
func (c *ClientWithResponses) GetCiphersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCiphersIdResponse, error) {
	rsp, err := c.GetCiphersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCiphersIdResponse(rsp)
}

// PostCiphersIdWithBodyWithResponse request with arbitrary body returning *PostCiphersIdResponse
func (c *ClientWithResponses) PostCiphersIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCiphersIdResponse, error) {
	rsp, err := c.PostCiphersIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersIdResponse(rsp)
}

func (c *ClientWithResponses) PostCiphersIdWithResponse(ctx context.Context, id string, body PostCiphersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCiphersIdResponse, error) {
	rsp, err := c.PostCiphersId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersIdResponse(rsp)
}

// PutCiphersIdWithBodyWithResponse request with arbitrary body returning *PutCiphersIdResponse
func (c *ClientWithResponses) PutCiphersIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCiphersIdResponse, error) {
	rsp, err := c.PutCiphersIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCiphersIdResponse(rsp)
}

func (c *ClientWithResponses) PutCiphersIdWithResponse(ctx context.Context, id string, body PutCiphersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCiphersIdResponse, error) {
	rsp, err := c.PutCiphersId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCiphersIdResponse(rsp)
}

// DeleteCiphersIdAdminWithResponse request returning *DeleteCiphersIdAdminResponse
func (c *ClientWithResponses) DeleteCiphersIdAdminWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCiphersIdAdminResponse, error) {
	rsp, err := c.DeleteCiphersIdAdmin(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCiphersIdAdminResponse(rsp)
}

// GetCiphersIdAdminWithResponse request returning *GetCiphersIdAdminResponse
func (c *ClientWithResponses) GetCiphersIdAdminWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCiphersIdAdminResponse, error) {
	rsp, err := c.GetCiphersIdAdmin(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCiphersIdAdminResponse(rsp)
}

// PostCiphersIdAdminWithBodyWithResponse request with arbitrary body returning *PostCiphersIdAdminResponse
func (c *ClientWithResponses) PostCiphersIdAdminWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCiphersIdAdminResponse, error) {
	rsp, err := c.PostCiphersIdAdminWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersIdAdminResponse(rsp)
}

func (c *ClientWithResponses) PostCiphersIdAdminWithResponse(ctx context.Context, id string, body PostCiphersIdAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCiphersIdAdminResponse, error) {
	rsp, err := c.PostCiphersIdAdmin(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersIdAdminResponse(rsp)
}

// PutCiphersIdAdminWithBodyWithResponse request with arbitrary body returning *PutCiphersIdAdminResponse
func (c *ClientWithResponses) PutCiphersIdAdminWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCiphersIdAdminResponse, error) {
	rsp, err := c.PutCiphersIdAdminWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCiphersIdAdminResponse(rsp)
}

func (c *ClientWithResponses) PutCiphersIdAdminWithResponse(ctx context.Context, id string, body PutCiphersIdAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCiphersIdAdminResponse, error) {
	rsp, err := c.PutCiphersIdAdmin(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCiphersIdAdminResponse(rsp)
}

// PostCiphersIdAttachmentWithResponse request returning *PostCiphersIdAttachmentResponse
func (c *ClientWithResponses) PostCiphersIdAttachmentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostCiphersIdAttachmentResponse, error) {
	rsp, err := c.PostCiphersIdAttachment(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersIdAttachmentResponse(rsp)
}

// PostCiphersIdAttachmentAdminWithResponse request returning *PostCiphersIdAttachmentAdminResponse
func (c *ClientWithResponses) PostCiphersIdAttachmentAdminWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostCiphersIdAttachmentAdminResponse, error) {
	rsp, err := c.PostCiphersIdAttachmentAdmin(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersIdAttachmentAdminResponse(rsp)
}

// PostCiphersIdAttachmentV2WithBodyWithResponse request with arbitrary body returning *PostCiphersIdAttachmentV2Response
func (c *ClientWithResponses) PostCiphersIdAttachmentV2WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCiphersIdAttachmentV2Response, error) {
	rsp, err := c.PostCiphersIdAttachmentV2WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersIdAttachmentV2Response(rsp)
}

func (c *ClientWithResponses) PostCiphersIdAttachmentV2WithResponse(ctx context.Context, id string, body PostCiphersIdAttachmentV2JSONRequestBody, reqEditors ...RequestEditorFn) (*PostCiphersIdAttachmentV2Response, error) {
	rsp, err := c.PostCiphersIdAttachmentV2(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersIdAttachmentV2Response(rsp)
}

// DeleteCiphersIdAttachmentAttachmentIdWithResponse request returning *DeleteCiphersIdAttachmentAttachmentIdResponse
func (c *ClientWithResponses) DeleteCiphersIdAttachmentAttachmentIdWithResponse(ctx context.Context, id string, attachmentId string, reqEditors ...RequestEditorFn) (*DeleteCiphersIdAttachmentAttachmentIdResponse, error) {
	rsp, err := c.DeleteCiphersIdAttachmentAttachmentId(ctx, id, attachmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCiphersIdAttachmentAttachmentIdResponse(rsp)
}

// GetCiphersIdAttachmentAttachmentIdWithResponse request returning *GetCiphersIdAttachmentAttachmentIdResponse
func (c *ClientWithResponses) GetCiphersIdAttachmentAttachmentIdWithResponse(ctx context.Context, id string, attachmentId string, reqEditors ...RequestEditorFn) (*GetCiphersIdAttachmentAttachmentIdResponse, error) {
	rsp, err := c.GetCiphersIdAttachmentAttachmentId(ctx, id, attachmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCiphersIdAttachmentAttachmentIdResponse(rsp)
}

// PostCiphersIdAttachmentAttachmentIdWithResponse request returning *PostCiphersIdAttachmentAttachmentIdResponse
func (c *ClientWithResponses) PostCiphersIdAttachmentAttachmentIdWithResponse(ctx context.Context, id string, attachmentId string, reqEditors ...RequestEditorFn) (*PostCiphersIdAttachmentAttachmentIdResponse, error) {
	rsp, err := c.PostCiphersIdAttachmentAttachmentId(ctx, id, attachmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersIdAttachmentAttachmentIdResponse(rsp)
}

// DeleteCiphersIdAttachmentAttachmentIdAdminWithResponse request returning *DeleteCiphersIdAttachmentAttachmentIdAdminResponse
func (c *ClientWithResponses) DeleteCiphersIdAttachmentAttachmentIdAdminWithResponse(ctx context.Context, id string, attachmentId string, reqEditors ...RequestEditorFn) (*DeleteCiphersIdAttachmentAttachmentIdAdminResponse, error) {
	rsp, err := c.DeleteCiphersIdAttachmentAttachmentIdAdmin(ctx, id, attachmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCiphersIdAttachmentAttachmentIdAdminResponse(rsp)
}

// PostCiphersIdAttachmentAttachmentIdDeleteWithResponse request returning *PostCiphersIdAttachmentAttachmentIdDeleteResponse
func (c *ClientWithResponses) PostCiphersIdAttachmentAttachmentIdDeleteWithResponse(ctx context.Context, id string, attachmentId string, reqEditors ...RequestEditorFn) (*PostCiphersIdAttachmentAttachmentIdDeleteResponse, error) {
	rsp, err := c.PostCiphersIdAttachmentAttachmentIdDelete(ctx, id, attachmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersIdAttachmentAttachmentIdDeleteResponse(rsp)
}

// PostCiphersIdAttachmentAttachmentIdDeleteAdminWithResponse request returning *PostCiphersIdAttachmentAttachmentIdDeleteAdminResponse
func (c *ClientWithResponses) PostCiphersIdAttachmentAttachmentIdDeleteAdminWithResponse(ctx context.Context, id string, attachmentId string, reqEditors ...RequestEditorFn) (*PostCiphersIdAttachmentAttachmentIdDeleteAdminResponse, error) {
	rsp, err := c.PostCiphersIdAttachmentAttachmentIdDeleteAdmin(ctx, id, attachmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersIdAttachmentAttachmentIdDeleteAdminResponse(rsp)
}

// GetCiphersIdAttachmentAttachmentIdRenewWithResponse request returning *GetCiphersIdAttachmentAttachmentIdRenewResponse
func (c *ClientWithResponses) GetCiphersIdAttachmentAttachmentIdRenewWithResponse(ctx context.Context, id string, attachmentId string, reqEditors ...RequestEditorFn) (*GetCiphersIdAttachmentAttachmentIdRenewResponse, error) {
	rsp, err := c.GetCiphersIdAttachmentAttachmentIdRenew(ctx, id, attachmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCiphersIdAttachmentAttachmentIdRenewResponse(rsp)
}

// PostCiphersIdAttachmentAttachmentIdShareWithResponse request returning *PostCiphersIdAttachmentAttachmentIdShareResponse
func (c *ClientWithResponses) PostCiphersIdAttachmentAttachmentIdShareWithResponse(ctx context.Context, id string, attachmentId string, params *PostCiphersIdAttachmentAttachmentIdShareParams, reqEditors ...RequestEditorFn) (*PostCiphersIdAttachmentAttachmentIdShareResponse, error) {
	rsp, err := c.PostCiphersIdAttachmentAttachmentIdShare(ctx, id, attachmentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersIdAttachmentAttachmentIdShareResponse(rsp)
}

// PostCiphersIdCollectionsWithBodyWithResponse request with arbitrary body returning *PostCiphersIdCollectionsResponse
func (c *ClientWithResponses) PostCiphersIdCollectionsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCiphersIdCollectionsResponse, error) {
	rsp, err := c.PostCiphersIdCollectionsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersIdCollectionsResponse(rsp)
}

func (c *ClientWithResponses) PostCiphersIdCollectionsWithResponse(ctx context.Context, id string, body PostCiphersIdCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCiphersIdCollectionsResponse, error) {
	rsp, err := c.PostCiphersIdCollections(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersIdCollectionsResponse(rsp)
}

// PutCiphersIdCollectionsWithBodyWithResponse request with arbitrary body returning *PutCiphersIdCollectionsResponse
func (c *ClientWithResponses) PutCiphersIdCollectionsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCiphersIdCollectionsResponse, error) {
	rsp, err := c.PutCiphersIdCollectionsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCiphersIdCollectionsResponse(rsp)
}

func (c *ClientWithResponses) PutCiphersIdCollectionsWithResponse(ctx context.Context, id string, body PutCiphersIdCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCiphersIdCollectionsResponse, error) {
	rsp, err := c.PutCiphersIdCollections(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCiphersIdCollectionsResponse(rsp)
}

// PostCiphersIdCollectionsAdminWithBodyWithResponse request with arbitrary body returning *PostCiphersIdCollectionsAdminResponse
func (c *ClientWithResponses) PostCiphersIdCollectionsAdminWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCiphersIdCollectionsAdminResponse, error) {
	rsp, err := c.PostCiphersIdCollectionsAdminWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersIdCollectionsAdminResponse(rsp)
}

func (c *ClientWithResponses) PostCiphersIdCollectionsAdminWithResponse(ctx context.Context, id string, body PostCiphersIdCollectionsAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCiphersIdCollectionsAdminResponse, error) {
	rsp, err := c.PostCiphersIdCollectionsAdmin(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersIdCollectionsAdminResponse(rsp)
}

// PutCiphersIdCollectionsAdminWithBodyWithResponse request with arbitrary body returning *PutCiphersIdCollectionsAdminResponse
func (c *ClientWithResponses) PutCiphersIdCollectionsAdminWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCiphersIdCollectionsAdminResponse, error) {
	rsp, err := c.PutCiphersIdCollectionsAdminWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCiphersIdCollectionsAdminResponse(rsp)
}

func (c *ClientWithResponses) PutCiphersIdCollectionsAdminWithResponse(ctx context.Context, id string, body PutCiphersIdCollectionsAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCiphersIdCollectionsAdminResponse, error) {
	rsp, err := c.PutCiphersIdCollectionsAdmin(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCiphersIdCollectionsAdminResponse(rsp)
}

// PostCiphersIdDeleteWithResponse request returning *PostCiphersIdDeleteResponse
func (c *ClientWithResponses) PostCiphersIdDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostCiphersIdDeleteResponse, error) {
	rsp, err := c.PostCiphersIdDelete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersIdDeleteResponse(rsp)
}

// PutCiphersIdDeleteWithResponse request returning *PutCiphersIdDeleteResponse
func (c *ClientWithResponses) PutCiphersIdDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PutCiphersIdDeleteResponse, error) {
	rsp, err := c.PutCiphersIdDelete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCiphersIdDeleteResponse(rsp)
}

// PostCiphersIdDeleteAdminWithResponse request returning *PostCiphersIdDeleteAdminResponse
func (c *ClientWithResponses) PostCiphersIdDeleteAdminWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostCiphersIdDeleteAdminResponse, error) {
	rsp, err := c.PostCiphersIdDeleteAdmin(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersIdDeleteAdminResponse(rsp)
}

// PutCiphersIdDeleteAdminWithResponse request returning *PutCiphersIdDeleteAdminResponse
func (c *ClientWithResponses) PutCiphersIdDeleteAdminWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PutCiphersIdDeleteAdminResponse, error) {
	rsp, err := c.PutCiphersIdDeleteAdmin(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCiphersIdDeleteAdminResponse(rsp)
}

// GetCiphersIdDetailsWithResponse request returning *GetCiphersIdDetailsResponse
func (c *ClientWithResponses) GetCiphersIdDetailsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCiphersIdDetailsResponse, error) {
	rsp, err := c.GetCiphersIdDetails(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCiphersIdDetailsResponse(rsp)
}

// GetCiphersIdEventsWithResponse request returning *GetCiphersIdEventsResponse
func (c *ClientWithResponses) GetCiphersIdEventsWithResponse(ctx context.Context, id string, params *GetCiphersIdEventsParams, reqEditors ...RequestEditorFn) (*GetCiphersIdEventsResponse, error) {
	rsp, err := c.GetCiphersIdEvents(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCiphersIdEventsResponse(rsp)
}

// GetCiphersIdFullDetailsWithResponse request returning *GetCiphersIdFullDetailsResponse
func (c *ClientWithResponses) GetCiphersIdFullDetailsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCiphersIdFullDetailsResponse, error) {
	rsp, err := c.GetCiphersIdFullDetails(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCiphersIdFullDetailsResponse(rsp)
}

// PostCiphersIdPartialWithBodyWithResponse request with arbitrary body returning *PostCiphersIdPartialResponse
func (c *ClientWithResponses) PostCiphersIdPartialWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCiphersIdPartialResponse, error) {
	rsp, err := c.PostCiphersIdPartialWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersIdPartialResponse(rsp)
}

func (c *ClientWithResponses) PostCiphersIdPartialWithResponse(ctx context.Context, id string, body PostCiphersIdPartialJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCiphersIdPartialResponse, error) {
	rsp, err := c.PostCiphersIdPartial(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersIdPartialResponse(rsp)
}

// PutCiphersIdPartialWithBodyWithResponse request with arbitrary body returning *PutCiphersIdPartialResponse
func (c *ClientWithResponses) PutCiphersIdPartialWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCiphersIdPartialResponse, error) {
	rsp, err := c.PutCiphersIdPartialWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCiphersIdPartialResponse(rsp)
}

func (c *ClientWithResponses) PutCiphersIdPartialWithResponse(ctx context.Context, id string, body PutCiphersIdPartialJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCiphersIdPartialResponse, error) {
	rsp, err := c.PutCiphersIdPartial(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCiphersIdPartialResponse(rsp)
}

// PutCiphersIdRestoreWithResponse request returning *PutCiphersIdRestoreResponse
func (c *ClientWithResponses) PutCiphersIdRestoreWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PutCiphersIdRestoreResponse, error) {
	rsp, err := c.PutCiphersIdRestore(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCiphersIdRestoreResponse(rsp)
}

// PutCiphersIdRestoreAdminWithResponse request returning *PutCiphersIdRestoreAdminResponse
func (c *ClientWithResponses) PutCiphersIdRestoreAdminWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PutCiphersIdRestoreAdminResponse, error) {
	rsp, err := c.PutCiphersIdRestoreAdmin(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCiphersIdRestoreAdminResponse(rsp)
}

// PostCiphersIdShareWithBodyWithResponse request with arbitrary body returning *PostCiphersIdShareResponse
func (c *ClientWithResponses) PostCiphersIdShareWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCiphersIdShareResponse, error) {
	rsp, err := c.PostCiphersIdShareWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersIdShareResponse(rsp)
}

func (c *ClientWithResponses) PostCiphersIdShareWithResponse(ctx context.Context, id string, body PostCiphersIdShareJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCiphersIdShareResponse, error) {
	rsp, err := c.PostCiphersIdShare(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCiphersIdShareResponse(rsp)
}

// PutCiphersIdShareWithBodyWithResponse request with arbitrary body returning *PutCiphersIdShareResponse
func (c *ClientWithResponses) PutCiphersIdShareWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCiphersIdShareResponse, error) {
	rsp, err := c.PutCiphersIdShareWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCiphersIdShareResponse(rsp)
}

func (c *ClientWithResponses) PutCiphersIdShareWithResponse(ctx context.Context, id string, body PutCiphersIdShareJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCiphersIdShareResponse, error) {
	rsp, err := c.PutCiphersIdShare(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCiphersIdShareResponse(rsp)
}

// GetCollectionsWithResponse request returning *GetCollectionsResponse
func (c *ClientWithResponses) GetCollectionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCollectionsResponse, error) {
	rsp, err := c.GetCollections(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCollectionsResponse(rsp)
}

// GetDevicesWithResponse request returning *GetDevicesResponse
func (c *ClientWithResponses) GetDevicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDevicesResponse, error) {
	rsp, err := c.GetDevices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDevicesResponse(rsp)
}

// PostDevicesWithBodyWithResponse request with arbitrary body returning *PostDevicesResponse
func (c *ClientWithResponses) PostDevicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDevicesResponse, error) {
	rsp, err := c.PostDevicesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDevicesResponse(rsp)
}

func (c *ClientWithResponses) PostDevicesWithResponse(ctx context.Context, body PostDevicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDevicesResponse, error) {
	rsp, err := c.PostDevices(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDevicesResponse(rsp)
}

// GetDevicesIdentifierIdentifierWithResponse request returning *GetDevicesIdentifierIdentifierResponse
func (c *ClientWithResponses) GetDevicesIdentifierIdentifierWithResponse(ctx context.Context, identifier string, reqEditors ...RequestEditorFn) (*GetDevicesIdentifierIdentifierResponse, error) {
	rsp, err := c.GetDevicesIdentifierIdentifier(ctx, identifier, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDevicesIdentifierIdentifierResponse(rsp)
}

// PostDevicesIdentifierIdentifierClearTokenWithResponse request returning *PostDevicesIdentifierIdentifierClearTokenResponse
func (c *ClientWithResponses) PostDevicesIdentifierIdentifierClearTokenWithResponse(ctx context.Context, identifier string, reqEditors ...RequestEditorFn) (*PostDevicesIdentifierIdentifierClearTokenResponse, error) {
	rsp, err := c.PostDevicesIdentifierIdentifierClearToken(ctx, identifier, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDevicesIdentifierIdentifierClearTokenResponse(rsp)
}

// PutDevicesIdentifierIdentifierClearTokenWithResponse request returning *PutDevicesIdentifierIdentifierClearTokenResponse
func (c *ClientWithResponses) PutDevicesIdentifierIdentifierClearTokenWithResponse(ctx context.Context, identifier string, reqEditors ...RequestEditorFn) (*PutDevicesIdentifierIdentifierClearTokenResponse, error) {
	rsp, err := c.PutDevicesIdentifierIdentifierClearToken(ctx, identifier, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDevicesIdentifierIdentifierClearTokenResponse(rsp)
}

// PostDevicesIdentifierIdentifierTokenWithBodyWithResponse request with arbitrary body returning *PostDevicesIdentifierIdentifierTokenResponse
func (c *ClientWithResponses) PostDevicesIdentifierIdentifierTokenWithBodyWithResponse(ctx context.Context, identifier string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDevicesIdentifierIdentifierTokenResponse, error) {
	rsp, err := c.PostDevicesIdentifierIdentifierTokenWithBody(ctx, identifier, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDevicesIdentifierIdentifierTokenResponse(rsp)
}

func (c *ClientWithResponses) PostDevicesIdentifierIdentifierTokenWithResponse(ctx context.Context, identifier string, body PostDevicesIdentifierIdentifierTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDevicesIdentifierIdentifierTokenResponse, error) {
	rsp, err := c.PostDevicesIdentifierIdentifierToken(ctx, identifier, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDevicesIdentifierIdentifierTokenResponse(rsp)
}

// PutDevicesIdentifierIdentifierTokenWithBodyWithResponse request with arbitrary body returning *PutDevicesIdentifierIdentifierTokenResponse
func (c *ClientWithResponses) PutDevicesIdentifierIdentifierTokenWithBodyWithResponse(ctx context.Context, identifier string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDevicesIdentifierIdentifierTokenResponse, error) {
	rsp, err := c.PutDevicesIdentifierIdentifierTokenWithBody(ctx, identifier, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDevicesIdentifierIdentifierTokenResponse(rsp)
}

func (c *ClientWithResponses) PutDevicesIdentifierIdentifierTokenWithResponse(ctx context.Context, identifier string, body PutDevicesIdentifierIdentifierTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDevicesIdentifierIdentifierTokenResponse, error) {
	rsp, err := c.PutDevicesIdentifierIdentifierToken(ctx, identifier, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDevicesIdentifierIdentifierTokenResponse(rsp)
}

// DeleteDevicesIdWithResponse request returning *DeleteDevicesIdResponse
func (c *ClientWithResponses) DeleteDevicesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteDevicesIdResponse, error) {
	rsp, err := c.DeleteDevicesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDevicesIdResponse(rsp)
}

// GetDevicesIdWithResponse request returning *GetDevicesIdResponse
func (c *ClientWithResponses) GetDevicesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetDevicesIdResponse, error) {
	rsp, err := c.GetDevicesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDevicesIdResponse(rsp)
}

// PostDevicesIdWithBodyWithResponse request with arbitrary body returning *PostDevicesIdResponse
func (c *ClientWithResponses) PostDevicesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDevicesIdResponse, error) {
	rsp, err := c.PostDevicesIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDevicesIdResponse(rsp)
}

func (c *ClientWithResponses) PostDevicesIdWithResponse(ctx context.Context, id string, body PostDevicesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDevicesIdResponse, error) {
	rsp, err := c.PostDevicesId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDevicesIdResponse(rsp)
}

// PutDevicesIdWithBodyWithResponse request with arbitrary body returning *PutDevicesIdResponse
func (c *ClientWithResponses) PutDevicesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDevicesIdResponse, error) {
	rsp, err := c.PutDevicesIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDevicesIdResponse(rsp)
}

func (c *ClientWithResponses) PutDevicesIdWithResponse(ctx context.Context, id string, body PutDevicesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDevicesIdResponse, error) {
	rsp, err := c.PutDevicesId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDevicesIdResponse(rsp)
}

// PostDevicesIdDeleteWithResponse request returning *PostDevicesIdDeleteResponse
func (c *ClientWithResponses) PostDevicesIdDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostDevicesIdDeleteResponse, error) {
	rsp, err := c.PostDevicesIdDelete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDevicesIdDeleteResponse(rsp)
}

// GetEmergencyAccessGrantedWithResponse request returning *GetEmergencyAccessGrantedResponse
func (c *ClientWithResponses) GetEmergencyAccessGrantedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEmergencyAccessGrantedResponse, error) {
	rsp, err := c.GetEmergencyAccessGranted(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmergencyAccessGrantedResponse(rsp)
}

// PostEmergencyAccessInviteWithBodyWithResponse request with arbitrary body returning *PostEmergencyAccessInviteResponse
func (c *ClientWithResponses) PostEmergencyAccessInviteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEmergencyAccessInviteResponse, error) {
	rsp, err := c.PostEmergencyAccessInviteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEmergencyAccessInviteResponse(rsp)
}

func (c *ClientWithResponses) PostEmergencyAccessInviteWithResponse(ctx context.Context, body PostEmergencyAccessInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEmergencyAccessInviteResponse, error) {
	rsp, err := c.PostEmergencyAccessInvite(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEmergencyAccessInviteResponse(rsp)
}

// GetEmergencyAccessTrustedWithResponse request returning *GetEmergencyAccessTrustedResponse
func (c *ClientWithResponses) GetEmergencyAccessTrustedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEmergencyAccessTrustedResponse, error) {
	rsp, err := c.GetEmergencyAccessTrusted(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmergencyAccessTrustedResponse(rsp)
}

// DeleteEmergencyAccessIdWithResponse request returning *DeleteEmergencyAccessIdResponse
func (c *ClientWithResponses) DeleteEmergencyAccessIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteEmergencyAccessIdResponse, error) {
	rsp, err := c.DeleteEmergencyAccessId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEmergencyAccessIdResponse(rsp)
}

// GetEmergencyAccessIdWithResponse request returning *GetEmergencyAccessIdResponse
func (c *ClientWithResponses) GetEmergencyAccessIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetEmergencyAccessIdResponse, error) {
	rsp, err := c.GetEmergencyAccessId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmergencyAccessIdResponse(rsp)
}

// PostEmergencyAccessIdWithBodyWithResponse request with arbitrary body returning *PostEmergencyAccessIdResponse
func (c *ClientWithResponses) PostEmergencyAccessIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEmergencyAccessIdResponse, error) {
	rsp, err := c.PostEmergencyAccessIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEmergencyAccessIdResponse(rsp)
}

func (c *ClientWithResponses) PostEmergencyAccessIdWithResponse(ctx context.Context, id string, body PostEmergencyAccessIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEmergencyAccessIdResponse, error) {
	rsp, err := c.PostEmergencyAccessId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEmergencyAccessIdResponse(rsp)
}

// PutEmergencyAccessIdWithBodyWithResponse request with arbitrary body returning *PutEmergencyAccessIdResponse
func (c *ClientWithResponses) PutEmergencyAccessIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutEmergencyAccessIdResponse, error) {
	rsp, err := c.PutEmergencyAccessIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutEmergencyAccessIdResponse(rsp)
}

func (c *ClientWithResponses) PutEmergencyAccessIdWithResponse(ctx context.Context, id string, body PutEmergencyAccessIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutEmergencyAccessIdResponse, error) {
	rsp, err := c.PutEmergencyAccessId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutEmergencyAccessIdResponse(rsp)
}

// PostEmergencyAccessIdAcceptWithBodyWithResponse request with arbitrary body returning *PostEmergencyAccessIdAcceptResponse
func (c *ClientWithResponses) PostEmergencyAccessIdAcceptWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEmergencyAccessIdAcceptResponse, error) {
	rsp, err := c.PostEmergencyAccessIdAcceptWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEmergencyAccessIdAcceptResponse(rsp)
}

func (c *ClientWithResponses) PostEmergencyAccessIdAcceptWithResponse(ctx context.Context, id string, body PostEmergencyAccessIdAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEmergencyAccessIdAcceptResponse, error) {
	rsp, err := c.PostEmergencyAccessIdAccept(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEmergencyAccessIdAcceptResponse(rsp)
}

// PostEmergencyAccessIdApproveWithResponse request returning *PostEmergencyAccessIdApproveResponse
func (c *ClientWithResponses) PostEmergencyAccessIdApproveWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostEmergencyAccessIdApproveResponse, error) {
	rsp, err := c.PostEmergencyAccessIdApprove(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEmergencyAccessIdApproveResponse(rsp)
}

// PostEmergencyAccessIdConfirmWithBodyWithResponse request with arbitrary body returning *PostEmergencyAccessIdConfirmResponse
func (c *ClientWithResponses) PostEmergencyAccessIdConfirmWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEmergencyAccessIdConfirmResponse, error) {
	rsp, err := c.PostEmergencyAccessIdConfirmWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEmergencyAccessIdConfirmResponse(rsp)
}

func (c *ClientWithResponses) PostEmergencyAccessIdConfirmWithResponse(ctx context.Context, id string, body PostEmergencyAccessIdConfirmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEmergencyAccessIdConfirmResponse, error) {
	rsp, err := c.PostEmergencyAccessIdConfirm(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEmergencyAccessIdConfirmResponse(rsp)
}

// PostEmergencyAccessIdDeleteWithResponse request returning *PostEmergencyAccessIdDeleteResponse
func (c *ClientWithResponses) PostEmergencyAccessIdDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostEmergencyAccessIdDeleteResponse, error) {
	rsp, err := c.PostEmergencyAccessIdDelete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEmergencyAccessIdDeleteResponse(rsp)
}

// PostEmergencyAccessIdInitiateWithResponse request returning *PostEmergencyAccessIdInitiateResponse
func (c *ClientWithResponses) PostEmergencyAccessIdInitiateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostEmergencyAccessIdInitiateResponse, error) {
	rsp, err := c.PostEmergencyAccessIdInitiate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEmergencyAccessIdInitiateResponse(rsp)
}

// PostEmergencyAccessIdPasswordWithBodyWithResponse request with arbitrary body returning *PostEmergencyAccessIdPasswordResponse
func (c *ClientWithResponses) PostEmergencyAccessIdPasswordWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEmergencyAccessIdPasswordResponse, error) {
	rsp, err := c.PostEmergencyAccessIdPasswordWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEmergencyAccessIdPasswordResponse(rsp)
}

func (c *ClientWithResponses) PostEmergencyAccessIdPasswordWithResponse(ctx context.Context, id string, body PostEmergencyAccessIdPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEmergencyAccessIdPasswordResponse, error) {
	rsp, err := c.PostEmergencyAccessIdPassword(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEmergencyAccessIdPasswordResponse(rsp)
}

// GetEmergencyAccessIdPoliciesWithResponse request returning *GetEmergencyAccessIdPoliciesResponse
func (c *ClientWithResponses) GetEmergencyAccessIdPoliciesWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetEmergencyAccessIdPoliciesResponse, error) {
	rsp, err := c.GetEmergencyAccessIdPolicies(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmergencyAccessIdPoliciesResponse(rsp)
}

// PostEmergencyAccessIdReinviteWithResponse request returning *PostEmergencyAccessIdReinviteResponse
func (c *ClientWithResponses) PostEmergencyAccessIdReinviteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostEmergencyAccessIdReinviteResponse, error) {
	rsp, err := c.PostEmergencyAccessIdReinvite(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEmergencyAccessIdReinviteResponse(rsp)
}

// PostEmergencyAccessIdRejectWithResponse request returning *PostEmergencyAccessIdRejectResponse
func (c *ClientWithResponses) PostEmergencyAccessIdRejectWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostEmergencyAccessIdRejectResponse, error) {
	rsp, err := c.PostEmergencyAccessIdReject(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEmergencyAccessIdRejectResponse(rsp)
}

// PostEmergencyAccessIdTakeoverWithResponse request returning *PostEmergencyAccessIdTakeoverResponse
func (c *ClientWithResponses) PostEmergencyAccessIdTakeoverWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostEmergencyAccessIdTakeoverResponse, error) {
	rsp, err := c.PostEmergencyAccessIdTakeover(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEmergencyAccessIdTakeoverResponse(rsp)
}

// PostEmergencyAccessIdViewWithResponse request returning *PostEmergencyAccessIdViewResponse
func (c *ClientWithResponses) PostEmergencyAccessIdViewWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostEmergencyAccessIdViewResponse, error) {
	rsp, err := c.PostEmergencyAccessIdView(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEmergencyAccessIdViewResponse(rsp)
}

// GetEmergencyAccessIdCipherIdAttachmentAttachmentIdWithResponse request returning *GetEmergencyAccessIdCipherIdAttachmentAttachmentIdResponse
func (c *ClientWithResponses) GetEmergencyAccessIdCipherIdAttachmentAttachmentIdWithResponse(ctx context.Context, id string, cipherId string, attachmentId string, reqEditors ...RequestEditorFn) (*GetEmergencyAccessIdCipherIdAttachmentAttachmentIdResponse, error) {
	rsp, err := c.GetEmergencyAccessIdCipherIdAttachmentAttachmentId(ctx, id, cipherId, attachmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmergencyAccessIdCipherIdAttachmentAttachmentIdResponse(rsp)
}

// GetEventsWithResponse request returning *GetEventsResponse
func (c *ClientWithResponses) GetEventsWithResponse(ctx context.Context, params *GetEventsParams, reqEditors ...RequestEditorFn) (*GetEventsResponse, error) {
	rsp, err := c.GetEvents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEventsResponse(rsp)
}

// GetFoldersWithResponse request returning *GetFoldersResponse
func (c *ClientWithResponses) GetFoldersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFoldersResponse, error) {
	rsp, err := c.GetFolders(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFoldersResponse(rsp)
}

// PostFoldersWithBodyWithResponse request with arbitrary body returning *PostFoldersResponse
func (c *ClientWithResponses) PostFoldersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFoldersResponse, error) {
	rsp, err := c.PostFoldersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFoldersResponse(rsp)
}

func (c *ClientWithResponses) PostFoldersWithResponse(ctx context.Context, body PostFoldersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFoldersResponse, error) {
	rsp, err := c.PostFolders(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFoldersResponse(rsp)
}

// DeleteFoldersIdWithResponse request returning *DeleteFoldersIdResponse
func (c *ClientWithResponses) DeleteFoldersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFoldersIdResponse, error) {
	rsp, err := c.DeleteFoldersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFoldersIdResponse(rsp)
}

// GetFoldersIdWithResponse request returning *GetFoldersIdResponse
func (c *ClientWithResponses) GetFoldersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFoldersIdResponse, error) {
	rsp, err := c.GetFoldersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFoldersIdResponse(rsp)
}

// PostFoldersIdWithBodyWithResponse request with arbitrary body returning *PostFoldersIdResponse
func (c *ClientWithResponses) PostFoldersIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFoldersIdResponse, error) {
	rsp, err := c.PostFoldersIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFoldersIdResponse(rsp)
}

func (c *ClientWithResponses) PostFoldersIdWithResponse(ctx context.Context, id string, body PostFoldersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFoldersIdResponse, error) {
	rsp, err := c.PostFoldersId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFoldersIdResponse(rsp)
}

// PutFoldersIdWithBodyWithResponse request with arbitrary body returning *PutFoldersIdResponse
func (c *ClientWithResponses) PutFoldersIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFoldersIdResponse, error) {
	rsp, err := c.PutFoldersIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFoldersIdResponse(rsp)
}

func (c *ClientWithResponses) PutFoldersIdWithResponse(ctx context.Context, id string, body PutFoldersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFoldersIdResponse, error) {
	rsp, err := c.PutFoldersId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFoldersIdResponse(rsp)
}

// PostFoldersIdDeleteWithResponse request returning *PostFoldersIdDeleteResponse
func (c *ClientWithResponses) PostFoldersIdDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostFoldersIdDeleteResponse, error) {
	rsp, err := c.PostFoldersIdDelete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFoldersIdDeleteResponse(rsp)
}

// GetHibpBreachWithResponse request returning *GetHibpBreachResponse
func (c *ClientWithResponses) GetHibpBreachWithResponse(ctx context.Context, params *GetHibpBreachParams, reqEditors ...RequestEditorFn) (*GetHibpBreachResponse, error) {
	rsp, err := c.GetHibpBreach(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHibpBreachResponse(rsp)
}

// PostInstallationsWithBodyWithResponse request with arbitrary body returning *PostInstallationsResponse
func (c *ClientWithResponses) PostInstallationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstallationsResponse, error) {
	rsp, err := c.PostInstallationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstallationsResponse(rsp)
}

func (c *ClientWithResponses) PostInstallationsWithResponse(ctx context.Context, body PostInstallationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstallationsResponse, error) {
	rsp, err := c.PostInstallations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstallationsResponse(rsp)
}

// GetInstallationsIdWithResponse request returning *GetInstallationsIdResponse
func (c *ClientWithResponses) GetInstallationsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetInstallationsIdResponse, error) {
	rsp, err := c.GetInstallationsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInstallationsIdResponse(rsp)
}

// GetIpWithResponse request returning *GetIpResponse
func (c *ClientWithResponses) GetIpWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetIpResponse, error) {
	rsp, err := c.GetIp(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIpResponse(rsp)
}

// GetLicensesOrganizationIdWithResponse request returning *GetLicensesOrganizationIdResponse
func (c *ClientWithResponses) GetLicensesOrganizationIdWithResponse(ctx context.Context, id string, params *GetLicensesOrganizationIdParams, reqEditors ...RequestEditorFn) (*GetLicensesOrganizationIdResponse, error) {
	rsp, err := c.GetLicensesOrganizationId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLicensesOrganizationIdResponse(rsp)
}

// GetLicensesUserIdWithResponse request returning *GetLicensesUserIdResponse
func (c *ClientWithResponses) GetLicensesUserIdWithResponse(ctx context.Context, id string, params *GetLicensesUserIdParams, reqEditors ...RequestEditorFn) (*GetLicensesUserIdResponse, error) {
	rsp, err := c.GetLicensesUserId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLicensesUserIdResponse(rsp)
}

// GetNowWithResponse request returning *GetNowResponse
func (c *ClientWithResponses) GetNowWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNowResponse, error) {
	rsp, err := c.GetNow(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNowResponse(rsp)
}

// GetOrganizationsWithResponse request returning *GetOrganizationsResponse
func (c *ClientWithResponses) GetOrganizationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOrganizationsResponse, error) {
	rsp, err := c.GetOrganizations(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsResponse(rsp)
}

// PostOrganizationsWithBodyWithResponse request with arbitrary body returning *PostOrganizationsResponse
func (c *ClientWithResponses) PostOrganizationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsResponse, error) {
	rsp, err := c.PostOrganizationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsWithResponse(ctx context.Context, body PostOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsResponse, error) {
	rsp, err := c.PostOrganizations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsResponse(rsp)
}

// PostOrganizationsLicenseWithBodyWithResponse request with arbitrary body returning *PostOrganizationsLicenseResponse
func (c *ClientWithResponses) PostOrganizationsLicenseWithBodyWithResponse(ctx context.Context, params *PostOrganizationsLicenseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsLicenseResponse, error) {
	rsp, err := c.PostOrganizationsLicenseWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsLicenseResponse(rsp)
}

// DeleteOrganizationsIdWithBodyWithResponse request with arbitrary body returning *DeleteOrganizationsIdResponse
func (c *ClientWithResponses) DeleteOrganizationsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteOrganizationsIdResponse, error) {
	rsp, err := c.DeleteOrganizationsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationsIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteOrganizationsIdWithResponse(ctx context.Context, id string, body DeleteOrganizationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteOrganizationsIdResponse, error) {
	rsp, err := c.DeleteOrganizationsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationsIdResponse(rsp)
}

// GetOrganizationsIdWithResponse request returning *GetOrganizationsIdResponse
func (c *ClientWithResponses) GetOrganizationsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetOrganizationsIdResponse, error) {
	rsp, err := c.GetOrganizationsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsIdResponse(rsp)
}

// PostOrganizationsIdWithBodyWithResponse request with arbitrary body returning *PostOrganizationsIdResponse
func (c *ClientWithResponses) PostOrganizationsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsIdResponse, error) {
	rsp, err := c.PostOrganizationsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsIdWithResponse(ctx context.Context, id string, body PostOrganizationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsIdResponse, error) {
	rsp, err := c.PostOrganizationsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdResponse(rsp)
}

// PutOrganizationsIdWithBodyWithResponse request with arbitrary body returning *PutOrganizationsIdResponse
func (c *ClientWithResponses) PutOrganizationsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrganizationsIdResponse, error) {
	rsp, err := c.PutOrganizationsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrganizationsIdResponse(rsp)
}

func (c *ClientWithResponses) PutOrganizationsIdWithResponse(ctx context.Context, id string, body PutOrganizationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsIdResponse, error) {
	rsp, err := c.PutOrganizationsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrganizationsIdResponse(rsp)
}

// PostOrganizationsIdApiKeyWithBodyWithResponse request with arbitrary body returning *PostOrganizationsIdApiKeyResponse
func (c *ClientWithResponses) PostOrganizationsIdApiKeyWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsIdApiKeyResponse, error) {
	rsp, err := c.PostOrganizationsIdApiKeyWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdApiKeyResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsIdApiKeyWithResponse(ctx context.Context, id string, body PostOrganizationsIdApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsIdApiKeyResponse, error) {
	rsp, err := c.PostOrganizationsIdApiKey(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdApiKeyResponse(rsp)
}

// GetOrganizationsIdBillingWithResponse request returning *GetOrganizationsIdBillingResponse
func (c *ClientWithResponses) GetOrganizationsIdBillingWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetOrganizationsIdBillingResponse, error) {
	rsp, err := c.GetOrganizationsIdBilling(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsIdBillingResponse(rsp)
}

// PostOrganizationsIdCancelWithResponse request returning *PostOrganizationsIdCancelResponse
func (c *ClientWithResponses) PostOrganizationsIdCancelWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostOrganizationsIdCancelResponse, error) {
	rsp, err := c.PostOrganizationsIdCancel(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdCancelResponse(rsp)
}

// PostOrganizationsIdDeleteWithBodyWithResponse request with arbitrary body returning *PostOrganizationsIdDeleteResponse
func (c *ClientWithResponses) PostOrganizationsIdDeleteWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsIdDeleteResponse, error) {
	rsp, err := c.PostOrganizationsIdDeleteWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdDeleteResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsIdDeleteWithResponse(ctx context.Context, id string, body PostOrganizationsIdDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsIdDeleteResponse, error) {
	rsp, err := c.PostOrganizationsIdDelete(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdDeleteResponse(rsp)
}

// GetOrganizationsIdEventsWithResponse request returning *GetOrganizationsIdEventsResponse
func (c *ClientWithResponses) GetOrganizationsIdEventsWithResponse(ctx context.Context, id string, params *GetOrganizationsIdEventsParams, reqEditors ...RequestEditorFn) (*GetOrganizationsIdEventsResponse, error) {
	rsp, err := c.GetOrganizationsIdEvents(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsIdEventsResponse(rsp)
}

// PostOrganizationsIdImportWithBodyWithResponse request with arbitrary body returning *PostOrganizationsIdImportResponse
func (c *ClientWithResponses) PostOrganizationsIdImportWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsIdImportResponse, error) {
	rsp, err := c.PostOrganizationsIdImportWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdImportResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsIdImportWithResponse(ctx context.Context, id string, body PostOrganizationsIdImportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsIdImportResponse, error) {
	rsp, err := c.PostOrganizationsIdImport(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdImportResponse(rsp)
}

// GetOrganizationsIdKeysWithResponse request returning *GetOrganizationsIdKeysResponse
func (c *ClientWithResponses) GetOrganizationsIdKeysWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetOrganizationsIdKeysResponse, error) {
	rsp, err := c.GetOrganizationsIdKeys(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsIdKeysResponse(rsp)
}

// PostOrganizationsIdKeysWithBodyWithResponse request with arbitrary body returning *PostOrganizationsIdKeysResponse
func (c *ClientWithResponses) PostOrganizationsIdKeysWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsIdKeysResponse, error) {
	rsp, err := c.PostOrganizationsIdKeysWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdKeysResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsIdKeysWithResponse(ctx context.Context, id string, body PostOrganizationsIdKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsIdKeysResponse, error) {
	rsp, err := c.PostOrganizationsIdKeys(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdKeysResponse(rsp)
}

// PostOrganizationsIdLeaveWithResponse request returning *PostOrganizationsIdLeaveResponse
func (c *ClientWithResponses) PostOrganizationsIdLeaveWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostOrganizationsIdLeaveResponse, error) {
	rsp, err := c.PostOrganizationsIdLeave(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdLeaveResponse(rsp)
}

// GetOrganizationsIdLicenseWithResponse request returning *GetOrganizationsIdLicenseResponse
func (c *ClientWithResponses) GetOrganizationsIdLicenseWithResponse(ctx context.Context, id string, params *GetOrganizationsIdLicenseParams, reqEditors ...RequestEditorFn) (*GetOrganizationsIdLicenseResponse, error) {
	rsp, err := c.GetOrganizationsIdLicense(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsIdLicenseResponse(rsp)
}

// PostOrganizationsIdLicenseWithBodyWithResponse request with arbitrary body returning *PostOrganizationsIdLicenseResponse
func (c *ClientWithResponses) PostOrganizationsIdLicenseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsIdLicenseResponse, error) {
	rsp, err := c.PostOrganizationsIdLicenseWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdLicenseResponse(rsp)
}

// PostOrganizationsIdPaymentWithBodyWithResponse request with arbitrary body returning *PostOrganizationsIdPaymentResponse
func (c *ClientWithResponses) PostOrganizationsIdPaymentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsIdPaymentResponse, error) {
	rsp, err := c.PostOrganizationsIdPaymentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdPaymentResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsIdPaymentWithResponse(ctx context.Context, id string, body PostOrganizationsIdPaymentJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsIdPaymentResponse, error) {
	rsp, err := c.PostOrganizationsIdPayment(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdPaymentResponse(rsp)
}

// PostOrganizationsIdReinstateWithResponse request returning *PostOrganizationsIdReinstateResponse
func (c *ClientWithResponses) PostOrganizationsIdReinstateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostOrganizationsIdReinstateResponse, error) {
	rsp, err := c.PostOrganizationsIdReinstate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdReinstateResponse(rsp)
}

// PostOrganizationsIdRotateApiKeyWithBodyWithResponse request with arbitrary body returning *PostOrganizationsIdRotateApiKeyResponse
func (c *ClientWithResponses) PostOrganizationsIdRotateApiKeyWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsIdRotateApiKeyResponse, error) {
	rsp, err := c.PostOrganizationsIdRotateApiKeyWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdRotateApiKeyResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsIdRotateApiKeyWithResponse(ctx context.Context, id string, body PostOrganizationsIdRotateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsIdRotateApiKeyResponse, error) {
	rsp, err := c.PostOrganizationsIdRotateApiKey(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdRotateApiKeyResponse(rsp)
}

// PostOrganizationsIdSeatWithBodyWithResponse request with arbitrary body returning *PostOrganizationsIdSeatResponse
func (c *ClientWithResponses) PostOrganizationsIdSeatWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsIdSeatResponse, error) {
	rsp, err := c.PostOrganizationsIdSeatWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdSeatResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsIdSeatWithResponse(ctx context.Context, id string, body PostOrganizationsIdSeatJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsIdSeatResponse, error) {
	rsp, err := c.PostOrganizationsIdSeat(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdSeatResponse(rsp)
}

// PostOrganizationsIdStorageWithBodyWithResponse request with arbitrary body returning *PostOrganizationsIdStorageResponse
func (c *ClientWithResponses) PostOrganizationsIdStorageWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsIdStorageResponse, error) {
	rsp, err := c.PostOrganizationsIdStorageWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdStorageResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsIdStorageWithResponse(ctx context.Context, id string, body PostOrganizationsIdStorageJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsIdStorageResponse, error) {
	rsp, err := c.PostOrganizationsIdStorage(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdStorageResponse(rsp)
}

// GetOrganizationsIdSubscriptionWithResponse request returning *GetOrganizationsIdSubscriptionResponse
func (c *ClientWithResponses) GetOrganizationsIdSubscriptionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetOrganizationsIdSubscriptionResponse, error) {
	rsp, err := c.GetOrganizationsIdSubscription(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsIdSubscriptionResponse(rsp)
}

// GetOrganizationsIdTaxWithResponse request returning *GetOrganizationsIdTaxResponse
func (c *ClientWithResponses) GetOrganizationsIdTaxWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetOrganizationsIdTaxResponse, error) {
	rsp, err := c.GetOrganizationsIdTax(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsIdTaxResponse(rsp)
}

// PutOrganizationsIdTaxWithBodyWithResponse request with arbitrary body returning *PutOrganizationsIdTaxResponse
func (c *ClientWithResponses) PutOrganizationsIdTaxWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrganizationsIdTaxResponse, error) {
	rsp, err := c.PutOrganizationsIdTaxWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrganizationsIdTaxResponse(rsp)
}

func (c *ClientWithResponses) PutOrganizationsIdTaxWithResponse(ctx context.Context, id string, body PutOrganizationsIdTaxJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsIdTaxResponse, error) {
	rsp, err := c.PutOrganizationsIdTax(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrganizationsIdTaxResponse(rsp)
}

// GetOrganizationsIdTwoFactorWithResponse request returning *GetOrganizationsIdTwoFactorResponse
func (c *ClientWithResponses) GetOrganizationsIdTwoFactorWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetOrganizationsIdTwoFactorResponse, error) {
	rsp, err := c.GetOrganizationsIdTwoFactor(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsIdTwoFactorResponse(rsp)
}

// PostOrganizationsIdTwoFactorDisableWithBodyWithResponse request with arbitrary body returning *PostOrganizationsIdTwoFactorDisableResponse
func (c *ClientWithResponses) PostOrganizationsIdTwoFactorDisableWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsIdTwoFactorDisableResponse, error) {
	rsp, err := c.PostOrganizationsIdTwoFactorDisableWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdTwoFactorDisableResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsIdTwoFactorDisableWithResponse(ctx context.Context, id string, body PostOrganizationsIdTwoFactorDisableJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsIdTwoFactorDisableResponse, error) {
	rsp, err := c.PostOrganizationsIdTwoFactorDisable(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdTwoFactorDisableResponse(rsp)
}

// PutOrganizationsIdTwoFactorDisableWithBodyWithResponse request with arbitrary body returning *PutOrganizationsIdTwoFactorDisableResponse
func (c *ClientWithResponses) PutOrganizationsIdTwoFactorDisableWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrganizationsIdTwoFactorDisableResponse, error) {
	rsp, err := c.PutOrganizationsIdTwoFactorDisableWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrganizationsIdTwoFactorDisableResponse(rsp)
}

func (c *ClientWithResponses) PutOrganizationsIdTwoFactorDisableWithResponse(ctx context.Context, id string, body PutOrganizationsIdTwoFactorDisableJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsIdTwoFactorDisableResponse, error) {
	rsp, err := c.PutOrganizationsIdTwoFactorDisable(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrganizationsIdTwoFactorDisableResponse(rsp)
}

// PostOrganizationsIdTwoFactorDuoWithBodyWithResponse request with arbitrary body returning *PostOrganizationsIdTwoFactorDuoResponse
func (c *ClientWithResponses) PostOrganizationsIdTwoFactorDuoWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsIdTwoFactorDuoResponse, error) {
	rsp, err := c.PostOrganizationsIdTwoFactorDuoWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdTwoFactorDuoResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsIdTwoFactorDuoWithResponse(ctx context.Context, id string, body PostOrganizationsIdTwoFactorDuoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsIdTwoFactorDuoResponse, error) {
	rsp, err := c.PostOrganizationsIdTwoFactorDuo(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdTwoFactorDuoResponse(rsp)
}

// PutOrganizationsIdTwoFactorDuoWithBodyWithResponse request with arbitrary body returning *PutOrganizationsIdTwoFactorDuoResponse
func (c *ClientWithResponses) PutOrganizationsIdTwoFactorDuoWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrganizationsIdTwoFactorDuoResponse, error) {
	rsp, err := c.PutOrganizationsIdTwoFactorDuoWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrganizationsIdTwoFactorDuoResponse(rsp)
}

func (c *ClientWithResponses) PutOrganizationsIdTwoFactorDuoWithResponse(ctx context.Context, id string, body PutOrganizationsIdTwoFactorDuoJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsIdTwoFactorDuoResponse, error) {
	rsp, err := c.PutOrganizationsIdTwoFactorDuo(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrganizationsIdTwoFactorDuoResponse(rsp)
}

// PostOrganizationsIdTwoFactorGetDuoWithBodyWithResponse request with arbitrary body returning *PostOrganizationsIdTwoFactorGetDuoResponse
func (c *ClientWithResponses) PostOrganizationsIdTwoFactorGetDuoWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsIdTwoFactorGetDuoResponse, error) {
	rsp, err := c.PostOrganizationsIdTwoFactorGetDuoWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdTwoFactorGetDuoResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsIdTwoFactorGetDuoWithResponse(ctx context.Context, id string, body PostOrganizationsIdTwoFactorGetDuoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsIdTwoFactorGetDuoResponse, error) {
	rsp, err := c.PostOrganizationsIdTwoFactorGetDuo(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdTwoFactorGetDuoResponse(rsp)
}

// PostOrganizationsIdUpgradeWithBodyWithResponse request with arbitrary body returning *PostOrganizationsIdUpgradeResponse
func (c *ClientWithResponses) PostOrganizationsIdUpgradeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsIdUpgradeResponse, error) {
	rsp, err := c.PostOrganizationsIdUpgradeWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdUpgradeResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsIdUpgradeWithResponse(ctx context.Context, id string, body PostOrganizationsIdUpgradeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsIdUpgradeResponse, error) {
	rsp, err := c.PostOrganizationsIdUpgrade(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdUpgradeResponse(rsp)
}

// PostOrganizationsIdVerifyBankWithBodyWithResponse request with arbitrary body returning *PostOrganizationsIdVerifyBankResponse
func (c *ClientWithResponses) PostOrganizationsIdVerifyBankWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsIdVerifyBankResponse, error) {
	rsp, err := c.PostOrganizationsIdVerifyBankWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdVerifyBankResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsIdVerifyBankWithResponse(ctx context.Context, id string, body PostOrganizationsIdVerifyBankJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsIdVerifyBankResponse, error) {
	rsp, err := c.PostOrganizationsIdVerifyBank(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdVerifyBankResponse(rsp)
}

// GetOrganizationsOrgIdCollectionsWithResponse request returning *GetOrganizationsOrgIdCollectionsResponse
func (c *ClientWithResponses) GetOrganizationsOrgIdCollectionsWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrganizationsOrgIdCollectionsResponse, error) {
	rsp, err := c.GetOrganizationsOrgIdCollections(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsOrgIdCollectionsResponse(rsp)
}

// PostOrganizationsOrgIdCollectionsWithBodyWithResponse request with arbitrary body returning *PostOrganizationsOrgIdCollectionsResponse
func (c *ClientWithResponses) PostOrganizationsOrgIdCollectionsWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdCollectionsResponse, error) {
	rsp, err := c.PostOrganizationsOrgIdCollectionsWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrgIdCollectionsResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsOrgIdCollectionsWithResponse(ctx context.Context, orgId string, body PostOrganizationsOrgIdCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdCollectionsResponse, error) {
	rsp, err := c.PostOrganizationsOrgIdCollections(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrgIdCollectionsResponse(rsp)
}

// DeleteOrganizationsOrgIdCollectionsIdWithResponse request returning *DeleteOrganizationsOrgIdCollectionsIdResponse
func (c *ClientWithResponses) DeleteOrganizationsOrgIdCollectionsIdWithResponse(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*DeleteOrganizationsOrgIdCollectionsIdResponse, error) {
	rsp, err := c.DeleteOrganizationsOrgIdCollectionsId(ctx, orgId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationsOrgIdCollectionsIdResponse(rsp)
}

// GetOrganizationsOrgIdCollectionsIdWithResponse request returning *GetOrganizationsOrgIdCollectionsIdResponse
func (c *ClientWithResponses) GetOrganizationsOrgIdCollectionsIdWithResponse(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*GetOrganizationsOrgIdCollectionsIdResponse, error) {
	rsp, err := c.GetOrganizationsOrgIdCollectionsId(ctx, orgId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsOrgIdCollectionsIdResponse(rsp)
}

// PostOrganizationsOrgIdCollectionsIdWithBodyWithResponse request with arbitrary body returning *PostOrganizationsOrgIdCollectionsIdResponse
func (c *ClientWithResponses) PostOrganizationsOrgIdCollectionsIdWithBodyWithResponse(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdCollectionsIdResponse, error) {
	rsp, err := c.PostOrganizationsOrgIdCollectionsIdWithBody(ctx, orgId, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrgIdCollectionsIdResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsOrgIdCollectionsIdWithResponse(ctx context.Context, orgId string, id string, body PostOrganizationsOrgIdCollectionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdCollectionsIdResponse, error) {
	rsp, err := c.PostOrganizationsOrgIdCollectionsId(ctx, orgId, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrgIdCollectionsIdResponse(rsp)
}

// PutOrganizationsOrgIdCollectionsIdWithBodyWithResponse request with arbitrary body returning *PutOrganizationsOrgIdCollectionsIdResponse
func (c *ClientWithResponses) PutOrganizationsOrgIdCollectionsIdWithBodyWithResponse(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrganizationsOrgIdCollectionsIdResponse, error) {
	rsp, err := c.PutOrganizationsOrgIdCollectionsIdWithBody(ctx, orgId, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrganizationsOrgIdCollectionsIdResponse(rsp)
}

func (c *ClientWithResponses) PutOrganizationsOrgIdCollectionsIdWithResponse(ctx context.Context, orgId string, id string, body PutOrganizationsOrgIdCollectionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsOrgIdCollectionsIdResponse, error) {
	rsp, err := c.PutOrganizationsOrgIdCollectionsId(ctx, orgId, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrganizationsOrgIdCollectionsIdResponse(rsp)
}

// PostOrganizationsOrgIdCollectionsIdDeleteWithResponse request returning *PostOrganizationsOrgIdCollectionsIdDeleteResponse
func (c *ClientWithResponses) PostOrganizationsOrgIdCollectionsIdDeleteWithResponse(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdCollectionsIdDeleteResponse, error) {
	rsp, err := c.PostOrganizationsOrgIdCollectionsIdDelete(ctx, orgId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrgIdCollectionsIdDeleteResponse(rsp)
}

// PostOrganizationsOrgIdCollectionsIdDeleteUserOrgUserIdWithResponse request returning *PostOrganizationsOrgIdCollectionsIdDeleteUserOrgUserIdResponse
func (c *ClientWithResponses) PostOrganizationsOrgIdCollectionsIdDeleteUserOrgUserIdWithResponse(ctx context.Context, orgId string, id string, orgUserId string, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdCollectionsIdDeleteUserOrgUserIdResponse, error) {
	rsp, err := c.PostOrganizationsOrgIdCollectionsIdDeleteUserOrgUserId(ctx, orgId, id, orgUserId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrgIdCollectionsIdDeleteUserOrgUserIdResponse(rsp)
}

// GetOrganizationsOrgIdCollectionsIdDetailsWithResponse request returning *GetOrganizationsOrgIdCollectionsIdDetailsResponse
func (c *ClientWithResponses) GetOrganizationsOrgIdCollectionsIdDetailsWithResponse(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*GetOrganizationsOrgIdCollectionsIdDetailsResponse, error) {
	rsp, err := c.GetOrganizationsOrgIdCollectionsIdDetails(ctx, orgId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsOrgIdCollectionsIdDetailsResponse(rsp)
}

// DeleteOrganizationsOrgIdCollectionsIdUserOrgUserIdWithResponse request returning *DeleteOrganizationsOrgIdCollectionsIdUserOrgUserIdResponse
func (c *ClientWithResponses) DeleteOrganizationsOrgIdCollectionsIdUserOrgUserIdWithResponse(ctx context.Context, orgId string, id string, orgUserId string, reqEditors ...RequestEditorFn) (*DeleteOrganizationsOrgIdCollectionsIdUserOrgUserIdResponse, error) {
	rsp, err := c.DeleteOrganizationsOrgIdCollectionsIdUserOrgUserId(ctx, orgId, id, orgUserId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationsOrgIdCollectionsIdUserOrgUserIdResponse(rsp)
}

// GetOrganizationsOrgIdCollectionsIdUsersWithResponse request returning *GetOrganizationsOrgIdCollectionsIdUsersResponse
func (c *ClientWithResponses) GetOrganizationsOrgIdCollectionsIdUsersWithResponse(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*GetOrganizationsOrgIdCollectionsIdUsersResponse, error) {
	rsp, err := c.GetOrganizationsOrgIdCollectionsIdUsers(ctx, orgId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsOrgIdCollectionsIdUsersResponse(rsp)
}

// PutOrganizationsOrgIdCollectionsIdUsersWithBodyWithResponse request with arbitrary body returning *PutOrganizationsOrgIdCollectionsIdUsersResponse
func (c *ClientWithResponses) PutOrganizationsOrgIdCollectionsIdUsersWithBodyWithResponse(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrganizationsOrgIdCollectionsIdUsersResponse, error) {
	rsp, err := c.PutOrganizationsOrgIdCollectionsIdUsersWithBody(ctx, orgId, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrganizationsOrgIdCollectionsIdUsersResponse(rsp)
}

func (c *ClientWithResponses) PutOrganizationsOrgIdCollectionsIdUsersWithResponse(ctx context.Context, orgId string, id string, body PutOrganizationsOrgIdCollectionsIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsOrgIdCollectionsIdUsersResponse, error) {
	rsp, err := c.PutOrganizationsOrgIdCollectionsIdUsers(ctx, orgId, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrganizationsOrgIdCollectionsIdUsersResponse(rsp)
}

// GetOrganizationsOrgIdGroupsWithResponse request returning *GetOrganizationsOrgIdGroupsResponse
func (c *ClientWithResponses) GetOrganizationsOrgIdGroupsWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrganizationsOrgIdGroupsResponse, error) {
	rsp, err := c.GetOrganizationsOrgIdGroups(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsOrgIdGroupsResponse(rsp)
}

// PostOrganizationsOrgIdGroupsWithBodyWithResponse request with arbitrary body returning *PostOrganizationsOrgIdGroupsResponse
func (c *ClientWithResponses) PostOrganizationsOrgIdGroupsWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdGroupsResponse, error) {
	rsp, err := c.PostOrganizationsOrgIdGroupsWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrgIdGroupsResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsOrgIdGroupsWithResponse(ctx context.Context, orgId string, body PostOrganizationsOrgIdGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdGroupsResponse, error) {
	rsp, err := c.PostOrganizationsOrgIdGroups(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrgIdGroupsResponse(rsp)
}

// DeleteOrganizationsOrgIdGroupsIdWithResponse request returning *DeleteOrganizationsOrgIdGroupsIdResponse
func (c *ClientWithResponses) DeleteOrganizationsOrgIdGroupsIdWithResponse(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*DeleteOrganizationsOrgIdGroupsIdResponse, error) {
	rsp, err := c.DeleteOrganizationsOrgIdGroupsId(ctx, orgId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationsOrgIdGroupsIdResponse(rsp)
}

// GetOrganizationsOrgIdGroupsIdWithResponse request returning *GetOrganizationsOrgIdGroupsIdResponse
func (c *ClientWithResponses) GetOrganizationsOrgIdGroupsIdWithResponse(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*GetOrganizationsOrgIdGroupsIdResponse, error) {
	rsp, err := c.GetOrganizationsOrgIdGroupsId(ctx, orgId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsOrgIdGroupsIdResponse(rsp)
}

// PostOrganizationsOrgIdGroupsIdWithBodyWithResponse request with arbitrary body returning *PostOrganizationsOrgIdGroupsIdResponse
func (c *ClientWithResponses) PostOrganizationsOrgIdGroupsIdWithBodyWithResponse(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdGroupsIdResponse, error) {
	rsp, err := c.PostOrganizationsOrgIdGroupsIdWithBody(ctx, orgId, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrgIdGroupsIdResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsOrgIdGroupsIdWithResponse(ctx context.Context, orgId string, id string, body PostOrganizationsOrgIdGroupsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdGroupsIdResponse, error) {
	rsp, err := c.PostOrganizationsOrgIdGroupsId(ctx, orgId, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrgIdGroupsIdResponse(rsp)
}

// PutOrganizationsOrgIdGroupsIdWithBodyWithResponse request with arbitrary body returning *PutOrganizationsOrgIdGroupsIdResponse
func (c *ClientWithResponses) PutOrganizationsOrgIdGroupsIdWithBodyWithResponse(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrganizationsOrgIdGroupsIdResponse, error) {
	rsp, err := c.PutOrganizationsOrgIdGroupsIdWithBody(ctx, orgId, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrganizationsOrgIdGroupsIdResponse(rsp)
}

func (c *ClientWithResponses) PutOrganizationsOrgIdGroupsIdWithResponse(ctx context.Context, orgId string, id string, body PutOrganizationsOrgIdGroupsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsOrgIdGroupsIdResponse, error) {
	rsp, err := c.PutOrganizationsOrgIdGroupsId(ctx, orgId, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrganizationsOrgIdGroupsIdResponse(rsp)
}

// PostOrganizationsOrgIdGroupsIdDeleteWithResponse request returning *PostOrganizationsOrgIdGroupsIdDeleteResponse
func (c *ClientWithResponses) PostOrganizationsOrgIdGroupsIdDeleteWithResponse(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdGroupsIdDeleteResponse, error) {
	rsp, err := c.PostOrganizationsOrgIdGroupsIdDelete(ctx, orgId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrgIdGroupsIdDeleteResponse(rsp)
}

// PostOrganizationsOrgIdGroupsIdDeleteUserOrgUserIdWithResponse request returning *PostOrganizationsOrgIdGroupsIdDeleteUserOrgUserIdResponse
func (c *ClientWithResponses) PostOrganizationsOrgIdGroupsIdDeleteUserOrgUserIdWithResponse(ctx context.Context, orgId string, id string, orgUserId string, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdGroupsIdDeleteUserOrgUserIdResponse, error) {
	rsp, err := c.PostOrganizationsOrgIdGroupsIdDeleteUserOrgUserId(ctx, orgId, id, orgUserId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrgIdGroupsIdDeleteUserOrgUserIdResponse(rsp)
}

// GetOrganizationsOrgIdGroupsIdDetailsWithResponse request returning *GetOrganizationsOrgIdGroupsIdDetailsResponse
func (c *ClientWithResponses) GetOrganizationsOrgIdGroupsIdDetailsWithResponse(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*GetOrganizationsOrgIdGroupsIdDetailsResponse, error) {
	rsp, err := c.GetOrganizationsOrgIdGroupsIdDetails(ctx, orgId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsOrgIdGroupsIdDetailsResponse(rsp)
}

// DeleteOrganizationsOrgIdGroupsIdUserOrgUserIdWithResponse request returning *DeleteOrganizationsOrgIdGroupsIdUserOrgUserIdResponse
func (c *ClientWithResponses) DeleteOrganizationsOrgIdGroupsIdUserOrgUserIdWithResponse(ctx context.Context, orgId string, id string, orgUserId string, reqEditors ...RequestEditorFn) (*DeleteOrganizationsOrgIdGroupsIdUserOrgUserIdResponse, error) {
	rsp, err := c.DeleteOrganizationsOrgIdGroupsIdUserOrgUserId(ctx, orgId, id, orgUserId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationsOrgIdGroupsIdUserOrgUserIdResponse(rsp)
}

// GetOrganizationsOrgIdGroupsIdUsersWithResponse request returning *GetOrganizationsOrgIdGroupsIdUsersResponse
func (c *ClientWithResponses) GetOrganizationsOrgIdGroupsIdUsersWithResponse(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*GetOrganizationsOrgIdGroupsIdUsersResponse, error) {
	rsp, err := c.GetOrganizationsOrgIdGroupsIdUsers(ctx, orgId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsOrgIdGroupsIdUsersResponse(rsp)
}

// PutOrganizationsOrgIdGroupsIdUsersWithBodyWithResponse request with arbitrary body returning *PutOrganizationsOrgIdGroupsIdUsersResponse
func (c *ClientWithResponses) PutOrganizationsOrgIdGroupsIdUsersWithBodyWithResponse(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrganizationsOrgIdGroupsIdUsersResponse, error) {
	rsp, err := c.PutOrganizationsOrgIdGroupsIdUsersWithBody(ctx, orgId, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrganizationsOrgIdGroupsIdUsersResponse(rsp)
}

func (c *ClientWithResponses) PutOrganizationsOrgIdGroupsIdUsersWithResponse(ctx context.Context, orgId string, id string, body PutOrganizationsOrgIdGroupsIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsOrgIdGroupsIdUsersResponse, error) {
	rsp, err := c.PutOrganizationsOrgIdGroupsIdUsers(ctx, orgId, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrganizationsOrgIdGroupsIdUsersResponse(rsp)
}

// GetOrganizationsOrgIdPoliciesWithResponse request returning *GetOrganizationsOrgIdPoliciesResponse
func (c *ClientWithResponses) GetOrganizationsOrgIdPoliciesWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrganizationsOrgIdPoliciesResponse, error) {
	rsp, err := c.GetOrganizationsOrgIdPolicies(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsOrgIdPoliciesResponse(rsp)
}

// GetOrganizationsOrgIdPoliciesTokenWithResponse request returning *GetOrganizationsOrgIdPoliciesTokenResponse
func (c *ClientWithResponses) GetOrganizationsOrgIdPoliciesTokenWithResponse(ctx context.Context, orgId string, params *GetOrganizationsOrgIdPoliciesTokenParams, reqEditors ...RequestEditorFn) (*GetOrganizationsOrgIdPoliciesTokenResponse, error) {
	rsp, err := c.GetOrganizationsOrgIdPoliciesToken(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsOrgIdPoliciesTokenResponse(rsp)
}

// GetOrganizationsOrgIdPoliciesTypeWithResponse request returning *GetOrganizationsOrgIdPoliciesTypeResponse
func (c *ClientWithResponses) GetOrganizationsOrgIdPoliciesTypeWithResponse(ctx context.Context, orgId string, pType int32, reqEditors ...RequestEditorFn) (*GetOrganizationsOrgIdPoliciesTypeResponse, error) {
	rsp, err := c.GetOrganizationsOrgIdPoliciesType(ctx, orgId, pType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsOrgIdPoliciesTypeResponse(rsp)
}

// PutOrganizationsOrgIdPoliciesTypeWithBodyWithResponse request with arbitrary body returning *PutOrganizationsOrgIdPoliciesTypeResponse
func (c *ClientWithResponses) PutOrganizationsOrgIdPoliciesTypeWithBodyWithResponse(ctx context.Context, orgId string, pType int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrganizationsOrgIdPoliciesTypeResponse, error) {
	rsp, err := c.PutOrganizationsOrgIdPoliciesTypeWithBody(ctx, orgId, pType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrganizationsOrgIdPoliciesTypeResponse(rsp)
}

func (c *ClientWithResponses) PutOrganizationsOrgIdPoliciesTypeWithResponse(ctx context.Context, orgId string, pType int32, body PutOrganizationsOrgIdPoliciesTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsOrgIdPoliciesTypeResponse, error) {
	rsp, err := c.PutOrganizationsOrgIdPoliciesType(ctx, orgId, pType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrganizationsOrgIdPoliciesTypeResponse(rsp)
}

// DeleteOrganizationsOrgIdUsersWithBodyWithResponse request with arbitrary body returning *DeleteOrganizationsOrgIdUsersResponse
func (c *ClientWithResponses) DeleteOrganizationsOrgIdUsersWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteOrganizationsOrgIdUsersResponse, error) {
	rsp, err := c.DeleteOrganizationsOrgIdUsersWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationsOrgIdUsersResponse(rsp)
}

func (c *ClientWithResponses) DeleteOrganizationsOrgIdUsersWithResponse(ctx context.Context, orgId string, body DeleteOrganizationsOrgIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteOrganizationsOrgIdUsersResponse, error) {
	rsp, err := c.DeleteOrganizationsOrgIdUsers(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationsOrgIdUsersResponse(rsp)
}

// GetOrganizationsOrgIdUsersWithResponse request returning *GetOrganizationsOrgIdUsersResponse
func (c *ClientWithResponses) GetOrganizationsOrgIdUsersWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrganizationsOrgIdUsersResponse, error) {
	rsp, err := c.GetOrganizationsOrgIdUsers(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsOrgIdUsersResponse(rsp)
}

// PostOrganizationsOrgIdUsersConfirmWithBodyWithResponse request with arbitrary body returning *PostOrganizationsOrgIdUsersConfirmResponse
func (c *ClientWithResponses) PostOrganizationsOrgIdUsersConfirmWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersConfirmResponse, error) {
	rsp, err := c.PostOrganizationsOrgIdUsersConfirmWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrgIdUsersConfirmResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsOrgIdUsersConfirmWithResponse(ctx context.Context, orgId string, body PostOrganizationsOrgIdUsersConfirmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersConfirmResponse, error) {
	rsp, err := c.PostOrganizationsOrgIdUsersConfirm(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrgIdUsersConfirmResponse(rsp)
}

// PostOrganizationsOrgIdUsersDeleteWithBodyWithResponse request with arbitrary body returning *PostOrganizationsOrgIdUsersDeleteResponse
func (c *ClientWithResponses) PostOrganizationsOrgIdUsersDeleteWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersDeleteResponse, error) {
	rsp, err := c.PostOrganizationsOrgIdUsersDeleteWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrgIdUsersDeleteResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsOrgIdUsersDeleteWithResponse(ctx context.Context, orgId string, body PostOrganizationsOrgIdUsersDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersDeleteResponse, error) {
	rsp, err := c.PostOrganizationsOrgIdUsersDelete(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrgIdUsersDeleteResponse(rsp)
}

// PostOrganizationsOrgIdUsersInviteWithBodyWithResponse request with arbitrary body returning *PostOrganizationsOrgIdUsersInviteResponse
func (c *ClientWithResponses) PostOrganizationsOrgIdUsersInviteWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersInviteResponse, error) {
	rsp, err := c.PostOrganizationsOrgIdUsersInviteWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrgIdUsersInviteResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsOrgIdUsersInviteWithResponse(ctx context.Context, orgId string, body PostOrganizationsOrgIdUsersInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersInviteResponse, error) {
	rsp, err := c.PostOrganizationsOrgIdUsersInvite(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrgIdUsersInviteResponse(rsp)
}

// PostOrganizationsOrgIdUsersPublicKeysWithBodyWithResponse request with arbitrary body returning *PostOrganizationsOrgIdUsersPublicKeysResponse
func (c *ClientWithResponses) PostOrganizationsOrgIdUsersPublicKeysWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersPublicKeysResponse, error) {
	rsp, err := c.PostOrganizationsOrgIdUsersPublicKeysWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrgIdUsersPublicKeysResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsOrgIdUsersPublicKeysWithResponse(ctx context.Context, orgId string, body PostOrganizationsOrgIdUsersPublicKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersPublicKeysResponse, error) {
	rsp, err := c.PostOrganizationsOrgIdUsersPublicKeys(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrgIdUsersPublicKeysResponse(rsp)
}

// PostOrganizationsOrgIdUsersReinviteWithBodyWithResponse request with arbitrary body returning *PostOrganizationsOrgIdUsersReinviteResponse
func (c *ClientWithResponses) PostOrganizationsOrgIdUsersReinviteWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersReinviteResponse, error) {
	rsp, err := c.PostOrganizationsOrgIdUsersReinviteWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrgIdUsersReinviteResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsOrgIdUsersReinviteWithResponse(ctx context.Context, orgId string, body PostOrganizationsOrgIdUsersReinviteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersReinviteResponse, error) {
	rsp, err := c.PostOrganizationsOrgIdUsersReinvite(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrgIdUsersReinviteResponse(rsp)
}

// DeleteOrganizationsOrgIdUsersIdWithResponse request returning *DeleteOrganizationsOrgIdUsersIdResponse
func (c *ClientWithResponses) DeleteOrganizationsOrgIdUsersIdWithResponse(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*DeleteOrganizationsOrgIdUsersIdResponse, error) {
	rsp, err := c.DeleteOrganizationsOrgIdUsersId(ctx, orgId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationsOrgIdUsersIdResponse(rsp)
}

// GetOrganizationsOrgIdUsersIdWithResponse request returning *GetOrganizationsOrgIdUsersIdResponse
func (c *ClientWithResponses) GetOrganizationsOrgIdUsersIdWithResponse(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*GetOrganizationsOrgIdUsersIdResponse, error) {
	rsp, err := c.GetOrganizationsOrgIdUsersId(ctx, orgId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsOrgIdUsersIdResponse(rsp)
}

// PostOrganizationsOrgIdUsersIdWithBodyWithResponse request with arbitrary body returning *PostOrganizationsOrgIdUsersIdResponse
func (c *ClientWithResponses) PostOrganizationsOrgIdUsersIdWithBodyWithResponse(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersIdResponse, error) {
	rsp, err := c.PostOrganizationsOrgIdUsersIdWithBody(ctx, orgId, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrgIdUsersIdResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsOrgIdUsersIdWithResponse(ctx context.Context, orgId string, id string, body PostOrganizationsOrgIdUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersIdResponse, error) {
	rsp, err := c.PostOrganizationsOrgIdUsersId(ctx, orgId, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrgIdUsersIdResponse(rsp)
}

// PutOrganizationsOrgIdUsersIdWithBodyWithResponse request with arbitrary body returning *PutOrganizationsOrgIdUsersIdResponse
func (c *ClientWithResponses) PutOrganizationsOrgIdUsersIdWithBodyWithResponse(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrganizationsOrgIdUsersIdResponse, error) {
	rsp, err := c.PutOrganizationsOrgIdUsersIdWithBody(ctx, orgId, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrganizationsOrgIdUsersIdResponse(rsp)
}

func (c *ClientWithResponses) PutOrganizationsOrgIdUsersIdWithResponse(ctx context.Context, orgId string, id string, body PutOrganizationsOrgIdUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsOrgIdUsersIdResponse, error) {
	rsp, err := c.PutOrganizationsOrgIdUsersId(ctx, orgId, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrganizationsOrgIdUsersIdResponse(rsp)
}

// PostOrganizationsOrgIdUsersIdAcceptWithBodyWithResponse request with arbitrary body returning *PostOrganizationsOrgIdUsersIdAcceptResponse
func (c *ClientWithResponses) PostOrganizationsOrgIdUsersIdAcceptWithBodyWithResponse(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersIdAcceptResponse, error) {
	rsp, err := c.PostOrganizationsOrgIdUsersIdAcceptWithBody(ctx, orgId, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrgIdUsersIdAcceptResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsOrgIdUsersIdAcceptWithResponse(ctx context.Context, orgId string, id string, body PostOrganizationsOrgIdUsersIdAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersIdAcceptResponse, error) {
	rsp, err := c.PostOrganizationsOrgIdUsersIdAccept(ctx, orgId, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrgIdUsersIdAcceptResponse(rsp)
}

// PostOrganizationsOrgIdUsersIdConfirmWithBodyWithResponse request with arbitrary body returning *PostOrganizationsOrgIdUsersIdConfirmResponse
func (c *ClientWithResponses) PostOrganizationsOrgIdUsersIdConfirmWithBodyWithResponse(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersIdConfirmResponse, error) {
	rsp, err := c.PostOrganizationsOrgIdUsersIdConfirmWithBody(ctx, orgId, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrgIdUsersIdConfirmResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsOrgIdUsersIdConfirmWithResponse(ctx context.Context, orgId string, id string, body PostOrganizationsOrgIdUsersIdConfirmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersIdConfirmResponse, error) {
	rsp, err := c.PostOrganizationsOrgIdUsersIdConfirm(ctx, orgId, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrgIdUsersIdConfirmResponse(rsp)
}

// PostOrganizationsOrgIdUsersIdDeleteWithResponse request returning *PostOrganizationsOrgIdUsersIdDeleteResponse
func (c *ClientWithResponses) PostOrganizationsOrgIdUsersIdDeleteWithResponse(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersIdDeleteResponse, error) {
	rsp, err := c.PostOrganizationsOrgIdUsersIdDelete(ctx, orgId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrgIdUsersIdDeleteResponse(rsp)
}

// GetOrganizationsOrgIdUsersIdEventsWithResponse request returning *GetOrganizationsOrgIdUsersIdEventsResponse
func (c *ClientWithResponses) GetOrganizationsOrgIdUsersIdEventsWithResponse(ctx context.Context, orgId string, id string, params *GetOrganizationsOrgIdUsersIdEventsParams, reqEditors ...RequestEditorFn) (*GetOrganizationsOrgIdUsersIdEventsResponse, error) {
	rsp, err := c.GetOrganizationsOrgIdUsersIdEvents(ctx, orgId, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsOrgIdUsersIdEventsResponse(rsp)
}

// GetOrganizationsOrgIdUsersIdGroupsWithResponse request returning *GetOrganizationsOrgIdUsersIdGroupsResponse
func (c *ClientWithResponses) GetOrganizationsOrgIdUsersIdGroupsWithResponse(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*GetOrganizationsOrgIdUsersIdGroupsResponse, error) {
	rsp, err := c.GetOrganizationsOrgIdUsersIdGroups(ctx, orgId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsOrgIdUsersIdGroupsResponse(rsp)
}

// PostOrganizationsOrgIdUsersIdGroupsWithBodyWithResponse request with arbitrary body returning *PostOrganizationsOrgIdUsersIdGroupsResponse
func (c *ClientWithResponses) PostOrganizationsOrgIdUsersIdGroupsWithBodyWithResponse(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersIdGroupsResponse, error) {
	rsp, err := c.PostOrganizationsOrgIdUsersIdGroupsWithBody(ctx, orgId, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrgIdUsersIdGroupsResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsOrgIdUsersIdGroupsWithResponse(ctx context.Context, orgId string, id string, body PostOrganizationsOrgIdUsersIdGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersIdGroupsResponse, error) {
	rsp, err := c.PostOrganizationsOrgIdUsersIdGroups(ctx, orgId, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrgIdUsersIdGroupsResponse(rsp)
}

// PutOrganizationsOrgIdUsersIdGroupsWithBodyWithResponse request with arbitrary body returning *PutOrganizationsOrgIdUsersIdGroupsResponse
func (c *ClientWithResponses) PutOrganizationsOrgIdUsersIdGroupsWithBodyWithResponse(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrganizationsOrgIdUsersIdGroupsResponse, error) {
	rsp, err := c.PutOrganizationsOrgIdUsersIdGroupsWithBody(ctx, orgId, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrganizationsOrgIdUsersIdGroupsResponse(rsp)
}

func (c *ClientWithResponses) PutOrganizationsOrgIdUsersIdGroupsWithResponse(ctx context.Context, orgId string, id string, body PutOrganizationsOrgIdUsersIdGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsOrgIdUsersIdGroupsResponse, error) {
	rsp, err := c.PutOrganizationsOrgIdUsersIdGroups(ctx, orgId, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrganizationsOrgIdUsersIdGroupsResponse(rsp)
}

// PostOrganizationsOrgIdUsersIdReinviteWithResponse request returning *PostOrganizationsOrgIdUsersIdReinviteResponse
func (c *ClientWithResponses) PostOrganizationsOrgIdUsersIdReinviteWithResponse(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*PostOrganizationsOrgIdUsersIdReinviteResponse, error) {
	rsp, err := c.PostOrganizationsOrgIdUsersIdReinvite(ctx, orgId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrgIdUsersIdReinviteResponse(rsp)
}

// PutOrganizationsOrgIdUsersIdResetPasswordWithBodyWithResponse request with arbitrary body returning *PutOrganizationsOrgIdUsersIdResetPasswordResponse
func (c *ClientWithResponses) PutOrganizationsOrgIdUsersIdResetPasswordWithBodyWithResponse(ctx context.Context, orgId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrganizationsOrgIdUsersIdResetPasswordResponse, error) {
	rsp, err := c.PutOrganizationsOrgIdUsersIdResetPasswordWithBody(ctx, orgId, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrganizationsOrgIdUsersIdResetPasswordResponse(rsp)
}

func (c *ClientWithResponses) PutOrganizationsOrgIdUsersIdResetPasswordWithResponse(ctx context.Context, orgId string, id string, body PutOrganizationsOrgIdUsersIdResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsOrgIdUsersIdResetPasswordResponse, error) {
	rsp, err := c.PutOrganizationsOrgIdUsersIdResetPassword(ctx, orgId, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrganizationsOrgIdUsersIdResetPasswordResponse(rsp)
}

// GetOrganizationsOrgIdUsersIdResetPasswordDetailsWithResponse request returning *GetOrganizationsOrgIdUsersIdResetPasswordDetailsResponse
func (c *ClientWithResponses) GetOrganizationsOrgIdUsersIdResetPasswordDetailsWithResponse(ctx context.Context, orgId string, id string, reqEditors ...RequestEditorFn) (*GetOrganizationsOrgIdUsersIdResetPasswordDetailsResponse, error) {
	rsp, err := c.GetOrganizationsOrgIdUsersIdResetPasswordDetails(ctx, orgId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsOrgIdUsersIdResetPasswordDetailsResponse(rsp)
}

// PutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentWithBodyWithResponse request with arbitrary body returning *PutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentResponse
func (c *ClientWithResponses) PutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentWithBodyWithResponse(ctx context.Context, orgId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentResponse, error) {
	rsp, err := c.PutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentWithBody(ctx, orgId, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentResponse(rsp)
}

func (c *ClientWithResponses) PutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentWithResponse(ctx context.Context, orgId string, userId string, body PutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentResponse, error) {
	rsp, err := c.PutOrganizationsOrgIdUsersUserIdResetPasswordEnrollment(ctx, orgId, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentResponse(rsp)
}

// GetPlansWithResponse request returning *GetPlansResponse
func (c *ClientWithResponses) GetPlansWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPlansResponse, error) {
	rsp, err := c.GetPlans(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlansResponse(rsp)
}

// GetPlansSalesTaxRatesWithResponse request returning *GetPlansSalesTaxRatesResponse
func (c *ClientWithResponses) GetPlansSalesTaxRatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPlansSalesTaxRatesResponse, error) {
	rsp, err := c.GetPlansSalesTaxRates(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlansSalesTaxRatesResponse(rsp)
}

// PutPushAddOrganizationWithBodyWithResponse request with arbitrary body returning *PutPushAddOrganizationResponse
func (c *ClientWithResponses) PutPushAddOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPushAddOrganizationResponse, error) {
	rsp, err := c.PutPushAddOrganizationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPushAddOrganizationResponse(rsp)
}

func (c *ClientWithResponses) PutPushAddOrganizationWithResponse(ctx context.Context, body PutPushAddOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPushAddOrganizationResponse, error) {
	rsp, err := c.PutPushAddOrganization(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPushAddOrganizationResponse(rsp)
}

// PutPushDeleteOrganizationWithBodyWithResponse request with arbitrary body returning *PutPushDeleteOrganizationResponse
func (c *ClientWithResponses) PutPushDeleteOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPushDeleteOrganizationResponse, error) {
	rsp, err := c.PutPushDeleteOrganizationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPushDeleteOrganizationResponse(rsp)
}

func (c *ClientWithResponses) PutPushDeleteOrganizationWithResponse(ctx context.Context, body PutPushDeleteOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPushDeleteOrganizationResponse, error) {
	rsp, err := c.PutPushDeleteOrganization(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPushDeleteOrganizationResponse(rsp)
}

// PostPushRegisterWithBodyWithResponse request with arbitrary body returning *PostPushRegisterResponse
func (c *ClientWithResponses) PostPushRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPushRegisterResponse, error) {
	rsp, err := c.PostPushRegisterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPushRegisterResponse(rsp)
}

func (c *ClientWithResponses) PostPushRegisterWithResponse(ctx context.Context, body PostPushRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPushRegisterResponse, error) {
	rsp, err := c.PostPushRegister(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPushRegisterResponse(rsp)
}

// PostPushSendWithBodyWithResponse request with arbitrary body returning *PostPushSendResponse
func (c *ClientWithResponses) PostPushSendWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPushSendResponse, error) {
	rsp, err := c.PostPushSendWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPushSendResponse(rsp)
}

func (c *ClientWithResponses) PostPushSendWithResponse(ctx context.Context, body PostPushSendJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPushSendResponse, error) {
	rsp, err := c.PostPushSend(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPushSendResponse(rsp)
}

// DeletePushIdWithResponse request returning *DeletePushIdResponse
func (c *ClientWithResponses) DeletePushIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePushIdResponse, error) {
	rsp, err := c.DeletePushId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePushIdResponse(rsp)
}

// GetSendsWithResponse request returning *GetSendsResponse
func (c *ClientWithResponses) GetSendsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSendsResponse, error) {
	rsp, err := c.GetSends(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSendsResponse(rsp)
}

// PostSendsWithBodyWithResponse request with arbitrary body returning *PostSendsResponse
func (c *ClientWithResponses) PostSendsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendsResponse, error) {
	rsp, err := c.PostSendsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendsResponse(rsp)
}

func (c *ClientWithResponses) PostSendsWithResponse(ctx context.Context, body PostSendsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSendsResponse, error) {
	rsp, err := c.PostSends(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendsResponse(rsp)
}

// PostSendsAccessIdWithBodyWithResponse request with arbitrary body returning *PostSendsAccessIdResponse
func (c *ClientWithResponses) PostSendsAccessIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendsAccessIdResponse, error) {
	rsp, err := c.PostSendsAccessIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendsAccessIdResponse(rsp)
}

func (c *ClientWithResponses) PostSendsAccessIdWithResponse(ctx context.Context, id string, body PostSendsAccessIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSendsAccessIdResponse, error) {
	rsp, err := c.PostSendsAccessId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendsAccessIdResponse(rsp)
}

// PostSendsFileWithResponse request returning *PostSendsFileResponse
func (c *ClientWithResponses) PostSendsFileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostSendsFileResponse, error) {
	rsp, err := c.PostSendsFile(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendsFileResponse(rsp)
}

// PostSendsFileV2WithBodyWithResponse request with arbitrary body returning *PostSendsFileV2Response
func (c *ClientWithResponses) PostSendsFileV2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendsFileV2Response, error) {
	rsp, err := c.PostSendsFileV2WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendsFileV2Response(rsp)
}

func (c *ClientWithResponses) PostSendsFileV2WithResponse(ctx context.Context, body PostSendsFileV2JSONRequestBody, reqEditors ...RequestEditorFn) (*PostSendsFileV2Response, error) {
	rsp, err := c.PostSendsFileV2(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendsFileV2Response(rsp)
}

// PostSendsFileValidateAzureWithResponse request returning *PostSendsFileValidateAzureResponse
func (c *ClientWithResponses) PostSendsFileValidateAzureWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostSendsFileValidateAzureResponse, error) {
	rsp, err := c.PostSendsFileValidateAzure(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendsFileValidateAzureResponse(rsp)
}

// PostSendsEncodedSendIdAccessFileFileIdWithBodyWithResponse request with arbitrary body returning *PostSendsEncodedSendIdAccessFileFileIdResponse
func (c *ClientWithResponses) PostSendsEncodedSendIdAccessFileFileIdWithBodyWithResponse(ctx context.Context, encodedSendId string, fileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendsEncodedSendIdAccessFileFileIdResponse, error) {
	rsp, err := c.PostSendsEncodedSendIdAccessFileFileIdWithBody(ctx, encodedSendId, fileId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendsEncodedSendIdAccessFileFileIdResponse(rsp)
}

func (c *ClientWithResponses) PostSendsEncodedSendIdAccessFileFileIdWithResponse(ctx context.Context, encodedSendId string, fileId string, body PostSendsEncodedSendIdAccessFileFileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSendsEncodedSendIdAccessFileFileIdResponse, error) {
	rsp, err := c.PostSendsEncodedSendIdAccessFileFileId(ctx, encodedSendId, fileId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendsEncodedSendIdAccessFileFileIdResponse(rsp)
}

// DeleteSendsIdWithResponse request returning *DeleteSendsIdResponse
func (c *ClientWithResponses) DeleteSendsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteSendsIdResponse, error) {
	rsp, err := c.DeleteSendsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSendsIdResponse(rsp)
}

// GetSendsIdWithResponse request returning *GetSendsIdResponse
func (c *ClientWithResponses) GetSendsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSendsIdResponse, error) {
	rsp, err := c.GetSendsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSendsIdResponse(rsp)
}

// PutSendsIdWithBodyWithResponse request with arbitrary body returning *PutSendsIdResponse
func (c *ClientWithResponses) PutSendsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSendsIdResponse, error) {
	rsp, err := c.PutSendsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSendsIdResponse(rsp)
}

func (c *ClientWithResponses) PutSendsIdWithResponse(ctx context.Context, id string, body PutSendsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSendsIdResponse, error) {
	rsp, err := c.PutSendsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSendsIdResponse(rsp)
}

// GetSendsIdFileFileIdWithResponse request returning *GetSendsIdFileFileIdResponse
func (c *ClientWithResponses) GetSendsIdFileFileIdWithResponse(ctx context.Context, id string, fileId string, reqEditors ...RequestEditorFn) (*GetSendsIdFileFileIdResponse, error) {
	rsp, err := c.GetSendsIdFileFileId(ctx, id, fileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSendsIdFileFileIdResponse(rsp)
}

// PostSendsIdFileFileIdWithResponse request returning *PostSendsIdFileFileIdResponse
func (c *ClientWithResponses) PostSendsIdFileFileIdWithResponse(ctx context.Context, id string, fileId string, reqEditors ...RequestEditorFn) (*PostSendsIdFileFileIdResponse, error) {
	rsp, err := c.PostSendsIdFileFileId(ctx, id, fileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendsIdFileFileIdResponse(rsp)
}

// PutSendsIdRemovePasswordWithResponse request returning *PutSendsIdRemovePasswordResponse
func (c *ClientWithResponses) PutSendsIdRemovePasswordWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PutSendsIdRemovePasswordResponse, error) {
	rsp, err := c.PutSendsIdRemovePassword(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSendsIdRemovePasswordResponse(rsp)
}

// GetSettingsDomainsWithResponse request returning *GetSettingsDomainsResponse
func (c *ClientWithResponses) GetSettingsDomainsWithResponse(ctx context.Context, params *GetSettingsDomainsParams, reqEditors ...RequestEditorFn) (*GetSettingsDomainsResponse, error) {
	rsp, err := c.GetSettingsDomains(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsDomainsResponse(rsp)
}

// PostSettingsDomainsWithBodyWithResponse request with arbitrary body returning *PostSettingsDomainsResponse
func (c *ClientWithResponses) PostSettingsDomainsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSettingsDomainsResponse, error) {
	rsp, err := c.PostSettingsDomainsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSettingsDomainsResponse(rsp)
}

func (c *ClientWithResponses) PostSettingsDomainsWithResponse(ctx context.Context, body PostSettingsDomainsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSettingsDomainsResponse, error) {
	rsp, err := c.PostSettingsDomains(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSettingsDomainsResponse(rsp)
}

// PutSettingsDomainsWithBodyWithResponse request with arbitrary body returning *PutSettingsDomainsResponse
func (c *ClientWithResponses) PutSettingsDomainsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDomainsResponse, error) {
	rsp, err := c.PutSettingsDomainsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDomainsResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsDomainsWithResponse(ctx context.Context, body PutSettingsDomainsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDomainsResponse, error) {
	rsp, err := c.PutSettingsDomains(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDomainsResponse(rsp)
}

// PostSetupPaymentWithResponse request returning *PostSetupPaymentResponse
func (c *ClientWithResponses) PostSetupPaymentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostSetupPaymentResponse, error) {
	rsp, err := c.PostSetupPayment(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSetupPaymentResponse(rsp)
}

// GetSyncWithResponse request returning *GetSyncResponse
func (c *ClientWithResponses) GetSyncWithResponse(ctx context.Context, params *GetSyncParams, reqEditors ...RequestEditorFn) (*GetSyncResponse, error) {
	rsp, err := c.GetSync(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSyncResponse(rsp)
}

// GetTwoFactorWithResponse request returning *GetTwoFactorResponse
func (c *ClientWithResponses) GetTwoFactorWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTwoFactorResponse, error) {
	rsp, err := c.GetTwoFactor(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTwoFactorResponse(rsp)
}

// PostTwoFactorAuthenticatorWithBodyWithResponse request with arbitrary body returning *PostTwoFactorAuthenticatorResponse
func (c *ClientWithResponses) PostTwoFactorAuthenticatorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTwoFactorAuthenticatorResponse, error) {
	rsp, err := c.PostTwoFactorAuthenticatorWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTwoFactorAuthenticatorResponse(rsp)
}

func (c *ClientWithResponses) PostTwoFactorAuthenticatorWithResponse(ctx context.Context, body PostTwoFactorAuthenticatorJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTwoFactorAuthenticatorResponse, error) {
	rsp, err := c.PostTwoFactorAuthenticator(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTwoFactorAuthenticatorResponse(rsp)
}

// PutTwoFactorAuthenticatorWithBodyWithResponse request with arbitrary body returning *PutTwoFactorAuthenticatorResponse
func (c *ClientWithResponses) PutTwoFactorAuthenticatorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTwoFactorAuthenticatorResponse, error) {
	rsp, err := c.PutTwoFactorAuthenticatorWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTwoFactorAuthenticatorResponse(rsp)
}

func (c *ClientWithResponses) PutTwoFactorAuthenticatorWithResponse(ctx context.Context, body PutTwoFactorAuthenticatorJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTwoFactorAuthenticatorResponse, error) {
	rsp, err := c.PutTwoFactorAuthenticator(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTwoFactorAuthenticatorResponse(rsp)
}

// PostTwoFactorDisableWithBodyWithResponse request with arbitrary body returning *PostTwoFactorDisableResponse
func (c *ClientWithResponses) PostTwoFactorDisableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTwoFactorDisableResponse, error) {
	rsp, err := c.PostTwoFactorDisableWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTwoFactorDisableResponse(rsp)
}

func (c *ClientWithResponses) PostTwoFactorDisableWithResponse(ctx context.Context, body PostTwoFactorDisableJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTwoFactorDisableResponse, error) {
	rsp, err := c.PostTwoFactorDisable(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTwoFactorDisableResponse(rsp)
}

// PutTwoFactorDisableWithBodyWithResponse request with arbitrary body returning *PutTwoFactorDisableResponse
func (c *ClientWithResponses) PutTwoFactorDisableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTwoFactorDisableResponse, error) {
	rsp, err := c.PutTwoFactorDisableWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTwoFactorDisableResponse(rsp)
}

func (c *ClientWithResponses) PutTwoFactorDisableWithResponse(ctx context.Context, body PutTwoFactorDisableJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTwoFactorDisableResponse, error) {
	rsp, err := c.PutTwoFactorDisable(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTwoFactorDisableResponse(rsp)
}

// PostTwoFactorDuoWithBodyWithResponse request with arbitrary body returning *PostTwoFactorDuoResponse
func (c *ClientWithResponses) PostTwoFactorDuoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTwoFactorDuoResponse, error) {
	rsp, err := c.PostTwoFactorDuoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTwoFactorDuoResponse(rsp)
}

func (c *ClientWithResponses) PostTwoFactorDuoWithResponse(ctx context.Context, body PostTwoFactorDuoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTwoFactorDuoResponse, error) {
	rsp, err := c.PostTwoFactorDuo(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTwoFactorDuoResponse(rsp)
}

// PutTwoFactorDuoWithBodyWithResponse request with arbitrary body returning *PutTwoFactorDuoResponse
func (c *ClientWithResponses) PutTwoFactorDuoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTwoFactorDuoResponse, error) {
	rsp, err := c.PutTwoFactorDuoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTwoFactorDuoResponse(rsp)
}

func (c *ClientWithResponses) PutTwoFactorDuoWithResponse(ctx context.Context, body PutTwoFactorDuoJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTwoFactorDuoResponse, error) {
	rsp, err := c.PutTwoFactorDuo(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTwoFactorDuoResponse(rsp)
}

// PostTwoFactorEmailWithBodyWithResponse request with arbitrary body returning *PostTwoFactorEmailResponse
func (c *ClientWithResponses) PostTwoFactorEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTwoFactorEmailResponse, error) {
	rsp, err := c.PostTwoFactorEmailWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTwoFactorEmailResponse(rsp)
}

func (c *ClientWithResponses) PostTwoFactorEmailWithResponse(ctx context.Context, body PostTwoFactorEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTwoFactorEmailResponse, error) {
	rsp, err := c.PostTwoFactorEmail(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTwoFactorEmailResponse(rsp)
}

// PutTwoFactorEmailWithBodyWithResponse request with arbitrary body returning *PutTwoFactorEmailResponse
func (c *ClientWithResponses) PutTwoFactorEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTwoFactorEmailResponse, error) {
	rsp, err := c.PutTwoFactorEmailWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTwoFactorEmailResponse(rsp)
}

func (c *ClientWithResponses) PutTwoFactorEmailWithResponse(ctx context.Context, body PutTwoFactorEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTwoFactorEmailResponse, error) {
	rsp, err := c.PutTwoFactorEmail(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTwoFactorEmailResponse(rsp)
}

// PostTwoFactorGetAuthenticatorWithBodyWithResponse request with arbitrary body returning *PostTwoFactorGetAuthenticatorResponse
func (c *ClientWithResponses) PostTwoFactorGetAuthenticatorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTwoFactorGetAuthenticatorResponse, error) {
	rsp, err := c.PostTwoFactorGetAuthenticatorWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTwoFactorGetAuthenticatorResponse(rsp)
}

func (c *ClientWithResponses) PostTwoFactorGetAuthenticatorWithResponse(ctx context.Context, body PostTwoFactorGetAuthenticatorJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTwoFactorGetAuthenticatorResponse, error) {
	rsp, err := c.PostTwoFactorGetAuthenticator(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTwoFactorGetAuthenticatorResponse(rsp)
}

// PostTwoFactorGetDuoWithBodyWithResponse request with arbitrary body returning *PostTwoFactorGetDuoResponse
func (c *ClientWithResponses) PostTwoFactorGetDuoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTwoFactorGetDuoResponse, error) {
	rsp, err := c.PostTwoFactorGetDuoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTwoFactorGetDuoResponse(rsp)
}

func (c *ClientWithResponses) PostTwoFactorGetDuoWithResponse(ctx context.Context, body PostTwoFactorGetDuoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTwoFactorGetDuoResponse, error) {
	rsp, err := c.PostTwoFactorGetDuo(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTwoFactorGetDuoResponse(rsp)
}

// PostTwoFactorGetEmailWithBodyWithResponse request with arbitrary body returning *PostTwoFactorGetEmailResponse
func (c *ClientWithResponses) PostTwoFactorGetEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTwoFactorGetEmailResponse, error) {
	rsp, err := c.PostTwoFactorGetEmailWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTwoFactorGetEmailResponse(rsp)
}

func (c *ClientWithResponses) PostTwoFactorGetEmailWithResponse(ctx context.Context, body PostTwoFactorGetEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTwoFactorGetEmailResponse, error) {
	rsp, err := c.PostTwoFactorGetEmail(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTwoFactorGetEmailResponse(rsp)
}

// PostTwoFactorGetRecoverWithBodyWithResponse request with arbitrary body returning *PostTwoFactorGetRecoverResponse
func (c *ClientWithResponses) PostTwoFactorGetRecoverWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTwoFactorGetRecoverResponse, error) {
	rsp, err := c.PostTwoFactorGetRecoverWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTwoFactorGetRecoverResponse(rsp)
}

func (c *ClientWithResponses) PostTwoFactorGetRecoverWithResponse(ctx context.Context, body PostTwoFactorGetRecoverJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTwoFactorGetRecoverResponse, error) {
	rsp, err := c.PostTwoFactorGetRecover(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTwoFactorGetRecoverResponse(rsp)
}

// PostTwoFactorGetWebauthnWithBodyWithResponse request with arbitrary body returning *PostTwoFactorGetWebauthnResponse
func (c *ClientWithResponses) PostTwoFactorGetWebauthnWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTwoFactorGetWebauthnResponse, error) {
	rsp, err := c.PostTwoFactorGetWebauthnWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTwoFactorGetWebauthnResponse(rsp)
}

func (c *ClientWithResponses) PostTwoFactorGetWebauthnWithResponse(ctx context.Context, body PostTwoFactorGetWebauthnJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTwoFactorGetWebauthnResponse, error) {
	rsp, err := c.PostTwoFactorGetWebauthn(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTwoFactorGetWebauthnResponse(rsp)
}

// PostTwoFactorGetWebauthnChallengeWithBodyWithResponse request with arbitrary body returning *PostTwoFactorGetWebauthnChallengeResponse
func (c *ClientWithResponses) PostTwoFactorGetWebauthnChallengeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTwoFactorGetWebauthnChallengeResponse, error) {
	rsp, err := c.PostTwoFactorGetWebauthnChallengeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTwoFactorGetWebauthnChallengeResponse(rsp)
}

func (c *ClientWithResponses) PostTwoFactorGetWebauthnChallengeWithResponse(ctx context.Context, body PostTwoFactorGetWebauthnChallengeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTwoFactorGetWebauthnChallengeResponse, error) {
	rsp, err := c.PostTwoFactorGetWebauthnChallenge(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTwoFactorGetWebauthnChallengeResponse(rsp)
}

// PostTwoFactorGetYubikeyWithBodyWithResponse request with arbitrary body returning *PostTwoFactorGetYubikeyResponse
func (c *ClientWithResponses) PostTwoFactorGetYubikeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTwoFactorGetYubikeyResponse, error) {
	rsp, err := c.PostTwoFactorGetYubikeyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTwoFactorGetYubikeyResponse(rsp)
}

func (c *ClientWithResponses) PostTwoFactorGetYubikeyWithResponse(ctx context.Context, body PostTwoFactorGetYubikeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTwoFactorGetYubikeyResponse, error) {
	rsp, err := c.PostTwoFactorGetYubikey(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTwoFactorGetYubikeyResponse(rsp)
}

// PostTwoFactorRecoverWithBodyWithResponse request with arbitrary body returning *PostTwoFactorRecoverResponse
func (c *ClientWithResponses) PostTwoFactorRecoverWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTwoFactorRecoverResponse, error) {
	rsp, err := c.PostTwoFactorRecoverWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTwoFactorRecoverResponse(rsp)
}

func (c *ClientWithResponses) PostTwoFactorRecoverWithResponse(ctx context.Context, body PostTwoFactorRecoverJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTwoFactorRecoverResponse, error) {
	rsp, err := c.PostTwoFactorRecover(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTwoFactorRecoverResponse(rsp)
}

// PostTwoFactorSendEmailWithBodyWithResponse request with arbitrary body returning *PostTwoFactorSendEmailResponse
func (c *ClientWithResponses) PostTwoFactorSendEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTwoFactorSendEmailResponse, error) {
	rsp, err := c.PostTwoFactorSendEmailWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTwoFactorSendEmailResponse(rsp)
}

func (c *ClientWithResponses) PostTwoFactorSendEmailWithResponse(ctx context.Context, body PostTwoFactorSendEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTwoFactorSendEmailResponse, error) {
	rsp, err := c.PostTwoFactorSendEmail(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTwoFactorSendEmailResponse(rsp)
}

// PostTwoFactorSendEmailLoginWithBodyWithResponse request with arbitrary body returning *PostTwoFactorSendEmailLoginResponse
func (c *ClientWithResponses) PostTwoFactorSendEmailLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTwoFactorSendEmailLoginResponse, error) {
	rsp, err := c.PostTwoFactorSendEmailLoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTwoFactorSendEmailLoginResponse(rsp)
}

func (c *ClientWithResponses) PostTwoFactorSendEmailLoginWithResponse(ctx context.Context, body PostTwoFactorSendEmailLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTwoFactorSendEmailLoginResponse, error) {
	rsp, err := c.PostTwoFactorSendEmailLogin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTwoFactorSendEmailLoginResponse(rsp)
}

// DeleteTwoFactorWebauthnWithBodyWithResponse request with arbitrary body returning *DeleteTwoFactorWebauthnResponse
func (c *ClientWithResponses) DeleteTwoFactorWebauthnWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteTwoFactorWebauthnResponse, error) {
	rsp, err := c.DeleteTwoFactorWebauthnWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTwoFactorWebauthnResponse(rsp)
}

func (c *ClientWithResponses) DeleteTwoFactorWebauthnWithResponse(ctx context.Context, body DeleteTwoFactorWebauthnJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteTwoFactorWebauthnResponse, error) {
	rsp, err := c.DeleteTwoFactorWebauthn(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTwoFactorWebauthnResponse(rsp)
}

// PostTwoFactorWebauthnWithBodyWithResponse request with arbitrary body returning *PostTwoFactorWebauthnResponse
func (c *ClientWithResponses) PostTwoFactorWebauthnWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTwoFactorWebauthnResponse, error) {
	rsp, err := c.PostTwoFactorWebauthnWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTwoFactorWebauthnResponse(rsp)
}

func (c *ClientWithResponses) PostTwoFactorWebauthnWithResponse(ctx context.Context, body PostTwoFactorWebauthnJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTwoFactorWebauthnResponse, error) {
	rsp, err := c.PostTwoFactorWebauthn(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTwoFactorWebauthnResponse(rsp)
}

// PutTwoFactorWebauthnWithBodyWithResponse request with arbitrary body returning *PutTwoFactorWebauthnResponse
func (c *ClientWithResponses) PutTwoFactorWebauthnWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTwoFactorWebauthnResponse, error) {
	rsp, err := c.PutTwoFactorWebauthnWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTwoFactorWebauthnResponse(rsp)
}

func (c *ClientWithResponses) PutTwoFactorWebauthnWithResponse(ctx context.Context, body PutTwoFactorWebauthnJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTwoFactorWebauthnResponse, error) {
	rsp, err := c.PutTwoFactorWebauthn(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTwoFactorWebauthnResponse(rsp)
}

// PostTwoFactorYubikeyWithBodyWithResponse request with arbitrary body returning *PostTwoFactorYubikeyResponse
func (c *ClientWithResponses) PostTwoFactorYubikeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTwoFactorYubikeyResponse, error) {
	rsp, err := c.PostTwoFactorYubikeyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTwoFactorYubikeyResponse(rsp)
}

func (c *ClientWithResponses) PostTwoFactorYubikeyWithResponse(ctx context.Context, body PostTwoFactorYubikeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTwoFactorYubikeyResponse, error) {
	rsp, err := c.PostTwoFactorYubikey(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTwoFactorYubikeyResponse(rsp)
}

// PutTwoFactorYubikeyWithBodyWithResponse request with arbitrary body returning *PutTwoFactorYubikeyResponse
func (c *ClientWithResponses) PutTwoFactorYubikeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTwoFactorYubikeyResponse, error) {
	rsp, err := c.PutTwoFactorYubikeyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTwoFactorYubikeyResponse(rsp)
}

func (c *ClientWithResponses) PutTwoFactorYubikeyWithResponse(ctx context.Context, body PutTwoFactorYubikeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTwoFactorYubikeyResponse, error) {
	rsp, err := c.PutTwoFactorYubikey(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTwoFactorYubikeyResponse(rsp)
}

// GetUsersIdPublicKeyWithResponse request returning *GetUsersIdPublicKeyResponse
func (c *ClientWithResponses) GetUsersIdPublicKeyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetUsersIdPublicKeyResponse, error) {
	rsp, err := c.GetUsersIdPublicKey(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersIdPublicKeyResponse(rsp)
}

// GetVersionWithResponse request returning *GetVersionResponse
func (c *ClientWithResponses) GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error) {
	rsp, err := c.GetVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVersionResponse(rsp)
}

// ParseDeleteAccountsResponse parses an HTTP response from a DeleteAccountsWithResponse call
func ParseDeleteAccountsResponse(rsp *http.Response) (*DeleteAccountsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostAccountsApiKeyResponse parses an HTTP response from a PostAccountsApiKeyWithResponse call
func ParsePostAccountsApiKeyResponse(rsp *http.Response) (*PostAccountsApiKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostAccountsApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiKeyResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetAccountsBillingResponse parses an HTTP response from a GetAccountsBillingWithResponse call
func ParseGetAccountsBillingResponse(rsp *http.Response) (*GetAccountsBillingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAccountsBillingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostAccountsCancelPremiumResponse parses an HTTP response from a PostAccountsCancelPremiumWithResponse call
func ParsePostAccountsCancelPremiumResponse(rsp *http.Response) (*PostAccountsCancelPremiumResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostAccountsCancelPremiumResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostAccountsDeleteResponse parses an HTTP response from a PostAccountsDeleteWithResponse call
func ParsePostAccountsDeleteResponse(rsp *http.Response) (*PostAccountsDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostAccountsDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostAccountsDeleteRecoverResponse parses an HTTP response from a PostAccountsDeleteRecoverWithResponse call
func ParsePostAccountsDeleteRecoverResponse(rsp *http.Response) (*PostAccountsDeleteRecoverResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostAccountsDeleteRecoverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostAccountsDeleteRecoverTokenResponse parses an HTTP response from a PostAccountsDeleteRecoverTokenWithResponse call
func ParsePostAccountsDeleteRecoverTokenResponse(rsp *http.Response) (*PostAccountsDeleteRecoverTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostAccountsDeleteRecoverTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostAccountsEmailResponse parses an HTTP response from a PostAccountsEmailWithResponse call
func ParsePostAccountsEmailResponse(rsp *http.Response) (*PostAccountsEmailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostAccountsEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostAccountsEmailTokenResponse parses an HTTP response from a PostAccountsEmailTokenWithResponse call
func ParsePostAccountsEmailTokenResponse(rsp *http.Response) (*PostAccountsEmailTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostAccountsEmailTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetAccountsEnterprisePortalSigninTokenResponse parses an HTTP response from a GetAccountsEnterprisePortalSigninTokenWithResponse call
func ParseGetAccountsEnterprisePortalSigninTokenResponse(rsp *http.Response) (*GetAccountsEnterprisePortalSigninTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAccountsEnterprisePortalSigninTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostAccountsIapCheckResponse parses an HTTP response from a PostAccountsIapCheckWithResponse call
func ParsePostAccountsIapCheckResponse(rsp *http.Response) (*PostAccountsIapCheckResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostAccountsIapCheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostAccountsKdfResponse parses an HTTP response from a PostAccountsKdfWithResponse call
func ParsePostAccountsKdfResponse(rsp *http.Response) (*PostAccountsKdfResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostAccountsKdfResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostAccountsKeyResponse parses an HTTP response from a PostAccountsKeyWithResponse call
func ParsePostAccountsKeyResponse(rsp *http.Response) (*PostAccountsKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostAccountsKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetAccountsKeysResponse parses an HTTP response from a GetAccountsKeysWithResponse call
func ParseGetAccountsKeysResponse(rsp *http.Response) (*GetAccountsKeysResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAccountsKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KeysResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostAccountsKeysResponse parses an HTTP response from a PostAccountsKeysWithResponse call
func ParsePostAccountsKeysResponse(rsp *http.Response) (*PostAccountsKeysResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostAccountsKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KeysResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostAccountsLicenseResponse parses an HTTP response from a PostAccountsLicenseWithResponse call
func ParsePostAccountsLicenseResponse(rsp *http.Response) (*PostAccountsLicenseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostAccountsLicenseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetAccountsOrganizationsResponse parses an HTTP response from a GetAccountsOrganizationsWithResponse call
func ParseGetAccountsOrganizationsResponse(rsp *http.Response) (*GetAccountsOrganizationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAccountsOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProfileOrganizationResponseModelListResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostAccountsPasswordResponse parses an HTTP response from a PostAccountsPasswordWithResponse call
func ParsePostAccountsPasswordResponse(rsp *http.Response) (*PostAccountsPasswordResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostAccountsPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostAccountsPasswordHintResponse parses an HTTP response from a PostAccountsPasswordHintWithResponse call
func ParsePostAccountsPasswordHintResponse(rsp *http.Response) (*PostAccountsPasswordHintResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostAccountsPasswordHintResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostAccountsPaymentResponse parses an HTTP response from a PostAccountsPaymentWithResponse call
func ParsePostAccountsPaymentResponse(rsp *http.Response) (*PostAccountsPaymentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostAccountsPaymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostAccountsPreloginResponse parses an HTTP response from a PostAccountsPreloginWithResponse call
func ParsePostAccountsPreloginResponse(rsp *http.Response) (*PostAccountsPreloginResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostAccountsPreloginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PreloginResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostAccountsPremiumResponse parses an HTTP response from a PostAccountsPremiumWithResponse call
func ParsePostAccountsPremiumResponse(rsp *http.Response) (*PostAccountsPremiumResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostAccountsPremiumResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaymentResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetAccountsProfileResponse parses an HTTP response from a GetAccountsProfileWithResponse call
func ParseGetAccountsProfileResponse(rsp *http.Response) (*GetAccountsProfileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAccountsProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProfileResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostAccountsProfileResponse parses an HTTP response from a PostAccountsProfileWithResponse call
func ParsePostAccountsProfileResponse(rsp *http.Response) (*PostAccountsProfileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostAccountsProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProfileResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutAccountsProfileResponse parses an HTTP response from a PutAccountsProfileWithResponse call
func ParsePutAccountsProfileResponse(rsp *http.Response) (*PutAccountsProfileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutAccountsProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProfileResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostAccountsRegisterResponse parses an HTTP response from a PostAccountsRegisterWithResponse call
func ParsePostAccountsRegisterResponse(rsp *http.Response) (*PostAccountsRegisterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostAccountsRegisterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostAccountsReinstatePremiumResponse parses an HTTP response from a PostAccountsReinstatePremiumWithResponse call
func ParsePostAccountsReinstatePremiumResponse(rsp *http.Response) (*PostAccountsReinstatePremiumResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostAccountsReinstatePremiumResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetAccountsRevisionDateResponse parses an HTTP response from a GetAccountsRevisionDateWithResponse call
func ParseGetAccountsRevisionDateResponse(rsp *http.Response) (*GetAccountsRevisionDateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAccountsRevisionDateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest int64
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostAccountsRotateApiKeyResponse parses an HTTP response from a PostAccountsRotateApiKeyWithResponse call
func ParsePostAccountsRotateApiKeyResponse(rsp *http.Response) (*PostAccountsRotateApiKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostAccountsRotateApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiKeyResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostAccountsSecurityStampResponse parses an HTTP response from a PostAccountsSecurityStampWithResponse call
func ParsePostAccountsSecurityStampResponse(rsp *http.Response) (*PostAccountsSecurityStampResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostAccountsSecurityStampResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostAccountsSetPasswordResponse parses an HTTP response from a PostAccountsSetPasswordWithResponse call
func ParsePostAccountsSetPasswordResponse(rsp *http.Response) (*PostAccountsSetPasswordResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostAccountsSetPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetAccountsSsoUserIdentifierResponse parses an HTTP response from a GetAccountsSsoUserIdentifierWithResponse call
func ParseGetAccountsSsoUserIdentifierResponse(rsp *http.Response) (*GetAccountsSsoUserIdentifierResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAccountsSsoUserIdentifierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteAccountsSsoOrganizationIdResponse parses an HTTP response from a DeleteAccountsSsoOrganizationIdWithResponse call
func ParseDeleteAccountsSsoOrganizationIdResponse(rsp *http.Response) (*DeleteAccountsSsoOrganizationIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteAccountsSsoOrganizationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostAccountsStorageResponse parses an HTTP response from a PostAccountsStorageWithResponse call
func ParsePostAccountsStorageResponse(rsp *http.Response) (*PostAccountsStorageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostAccountsStorageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaymentResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetAccountsSubscriptionResponse parses an HTTP response from a GetAccountsSubscriptionWithResponse call
func ParseGetAccountsSubscriptionResponse(rsp *http.Response) (*GetAccountsSubscriptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAccountsSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubscriptionResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetAccountsTaxResponse parses an HTTP response from a GetAccountsTaxWithResponse call
func ParseGetAccountsTaxResponse(rsp *http.Response) (*GetAccountsTaxResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAccountsTaxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaxInfoResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutAccountsTaxResponse parses an HTTP response from a PutAccountsTaxWithResponse call
func ParsePutAccountsTaxResponse(rsp *http.Response) (*PutAccountsTaxResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutAccountsTaxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostAccountsVerifyEmailResponse parses an HTTP response from a PostAccountsVerifyEmailWithResponse call
func ParsePostAccountsVerifyEmailResponse(rsp *http.Response) (*PostAccountsVerifyEmailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostAccountsVerifyEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostAccountsVerifyEmailTokenResponse parses an HTTP response from a PostAccountsVerifyEmailTokenWithResponse call
func ParsePostAccountsVerifyEmailTokenResponse(rsp *http.Response) (*PostAccountsVerifyEmailTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostAccountsVerifyEmailTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostAccountsVerifyPasswordResponse parses an HTTP response from a PostAccountsVerifyPasswordWithResponse call
func ParsePostAccountsVerifyPasswordResponse(rsp *http.Response) (*PostAccountsVerifyPasswordResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostAccountsVerifyPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetAliveResponse parses an HTTP response from a GetAliveWithResponse call
func ParseGetAliveResponse(rsp *http.Response) (*GetAliveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAliveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest time.Time
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostBitpayInvoiceResponse parses an HTTP response from a PostBitpayInvoiceWithResponse call
func ParsePostBitpayInvoiceResponse(rsp *http.Response) (*PostBitpayInvoiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostBitpayInvoiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteCiphersResponse parses an HTTP response from a DeleteCiphersWithResponse call
func ParseDeleteCiphersResponse(rsp *http.Response) (*DeleteCiphersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteCiphersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCiphersResponse parses an HTTP response from a GetCiphersWithResponse call
func ParseGetCiphersResponse(rsp *http.Response) (*GetCiphersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCiphersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CipherDetailsResponseModelListResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostCiphersResponse parses an HTTP response from a PostCiphersWithResponse call
func ParsePostCiphersResponse(rsp *http.Response) (*PostCiphersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCiphersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CipherResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteCiphersAdminResponse parses an HTTP response from a DeleteCiphersAdminWithResponse call
func ParseDeleteCiphersAdminResponse(rsp *http.Response) (*DeleteCiphersAdminResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteCiphersAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostCiphersAdminResponse parses an HTTP response from a PostCiphersAdminWithResponse call
func ParsePostCiphersAdminResponse(rsp *http.Response) (*PostCiphersAdminResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCiphersAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CipherMiniResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostCiphersAttachmentValidateAzureResponse parses an HTTP response from a PostCiphersAttachmentValidateAzureWithResponse call
func ParsePostCiphersAttachmentValidateAzureResponse(rsp *http.Response) (*PostCiphersAttachmentValidateAzureResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCiphersAttachmentValidateAzureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostCiphersCreateResponse parses an HTTP response from a PostCiphersCreateWithResponse call
func ParsePostCiphersCreateResponse(rsp *http.Response) (*PostCiphersCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCiphersCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CipherResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostCiphersDeleteResponse parses an HTTP response from a PostCiphersDeleteWithResponse call
func ParsePostCiphersDeleteResponse(rsp *http.Response) (*PostCiphersDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCiphersDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutCiphersDeleteResponse parses an HTTP response from a PutCiphersDeleteWithResponse call
func ParsePutCiphersDeleteResponse(rsp *http.Response) (*PutCiphersDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutCiphersDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostCiphersDeleteAdminResponse parses an HTTP response from a PostCiphersDeleteAdminWithResponse call
func ParsePostCiphersDeleteAdminResponse(rsp *http.Response) (*PostCiphersDeleteAdminResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCiphersDeleteAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutCiphersDeleteAdminResponse parses an HTTP response from a PutCiphersDeleteAdminWithResponse call
func ParsePutCiphersDeleteAdminResponse(rsp *http.Response) (*PutCiphersDeleteAdminResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutCiphersDeleteAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostCiphersImportResponse parses an HTTP response from a PostCiphersImportWithResponse call
func ParsePostCiphersImportResponse(rsp *http.Response) (*PostCiphersImportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCiphersImportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostCiphersImportOrganizationResponse parses an HTTP response from a PostCiphersImportOrganizationWithResponse call
func ParsePostCiphersImportOrganizationResponse(rsp *http.Response) (*PostCiphersImportOrganizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCiphersImportOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostCiphersMoveResponse parses an HTTP response from a PostCiphersMoveWithResponse call
func ParsePostCiphersMoveResponse(rsp *http.Response) (*PostCiphersMoveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCiphersMoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutCiphersMoveResponse parses an HTTP response from a PutCiphersMoveWithResponse call
func ParsePutCiphersMoveResponse(rsp *http.Response) (*PutCiphersMoveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutCiphersMoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCiphersOrganizationDetailsResponse parses an HTTP response from a GetCiphersOrganizationDetailsWithResponse call
func ParseGetCiphersOrganizationDetailsResponse(rsp *http.Response) (*GetCiphersOrganizationDetailsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCiphersOrganizationDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CipherMiniDetailsResponseModelListResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostCiphersPurgeResponse parses an HTTP response from a PostCiphersPurgeWithResponse call
func ParsePostCiphersPurgeResponse(rsp *http.Response) (*PostCiphersPurgeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCiphersPurgeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutCiphersRestoreResponse parses an HTTP response from a PutCiphersRestoreWithResponse call
func ParsePutCiphersRestoreResponse(rsp *http.Response) (*PutCiphersRestoreResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutCiphersRestoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CipherResponseModelListResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostCiphersShareResponse parses an HTTP response from a PostCiphersShareWithResponse call
func ParsePostCiphersShareResponse(rsp *http.Response) (*PostCiphersShareResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCiphersShareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutCiphersShareResponse parses an HTTP response from a PutCiphersShareWithResponse call
func ParsePutCiphersShareResponse(rsp *http.Response) (*PutCiphersShareResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutCiphersShareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteCiphersIdResponse parses an HTTP response from a DeleteCiphersIdWithResponse call
func ParseDeleteCiphersIdResponse(rsp *http.Response) (*DeleteCiphersIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteCiphersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCiphersIdResponse parses an HTTP response from a GetCiphersIdWithResponse call
func ParseGetCiphersIdResponse(rsp *http.Response) (*GetCiphersIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCiphersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CipherResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostCiphersIdResponse parses an HTTP response from a PostCiphersIdWithResponse call
func ParsePostCiphersIdResponse(rsp *http.Response) (*PostCiphersIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCiphersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CipherResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutCiphersIdResponse parses an HTTP response from a PutCiphersIdWithResponse call
func ParsePutCiphersIdResponse(rsp *http.Response) (*PutCiphersIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutCiphersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CipherResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteCiphersIdAdminResponse parses an HTTP response from a DeleteCiphersIdAdminWithResponse call
func ParseDeleteCiphersIdAdminResponse(rsp *http.Response) (*DeleteCiphersIdAdminResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteCiphersIdAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCiphersIdAdminResponse parses an HTTP response from a GetCiphersIdAdminWithResponse call
func ParseGetCiphersIdAdminResponse(rsp *http.Response) (*GetCiphersIdAdminResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCiphersIdAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CipherMiniResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostCiphersIdAdminResponse parses an HTTP response from a PostCiphersIdAdminWithResponse call
func ParsePostCiphersIdAdminResponse(rsp *http.Response) (*PostCiphersIdAdminResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCiphersIdAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CipherMiniResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutCiphersIdAdminResponse parses an HTTP response from a PutCiphersIdAdminWithResponse call
func ParsePutCiphersIdAdminResponse(rsp *http.Response) (*PutCiphersIdAdminResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutCiphersIdAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CipherMiniResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostCiphersIdAttachmentResponse parses an HTTP response from a PostCiphersIdAttachmentWithResponse call
func ParsePostCiphersIdAttachmentResponse(rsp *http.Response) (*PostCiphersIdAttachmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCiphersIdAttachmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CipherResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostCiphersIdAttachmentAdminResponse parses an HTTP response from a PostCiphersIdAttachmentAdminWithResponse call
func ParsePostCiphersIdAttachmentAdminResponse(rsp *http.Response) (*PostCiphersIdAttachmentAdminResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCiphersIdAttachmentAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CipherMiniResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostCiphersIdAttachmentV2Response parses an HTTP response from a PostCiphersIdAttachmentV2WithResponse call
func ParsePostCiphersIdAttachmentV2Response(rsp *http.Response) (*PostCiphersIdAttachmentV2Response, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCiphersIdAttachmentV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttachmentUploadDataResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteCiphersIdAttachmentAttachmentIdResponse parses an HTTP response from a DeleteCiphersIdAttachmentAttachmentIdWithResponse call
func ParseDeleteCiphersIdAttachmentAttachmentIdResponse(rsp *http.Response) (*DeleteCiphersIdAttachmentAttachmentIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteCiphersIdAttachmentAttachmentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCiphersIdAttachmentAttachmentIdResponse parses an HTTP response from a GetCiphersIdAttachmentAttachmentIdWithResponse call
func ParseGetCiphersIdAttachmentAttachmentIdResponse(rsp *http.Response) (*GetCiphersIdAttachmentAttachmentIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCiphersIdAttachmentAttachmentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttachmentResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostCiphersIdAttachmentAttachmentIdResponse parses an HTTP response from a PostCiphersIdAttachmentAttachmentIdWithResponse call
func ParsePostCiphersIdAttachmentAttachmentIdResponse(rsp *http.Response) (*PostCiphersIdAttachmentAttachmentIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCiphersIdAttachmentAttachmentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteCiphersIdAttachmentAttachmentIdAdminResponse parses an HTTP response from a DeleteCiphersIdAttachmentAttachmentIdAdminWithResponse call
func ParseDeleteCiphersIdAttachmentAttachmentIdAdminResponse(rsp *http.Response) (*DeleteCiphersIdAttachmentAttachmentIdAdminResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteCiphersIdAttachmentAttachmentIdAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostCiphersIdAttachmentAttachmentIdDeleteResponse parses an HTTP response from a PostCiphersIdAttachmentAttachmentIdDeleteWithResponse call
func ParsePostCiphersIdAttachmentAttachmentIdDeleteResponse(rsp *http.Response) (*PostCiphersIdAttachmentAttachmentIdDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCiphersIdAttachmentAttachmentIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostCiphersIdAttachmentAttachmentIdDeleteAdminResponse parses an HTTP response from a PostCiphersIdAttachmentAttachmentIdDeleteAdminWithResponse call
func ParsePostCiphersIdAttachmentAttachmentIdDeleteAdminResponse(rsp *http.Response) (*PostCiphersIdAttachmentAttachmentIdDeleteAdminResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCiphersIdAttachmentAttachmentIdDeleteAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCiphersIdAttachmentAttachmentIdRenewResponse parses an HTTP response from a GetCiphersIdAttachmentAttachmentIdRenewWithResponse call
func ParseGetCiphersIdAttachmentAttachmentIdRenewResponse(rsp *http.Response) (*GetCiphersIdAttachmentAttachmentIdRenewResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCiphersIdAttachmentAttachmentIdRenewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttachmentUploadDataResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostCiphersIdAttachmentAttachmentIdShareResponse parses an HTTP response from a PostCiphersIdAttachmentAttachmentIdShareWithResponse call
func ParsePostCiphersIdAttachmentAttachmentIdShareResponse(rsp *http.Response) (*PostCiphersIdAttachmentAttachmentIdShareResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCiphersIdAttachmentAttachmentIdShareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostCiphersIdCollectionsResponse parses an HTTP response from a PostCiphersIdCollectionsWithResponse call
func ParsePostCiphersIdCollectionsResponse(rsp *http.Response) (*PostCiphersIdCollectionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCiphersIdCollectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutCiphersIdCollectionsResponse parses an HTTP response from a PutCiphersIdCollectionsWithResponse call
func ParsePutCiphersIdCollectionsResponse(rsp *http.Response) (*PutCiphersIdCollectionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutCiphersIdCollectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostCiphersIdCollectionsAdminResponse parses an HTTP response from a PostCiphersIdCollectionsAdminWithResponse call
func ParsePostCiphersIdCollectionsAdminResponse(rsp *http.Response) (*PostCiphersIdCollectionsAdminResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCiphersIdCollectionsAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutCiphersIdCollectionsAdminResponse parses an HTTP response from a PutCiphersIdCollectionsAdminWithResponse call
func ParsePutCiphersIdCollectionsAdminResponse(rsp *http.Response) (*PutCiphersIdCollectionsAdminResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutCiphersIdCollectionsAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostCiphersIdDeleteResponse parses an HTTP response from a PostCiphersIdDeleteWithResponse call
func ParsePostCiphersIdDeleteResponse(rsp *http.Response) (*PostCiphersIdDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCiphersIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutCiphersIdDeleteResponse parses an HTTP response from a PutCiphersIdDeleteWithResponse call
func ParsePutCiphersIdDeleteResponse(rsp *http.Response) (*PutCiphersIdDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutCiphersIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostCiphersIdDeleteAdminResponse parses an HTTP response from a PostCiphersIdDeleteAdminWithResponse call
func ParsePostCiphersIdDeleteAdminResponse(rsp *http.Response) (*PostCiphersIdDeleteAdminResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCiphersIdDeleteAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutCiphersIdDeleteAdminResponse parses an HTTP response from a PutCiphersIdDeleteAdminWithResponse call
func ParsePutCiphersIdDeleteAdminResponse(rsp *http.Response) (*PutCiphersIdDeleteAdminResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutCiphersIdDeleteAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCiphersIdDetailsResponse parses an HTTP response from a GetCiphersIdDetailsWithResponse call
func ParseGetCiphersIdDetailsResponse(rsp *http.Response) (*GetCiphersIdDetailsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCiphersIdDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CipherDetailsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetCiphersIdEventsResponse parses an HTTP response from a GetCiphersIdEventsWithResponse call
func ParseGetCiphersIdEventsResponse(rsp *http.Response) (*GetCiphersIdEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCiphersIdEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventResponseModelListResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetCiphersIdFullDetailsResponse parses an HTTP response from a GetCiphersIdFullDetailsWithResponse call
func ParseGetCiphersIdFullDetailsResponse(rsp *http.Response) (*GetCiphersIdFullDetailsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCiphersIdFullDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CipherDetailsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostCiphersIdPartialResponse parses an HTTP response from a PostCiphersIdPartialWithResponse call
func ParsePostCiphersIdPartialResponse(rsp *http.Response) (*PostCiphersIdPartialResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCiphersIdPartialResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutCiphersIdPartialResponse parses an HTTP response from a PutCiphersIdPartialWithResponse call
func ParsePutCiphersIdPartialResponse(rsp *http.Response) (*PutCiphersIdPartialResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutCiphersIdPartialResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutCiphersIdRestoreResponse parses an HTTP response from a PutCiphersIdRestoreWithResponse call
func ParsePutCiphersIdRestoreResponse(rsp *http.Response) (*PutCiphersIdRestoreResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutCiphersIdRestoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CipherResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutCiphersIdRestoreAdminResponse parses an HTTP response from a PutCiphersIdRestoreAdminWithResponse call
func ParsePutCiphersIdRestoreAdminResponse(rsp *http.Response) (*PutCiphersIdRestoreAdminResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutCiphersIdRestoreAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CipherMiniResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostCiphersIdShareResponse parses an HTTP response from a PostCiphersIdShareWithResponse call
func ParsePostCiphersIdShareResponse(rsp *http.Response) (*PostCiphersIdShareResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCiphersIdShareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CipherResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutCiphersIdShareResponse parses an HTTP response from a PutCiphersIdShareWithResponse call
func ParsePutCiphersIdShareResponse(rsp *http.Response) (*PutCiphersIdShareResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutCiphersIdShareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CipherResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetCollectionsResponse parses an HTTP response from a GetCollectionsWithResponse call
func ParseGetCollectionsResponse(rsp *http.Response) (*GetCollectionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCollectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionDetailsResponseModelListResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetDevicesResponse parses an HTTP response from a GetDevicesWithResponse call
func ParseGetDevicesResponse(rsp *http.Response) (*GetDevicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDevicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceResponseModelListResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostDevicesResponse parses an HTTP response from a PostDevicesWithResponse call
func ParsePostDevicesResponse(rsp *http.Response) (*PostDevicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostDevicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetDevicesIdentifierIdentifierResponse parses an HTTP response from a GetDevicesIdentifierIdentifierWithResponse call
func ParseGetDevicesIdentifierIdentifierResponse(rsp *http.Response) (*GetDevicesIdentifierIdentifierResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDevicesIdentifierIdentifierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostDevicesIdentifierIdentifierClearTokenResponse parses an HTTP response from a PostDevicesIdentifierIdentifierClearTokenWithResponse call
func ParsePostDevicesIdentifierIdentifierClearTokenResponse(rsp *http.Response) (*PostDevicesIdentifierIdentifierClearTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostDevicesIdentifierIdentifierClearTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutDevicesIdentifierIdentifierClearTokenResponse parses an HTTP response from a PutDevicesIdentifierIdentifierClearTokenWithResponse call
func ParsePutDevicesIdentifierIdentifierClearTokenResponse(rsp *http.Response) (*PutDevicesIdentifierIdentifierClearTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutDevicesIdentifierIdentifierClearTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostDevicesIdentifierIdentifierTokenResponse parses an HTTP response from a PostDevicesIdentifierIdentifierTokenWithResponse call
func ParsePostDevicesIdentifierIdentifierTokenResponse(rsp *http.Response) (*PostDevicesIdentifierIdentifierTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostDevicesIdentifierIdentifierTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutDevicesIdentifierIdentifierTokenResponse parses an HTTP response from a PutDevicesIdentifierIdentifierTokenWithResponse call
func ParsePutDevicesIdentifierIdentifierTokenResponse(rsp *http.Response) (*PutDevicesIdentifierIdentifierTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutDevicesIdentifierIdentifierTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteDevicesIdResponse parses an HTTP response from a DeleteDevicesIdWithResponse call
func ParseDeleteDevicesIdResponse(rsp *http.Response) (*DeleteDevicesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteDevicesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetDevicesIdResponse parses an HTTP response from a GetDevicesIdWithResponse call
func ParseGetDevicesIdResponse(rsp *http.Response) (*GetDevicesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDevicesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostDevicesIdResponse parses an HTTP response from a PostDevicesIdWithResponse call
func ParsePostDevicesIdResponse(rsp *http.Response) (*PostDevicesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostDevicesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutDevicesIdResponse parses an HTTP response from a PutDevicesIdWithResponse call
func ParsePutDevicesIdResponse(rsp *http.Response) (*PutDevicesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutDevicesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostDevicesIdDeleteResponse parses an HTTP response from a PostDevicesIdDeleteWithResponse call
func ParsePostDevicesIdDeleteResponse(rsp *http.Response) (*PostDevicesIdDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostDevicesIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetEmergencyAccessGrantedResponse parses an HTTP response from a GetEmergencyAccessGrantedWithResponse call
func ParseGetEmergencyAccessGrantedResponse(rsp *http.Response) (*GetEmergencyAccessGrantedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetEmergencyAccessGrantedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmergencyAccessGrantorDetailsResponseModelListResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostEmergencyAccessInviteResponse parses an HTTP response from a PostEmergencyAccessInviteWithResponse call
func ParsePostEmergencyAccessInviteResponse(rsp *http.Response) (*PostEmergencyAccessInviteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostEmergencyAccessInviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetEmergencyAccessTrustedResponse parses an HTTP response from a GetEmergencyAccessTrustedWithResponse call
func ParseGetEmergencyAccessTrustedResponse(rsp *http.Response) (*GetEmergencyAccessTrustedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetEmergencyAccessTrustedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmergencyAccessGranteeDetailsResponseModelListResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteEmergencyAccessIdResponse parses an HTTP response from a DeleteEmergencyAccessIdWithResponse call
func ParseDeleteEmergencyAccessIdResponse(rsp *http.Response) (*DeleteEmergencyAccessIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteEmergencyAccessIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetEmergencyAccessIdResponse parses an HTTP response from a GetEmergencyAccessIdWithResponse call
func ParseGetEmergencyAccessIdResponse(rsp *http.Response) (*GetEmergencyAccessIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetEmergencyAccessIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmergencyAccessGranteeDetailsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostEmergencyAccessIdResponse parses an HTTP response from a PostEmergencyAccessIdWithResponse call
func ParsePostEmergencyAccessIdResponse(rsp *http.Response) (*PostEmergencyAccessIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostEmergencyAccessIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutEmergencyAccessIdResponse parses an HTTP response from a PutEmergencyAccessIdWithResponse call
func ParsePutEmergencyAccessIdResponse(rsp *http.Response) (*PutEmergencyAccessIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutEmergencyAccessIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostEmergencyAccessIdAcceptResponse parses an HTTP response from a PostEmergencyAccessIdAcceptWithResponse call
func ParsePostEmergencyAccessIdAcceptResponse(rsp *http.Response) (*PostEmergencyAccessIdAcceptResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostEmergencyAccessIdAcceptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostEmergencyAccessIdApproveResponse parses an HTTP response from a PostEmergencyAccessIdApproveWithResponse call
func ParsePostEmergencyAccessIdApproveResponse(rsp *http.Response) (*PostEmergencyAccessIdApproveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostEmergencyAccessIdApproveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostEmergencyAccessIdConfirmResponse parses an HTTP response from a PostEmergencyAccessIdConfirmWithResponse call
func ParsePostEmergencyAccessIdConfirmResponse(rsp *http.Response) (*PostEmergencyAccessIdConfirmResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostEmergencyAccessIdConfirmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostEmergencyAccessIdDeleteResponse parses an HTTP response from a PostEmergencyAccessIdDeleteWithResponse call
func ParsePostEmergencyAccessIdDeleteResponse(rsp *http.Response) (*PostEmergencyAccessIdDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostEmergencyAccessIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostEmergencyAccessIdInitiateResponse parses an HTTP response from a PostEmergencyAccessIdInitiateWithResponse call
func ParsePostEmergencyAccessIdInitiateResponse(rsp *http.Response) (*PostEmergencyAccessIdInitiateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostEmergencyAccessIdInitiateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostEmergencyAccessIdPasswordResponse parses an HTTP response from a PostEmergencyAccessIdPasswordWithResponse call
func ParsePostEmergencyAccessIdPasswordResponse(rsp *http.Response) (*PostEmergencyAccessIdPasswordResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostEmergencyAccessIdPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetEmergencyAccessIdPoliciesResponse parses an HTTP response from a GetEmergencyAccessIdPoliciesWithResponse call
func ParseGetEmergencyAccessIdPoliciesResponse(rsp *http.Response) (*GetEmergencyAccessIdPoliciesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetEmergencyAccessIdPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolicyResponseModelListResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostEmergencyAccessIdReinviteResponse parses an HTTP response from a PostEmergencyAccessIdReinviteWithResponse call
func ParsePostEmergencyAccessIdReinviteResponse(rsp *http.Response) (*PostEmergencyAccessIdReinviteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostEmergencyAccessIdReinviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostEmergencyAccessIdRejectResponse parses an HTTP response from a PostEmergencyAccessIdRejectWithResponse call
func ParsePostEmergencyAccessIdRejectResponse(rsp *http.Response) (*PostEmergencyAccessIdRejectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostEmergencyAccessIdRejectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostEmergencyAccessIdTakeoverResponse parses an HTTP response from a PostEmergencyAccessIdTakeoverWithResponse call
func ParsePostEmergencyAccessIdTakeoverResponse(rsp *http.Response) (*PostEmergencyAccessIdTakeoverResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostEmergencyAccessIdTakeoverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmergencyAccessTakeoverResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostEmergencyAccessIdViewResponse parses an HTTP response from a PostEmergencyAccessIdViewWithResponse call
func ParsePostEmergencyAccessIdViewResponse(rsp *http.Response) (*PostEmergencyAccessIdViewResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostEmergencyAccessIdViewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmergencyAccessViewResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetEmergencyAccessIdCipherIdAttachmentAttachmentIdResponse parses an HTTP response from a GetEmergencyAccessIdCipherIdAttachmentAttachmentIdWithResponse call
func ParseGetEmergencyAccessIdCipherIdAttachmentAttachmentIdResponse(rsp *http.Response) (*GetEmergencyAccessIdCipherIdAttachmentAttachmentIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetEmergencyAccessIdCipherIdAttachmentAttachmentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttachmentResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetEventsResponse parses an HTTP response from a GetEventsWithResponse call
func ParseGetEventsResponse(rsp *http.Response) (*GetEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventResponseModelListResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetFoldersResponse parses an HTTP response from a GetFoldersWithResponse call
func ParseGetFoldersResponse(rsp *http.Response) (*GetFoldersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetFoldersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FolderResponseModelListResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostFoldersResponse parses an HTTP response from a PostFoldersWithResponse call
func ParsePostFoldersResponse(rsp *http.Response) (*PostFoldersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostFoldersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FolderResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteFoldersIdResponse parses an HTTP response from a DeleteFoldersIdWithResponse call
func ParseDeleteFoldersIdResponse(rsp *http.Response) (*DeleteFoldersIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteFoldersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetFoldersIdResponse parses an HTTP response from a GetFoldersIdWithResponse call
func ParseGetFoldersIdResponse(rsp *http.Response) (*GetFoldersIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetFoldersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FolderResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostFoldersIdResponse parses an HTTP response from a PostFoldersIdWithResponse call
func ParsePostFoldersIdResponse(rsp *http.Response) (*PostFoldersIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostFoldersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FolderResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutFoldersIdResponse parses an HTTP response from a PutFoldersIdWithResponse call
func ParsePutFoldersIdResponse(rsp *http.Response) (*PutFoldersIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutFoldersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FolderResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostFoldersIdDeleteResponse parses an HTTP response from a PostFoldersIdDeleteWithResponse call
func ParsePostFoldersIdDeleteResponse(rsp *http.Response) (*PostFoldersIdDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostFoldersIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetHibpBreachResponse parses an HTTP response from a GetHibpBreachWithResponse call
func ParseGetHibpBreachResponse(rsp *http.Response) (*GetHibpBreachResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetHibpBreachResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostInstallationsResponse parses an HTTP response from a PostInstallationsWithResponse call
func ParsePostInstallationsResponse(rsp *http.Response) (*PostInstallationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostInstallationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InstallationResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetInstallationsIdResponse parses an HTTP response from a GetInstallationsIdWithResponse call
func ParseGetInstallationsIdResponse(rsp *http.Response) (*GetInstallationsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetInstallationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InstallationResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetIpResponse parses an HTTP response from a GetIpWithResponse call
func ParseGetIpResponse(rsp *http.Response) (*GetIpResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetLicensesOrganizationIdResponse parses an HTTP response from a GetLicensesOrganizationIdWithResponse call
func ParseGetLicensesOrganizationIdResponse(rsp *http.Response) (*GetLicensesOrganizationIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetLicensesOrganizationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationLicense
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetLicensesUserIdResponse parses an HTTP response from a GetLicensesUserIdWithResponse call
func ParseGetLicensesUserIdResponse(rsp *http.Response) (*GetLicensesUserIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetLicensesUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserLicense
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetNowResponse parses an HTTP response from a GetNowWithResponse call
func ParseGetNowResponse(rsp *http.Response) (*GetNowResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetNowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest time.Time
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetOrganizationsResponse parses an HTTP response from a GetOrganizationsWithResponse call
func ParseGetOrganizationsResponse(rsp *http.Response) (*GetOrganizationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProfileOrganizationResponseModelListResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostOrganizationsResponse parses an HTTP response from a PostOrganizationsWithResponse call
func ParsePostOrganizationsResponse(rsp *http.Response) (*PostOrganizationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostOrganizationsLicenseResponse parses an HTTP response from a PostOrganizationsLicenseWithResponse call
func ParsePostOrganizationsLicenseResponse(rsp *http.Response) (*PostOrganizationsLicenseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsLicenseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteOrganizationsIdResponse parses an HTTP response from a DeleteOrganizationsIdWithResponse call
func ParseDeleteOrganizationsIdResponse(rsp *http.Response) (*DeleteOrganizationsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetOrganizationsIdResponse parses an HTTP response from a GetOrganizationsIdWithResponse call
func ParseGetOrganizationsIdResponse(rsp *http.Response) (*GetOrganizationsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostOrganizationsIdResponse parses an HTTP response from a PostOrganizationsIdWithResponse call
func ParsePostOrganizationsIdResponse(rsp *http.Response) (*PostOrganizationsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutOrganizationsIdResponse parses an HTTP response from a PutOrganizationsIdWithResponse call
func ParsePutOrganizationsIdResponse(rsp *http.Response) (*PutOrganizationsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutOrganizationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostOrganizationsIdApiKeyResponse parses an HTTP response from a PostOrganizationsIdApiKeyWithResponse call
func ParsePostOrganizationsIdApiKeyResponse(rsp *http.Response) (*PostOrganizationsIdApiKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsIdApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiKeyResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetOrganizationsIdBillingResponse parses an HTTP response from a GetOrganizationsIdBillingWithResponse call
func ParseGetOrganizationsIdBillingResponse(rsp *http.Response) (*GetOrganizationsIdBillingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsIdBillingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostOrganizationsIdCancelResponse parses an HTTP response from a PostOrganizationsIdCancelWithResponse call
func ParsePostOrganizationsIdCancelResponse(rsp *http.Response) (*PostOrganizationsIdCancelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsIdCancelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostOrganizationsIdDeleteResponse parses an HTTP response from a PostOrganizationsIdDeleteWithResponse call
func ParsePostOrganizationsIdDeleteResponse(rsp *http.Response) (*PostOrganizationsIdDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetOrganizationsIdEventsResponse parses an HTTP response from a GetOrganizationsIdEventsWithResponse call
func ParseGetOrganizationsIdEventsResponse(rsp *http.Response) (*GetOrganizationsIdEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsIdEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventResponseModelListResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostOrganizationsIdImportResponse parses an HTTP response from a PostOrganizationsIdImportWithResponse call
func ParsePostOrganizationsIdImportResponse(rsp *http.Response) (*PostOrganizationsIdImportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsIdImportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetOrganizationsIdKeysResponse parses an HTTP response from a GetOrganizationsIdKeysWithResponse call
func ParseGetOrganizationsIdKeysResponse(rsp *http.Response) (*GetOrganizationsIdKeysResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsIdKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationKeysResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostOrganizationsIdKeysResponse parses an HTTP response from a PostOrganizationsIdKeysWithResponse call
func ParsePostOrganizationsIdKeysResponse(rsp *http.Response) (*PostOrganizationsIdKeysResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsIdKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationKeysResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostOrganizationsIdLeaveResponse parses an HTTP response from a PostOrganizationsIdLeaveWithResponse call
func ParsePostOrganizationsIdLeaveResponse(rsp *http.Response) (*PostOrganizationsIdLeaveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsIdLeaveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetOrganizationsIdLicenseResponse parses an HTTP response from a GetOrganizationsIdLicenseWithResponse call
func ParseGetOrganizationsIdLicenseResponse(rsp *http.Response) (*GetOrganizationsIdLicenseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsIdLicenseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationLicense
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostOrganizationsIdLicenseResponse parses an HTTP response from a PostOrganizationsIdLicenseWithResponse call
func ParsePostOrganizationsIdLicenseResponse(rsp *http.Response) (*PostOrganizationsIdLicenseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsIdLicenseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostOrganizationsIdPaymentResponse parses an HTTP response from a PostOrganizationsIdPaymentWithResponse call
func ParsePostOrganizationsIdPaymentResponse(rsp *http.Response) (*PostOrganizationsIdPaymentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsIdPaymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostOrganizationsIdReinstateResponse parses an HTTP response from a PostOrganizationsIdReinstateWithResponse call
func ParsePostOrganizationsIdReinstateResponse(rsp *http.Response) (*PostOrganizationsIdReinstateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsIdReinstateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostOrganizationsIdRotateApiKeyResponse parses an HTTP response from a PostOrganizationsIdRotateApiKeyWithResponse call
func ParsePostOrganizationsIdRotateApiKeyResponse(rsp *http.Response) (*PostOrganizationsIdRotateApiKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsIdRotateApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiKeyResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostOrganizationsIdSeatResponse parses an HTTP response from a PostOrganizationsIdSeatWithResponse call
func ParsePostOrganizationsIdSeatResponse(rsp *http.Response) (*PostOrganizationsIdSeatResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsIdSeatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaymentResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostOrganizationsIdStorageResponse parses an HTTP response from a PostOrganizationsIdStorageWithResponse call
func ParsePostOrganizationsIdStorageResponse(rsp *http.Response) (*PostOrganizationsIdStorageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsIdStorageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaymentResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetOrganizationsIdSubscriptionResponse parses an HTTP response from a GetOrganizationsIdSubscriptionWithResponse call
func ParseGetOrganizationsIdSubscriptionResponse(rsp *http.Response) (*GetOrganizationsIdSubscriptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsIdSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationSubscriptionResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetOrganizationsIdTaxResponse parses an HTTP response from a GetOrganizationsIdTaxWithResponse call
func ParseGetOrganizationsIdTaxResponse(rsp *http.Response) (*GetOrganizationsIdTaxResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsIdTaxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaxInfoResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutOrganizationsIdTaxResponse parses an HTTP response from a PutOrganizationsIdTaxWithResponse call
func ParsePutOrganizationsIdTaxResponse(rsp *http.Response) (*PutOrganizationsIdTaxResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutOrganizationsIdTaxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetOrganizationsIdTwoFactorResponse parses an HTTP response from a GetOrganizationsIdTwoFactorWithResponse call
func ParseGetOrganizationsIdTwoFactorResponse(rsp *http.Response) (*GetOrganizationsIdTwoFactorResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsIdTwoFactorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TwoFactorProviderResponseModelListResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostOrganizationsIdTwoFactorDisableResponse parses an HTTP response from a PostOrganizationsIdTwoFactorDisableWithResponse call
func ParsePostOrganizationsIdTwoFactorDisableResponse(rsp *http.Response) (*PostOrganizationsIdTwoFactorDisableResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsIdTwoFactorDisableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TwoFactorProviderResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutOrganizationsIdTwoFactorDisableResponse parses an HTTP response from a PutOrganizationsIdTwoFactorDisableWithResponse call
func ParsePutOrganizationsIdTwoFactorDisableResponse(rsp *http.Response) (*PutOrganizationsIdTwoFactorDisableResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutOrganizationsIdTwoFactorDisableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TwoFactorProviderResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostOrganizationsIdTwoFactorDuoResponse parses an HTTP response from a PostOrganizationsIdTwoFactorDuoWithResponse call
func ParsePostOrganizationsIdTwoFactorDuoResponse(rsp *http.Response) (*PostOrganizationsIdTwoFactorDuoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsIdTwoFactorDuoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TwoFactorDuoResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutOrganizationsIdTwoFactorDuoResponse parses an HTTP response from a PutOrganizationsIdTwoFactorDuoWithResponse call
func ParsePutOrganizationsIdTwoFactorDuoResponse(rsp *http.Response) (*PutOrganizationsIdTwoFactorDuoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutOrganizationsIdTwoFactorDuoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TwoFactorDuoResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostOrganizationsIdTwoFactorGetDuoResponse parses an HTTP response from a PostOrganizationsIdTwoFactorGetDuoWithResponse call
func ParsePostOrganizationsIdTwoFactorGetDuoResponse(rsp *http.Response) (*PostOrganizationsIdTwoFactorGetDuoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsIdTwoFactorGetDuoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TwoFactorDuoResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostOrganizationsIdUpgradeResponse parses an HTTP response from a PostOrganizationsIdUpgradeWithResponse call
func ParsePostOrganizationsIdUpgradeResponse(rsp *http.Response) (*PostOrganizationsIdUpgradeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsIdUpgradeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaymentResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostOrganizationsIdVerifyBankResponse parses an HTTP response from a PostOrganizationsIdVerifyBankWithResponse call
func ParsePostOrganizationsIdVerifyBankResponse(rsp *http.Response) (*PostOrganizationsIdVerifyBankResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsIdVerifyBankResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetOrganizationsOrgIdCollectionsResponse parses an HTTP response from a GetOrganizationsOrgIdCollectionsWithResponse call
func ParseGetOrganizationsOrgIdCollectionsResponse(rsp *http.Response) (*GetOrganizationsOrgIdCollectionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsOrgIdCollectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionResponseModelListResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostOrganizationsOrgIdCollectionsResponse parses an HTTP response from a PostOrganizationsOrgIdCollectionsWithResponse call
func ParsePostOrganizationsOrgIdCollectionsResponse(rsp *http.Response) (*PostOrganizationsOrgIdCollectionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsOrgIdCollectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteOrganizationsOrgIdCollectionsIdResponse parses an HTTP response from a DeleteOrganizationsOrgIdCollectionsIdWithResponse call
func ParseDeleteOrganizationsOrgIdCollectionsIdResponse(rsp *http.Response) (*DeleteOrganizationsOrgIdCollectionsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationsOrgIdCollectionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetOrganizationsOrgIdCollectionsIdResponse parses an HTTP response from a GetOrganizationsOrgIdCollectionsIdWithResponse call
func ParseGetOrganizationsOrgIdCollectionsIdResponse(rsp *http.Response) (*GetOrganizationsOrgIdCollectionsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsOrgIdCollectionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostOrganizationsOrgIdCollectionsIdResponse parses an HTTP response from a PostOrganizationsOrgIdCollectionsIdWithResponse call
func ParsePostOrganizationsOrgIdCollectionsIdResponse(rsp *http.Response) (*PostOrganizationsOrgIdCollectionsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsOrgIdCollectionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutOrganizationsOrgIdCollectionsIdResponse parses an HTTP response from a PutOrganizationsOrgIdCollectionsIdWithResponse call
func ParsePutOrganizationsOrgIdCollectionsIdResponse(rsp *http.Response) (*PutOrganizationsOrgIdCollectionsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutOrganizationsOrgIdCollectionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostOrganizationsOrgIdCollectionsIdDeleteResponse parses an HTTP response from a PostOrganizationsOrgIdCollectionsIdDeleteWithResponse call
func ParsePostOrganizationsOrgIdCollectionsIdDeleteResponse(rsp *http.Response) (*PostOrganizationsOrgIdCollectionsIdDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsOrgIdCollectionsIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostOrganizationsOrgIdCollectionsIdDeleteUserOrgUserIdResponse parses an HTTP response from a PostOrganizationsOrgIdCollectionsIdDeleteUserOrgUserIdWithResponse call
func ParsePostOrganizationsOrgIdCollectionsIdDeleteUserOrgUserIdResponse(rsp *http.Response) (*PostOrganizationsOrgIdCollectionsIdDeleteUserOrgUserIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsOrgIdCollectionsIdDeleteUserOrgUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetOrganizationsOrgIdCollectionsIdDetailsResponse parses an HTTP response from a GetOrganizationsOrgIdCollectionsIdDetailsWithResponse call
func ParseGetOrganizationsOrgIdCollectionsIdDetailsResponse(rsp *http.Response) (*GetOrganizationsOrgIdCollectionsIdDetailsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsOrgIdCollectionsIdDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionGroupDetailsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteOrganizationsOrgIdCollectionsIdUserOrgUserIdResponse parses an HTTP response from a DeleteOrganizationsOrgIdCollectionsIdUserOrgUserIdWithResponse call
func ParseDeleteOrganizationsOrgIdCollectionsIdUserOrgUserIdResponse(rsp *http.Response) (*DeleteOrganizationsOrgIdCollectionsIdUserOrgUserIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationsOrgIdCollectionsIdUserOrgUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetOrganizationsOrgIdCollectionsIdUsersResponse parses an HTTP response from a GetOrganizationsOrgIdCollectionsIdUsersWithResponse call
func ParseGetOrganizationsOrgIdCollectionsIdUsersResponse(rsp *http.Response) (*GetOrganizationsOrgIdCollectionsIdUsersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsOrgIdCollectionsIdUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SelectionReadOnlyResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutOrganizationsOrgIdCollectionsIdUsersResponse parses an HTTP response from a PutOrganizationsOrgIdCollectionsIdUsersWithResponse call
func ParsePutOrganizationsOrgIdCollectionsIdUsersResponse(rsp *http.Response) (*PutOrganizationsOrgIdCollectionsIdUsersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutOrganizationsOrgIdCollectionsIdUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetOrganizationsOrgIdGroupsResponse parses an HTTP response from a GetOrganizationsOrgIdGroupsWithResponse call
func ParseGetOrganizationsOrgIdGroupsResponse(rsp *http.Response) (*GetOrganizationsOrgIdGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsOrgIdGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupResponseModelListResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostOrganizationsOrgIdGroupsResponse parses an HTTP response from a PostOrganizationsOrgIdGroupsWithResponse call
func ParsePostOrganizationsOrgIdGroupsResponse(rsp *http.Response) (*PostOrganizationsOrgIdGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsOrgIdGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteOrganizationsOrgIdGroupsIdResponse parses an HTTP response from a DeleteOrganizationsOrgIdGroupsIdWithResponse call
func ParseDeleteOrganizationsOrgIdGroupsIdResponse(rsp *http.Response) (*DeleteOrganizationsOrgIdGroupsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationsOrgIdGroupsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetOrganizationsOrgIdGroupsIdResponse parses an HTTP response from a GetOrganizationsOrgIdGroupsIdWithResponse call
func ParseGetOrganizationsOrgIdGroupsIdResponse(rsp *http.Response) (*GetOrganizationsOrgIdGroupsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsOrgIdGroupsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostOrganizationsOrgIdGroupsIdResponse parses an HTTP response from a PostOrganizationsOrgIdGroupsIdWithResponse call
func ParsePostOrganizationsOrgIdGroupsIdResponse(rsp *http.Response) (*PostOrganizationsOrgIdGroupsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsOrgIdGroupsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutOrganizationsOrgIdGroupsIdResponse parses an HTTP response from a PutOrganizationsOrgIdGroupsIdWithResponse call
func ParsePutOrganizationsOrgIdGroupsIdResponse(rsp *http.Response) (*PutOrganizationsOrgIdGroupsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutOrganizationsOrgIdGroupsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostOrganizationsOrgIdGroupsIdDeleteResponse parses an HTTP response from a PostOrganizationsOrgIdGroupsIdDeleteWithResponse call
func ParsePostOrganizationsOrgIdGroupsIdDeleteResponse(rsp *http.Response) (*PostOrganizationsOrgIdGroupsIdDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsOrgIdGroupsIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostOrganizationsOrgIdGroupsIdDeleteUserOrgUserIdResponse parses an HTTP response from a PostOrganizationsOrgIdGroupsIdDeleteUserOrgUserIdWithResponse call
func ParsePostOrganizationsOrgIdGroupsIdDeleteUserOrgUserIdResponse(rsp *http.Response) (*PostOrganizationsOrgIdGroupsIdDeleteUserOrgUserIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsOrgIdGroupsIdDeleteUserOrgUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetOrganizationsOrgIdGroupsIdDetailsResponse parses an HTTP response from a GetOrganizationsOrgIdGroupsIdDetailsWithResponse call
func ParseGetOrganizationsOrgIdGroupsIdDetailsResponse(rsp *http.Response) (*GetOrganizationsOrgIdGroupsIdDetailsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsOrgIdGroupsIdDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupDetailsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteOrganizationsOrgIdGroupsIdUserOrgUserIdResponse parses an HTTP response from a DeleteOrganizationsOrgIdGroupsIdUserOrgUserIdWithResponse call
func ParseDeleteOrganizationsOrgIdGroupsIdUserOrgUserIdResponse(rsp *http.Response) (*DeleteOrganizationsOrgIdGroupsIdUserOrgUserIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationsOrgIdGroupsIdUserOrgUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetOrganizationsOrgIdGroupsIdUsersResponse parses an HTTP response from a GetOrganizationsOrgIdGroupsIdUsersWithResponse call
func ParseGetOrganizationsOrgIdGroupsIdUsersResponse(rsp *http.Response) (*GetOrganizationsOrgIdGroupsIdUsersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsOrgIdGroupsIdUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutOrganizationsOrgIdGroupsIdUsersResponse parses an HTTP response from a PutOrganizationsOrgIdGroupsIdUsersWithResponse call
func ParsePutOrganizationsOrgIdGroupsIdUsersResponse(rsp *http.Response) (*PutOrganizationsOrgIdGroupsIdUsersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutOrganizationsOrgIdGroupsIdUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetOrganizationsOrgIdPoliciesResponse parses an HTTP response from a GetOrganizationsOrgIdPoliciesWithResponse call
func ParseGetOrganizationsOrgIdPoliciesResponse(rsp *http.Response) (*GetOrganizationsOrgIdPoliciesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsOrgIdPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolicyResponseModelListResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetOrganizationsOrgIdPoliciesTokenResponse parses an HTTP response from a GetOrganizationsOrgIdPoliciesTokenWithResponse call
func ParseGetOrganizationsOrgIdPoliciesTokenResponse(rsp *http.Response) (*GetOrganizationsOrgIdPoliciesTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsOrgIdPoliciesTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolicyResponseModelListResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetOrganizationsOrgIdPoliciesTypeResponse parses an HTTP response from a GetOrganizationsOrgIdPoliciesTypeWithResponse call
func ParseGetOrganizationsOrgIdPoliciesTypeResponse(rsp *http.Response) (*GetOrganizationsOrgIdPoliciesTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsOrgIdPoliciesTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolicyResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutOrganizationsOrgIdPoliciesTypeResponse parses an HTTP response from a PutOrganizationsOrgIdPoliciesTypeWithResponse call
func ParsePutOrganizationsOrgIdPoliciesTypeResponse(rsp *http.Response) (*PutOrganizationsOrgIdPoliciesTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutOrganizationsOrgIdPoliciesTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolicyResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteOrganizationsOrgIdUsersResponse parses an HTTP response from a DeleteOrganizationsOrgIdUsersWithResponse call
func ParseDeleteOrganizationsOrgIdUsersResponse(rsp *http.Response) (*DeleteOrganizationsOrgIdUsersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationsOrgIdUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationUserBulkResponseModelListResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetOrganizationsOrgIdUsersResponse parses an HTTP response from a GetOrganizationsOrgIdUsersWithResponse call
func ParseGetOrganizationsOrgIdUsersResponse(rsp *http.Response) (*GetOrganizationsOrgIdUsersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsOrgIdUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationUserUserDetailsResponseModelListResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostOrganizationsOrgIdUsersConfirmResponse parses an HTTP response from a PostOrganizationsOrgIdUsersConfirmWithResponse call
func ParsePostOrganizationsOrgIdUsersConfirmResponse(rsp *http.Response) (*PostOrganizationsOrgIdUsersConfirmResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsOrgIdUsersConfirmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationUserBulkResponseModelListResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostOrganizationsOrgIdUsersDeleteResponse parses an HTTP response from a PostOrganizationsOrgIdUsersDeleteWithResponse call
func ParsePostOrganizationsOrgIdUsersDeleteResponse(rsp *http.Response) (*PostOrganizationsOrgIdUsersDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsOrgIdUsersDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationUserBulkResponseModelListResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostOrganizationsOrgIdUsersInviteResponse parses an HTTP response from a PostOrganizationsOrgIdUsersInviteWithResponse call
func ParsePostOrganizationsOrgIdUsersInviteResponse(rsp *http.Response) (*PostOrganizationsOrgIdUsersInviteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsOrgIdUsersInviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostOrganizationsOrgIdUsersPublicKeysResponse parses an HTTP response from a PostOrganizationsOrgIdUsersPublicKeysWithResponse call
func ParsePostOrganizationsOrgIdUsersPublicKeysResponse(rsp *http.Response) (*PostOrganizationsOrgIdUsersPublicKeysResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsOrgIdUsersPublicKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationUserPublicKeyResponseModelListResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostOrganizationsOrgIdUsersReinviteResponse parses an HTTP response from a PostOrganizationsOrgIdUsersReinviteWithResponse call
func ParsePostOrganizationsOrgIdUsersReinviteResponse(rsp *http.Response) (*PostOrganizationsOrgIdUsersReinviteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsOrgIdUsersReinviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationUserBulkResponseModelListResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteOrganizationsOrgIdUsersIdResponse parses an HTTP response from a DeleteOrganizationsOrgIdUsersIdWithResponse call
func ParseDeleteOrganizationsOrgIdUsersIdResponse(rsp *http.Response) (*DeleteOrganizationsOrgIdUsersIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationsOrgIdUsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetOrganizationsOrgIdUsersIdResponse parses an HTTP response from a GetOrganizationsOrgIdUsersIdWithResponse call
func ParseGetOrganizationsOrgIdUsersIdResponse(rsp *http.Response) (*GetOrganizationsOrgIdUsersIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsOrgIdUsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationUserDetailsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostOrganizationsOrgIdUsersIdResponse parses an HTTP response from a PostOrganizationsOrgIdUsersIdWithResponse call
func ParsePostOrganizationsOrgIdUsersIdResponse(rsp *http.Response) (*PostOrganizationsOrgIdUsersIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsOrgIdUsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutOrganizationsOrgIdUsersIdResponse parses an HTTP response from a PutOrganizationsOrgIdUsersIdWithResponse call
func ParsePutOrganizationsOrgIdUsersIdResponse(rsp *http.Response) (*PutOrganizationsOrgIdUsersIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutOrganizationsOrgIdUsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostOrganizationsOrgIdUsersIdAcceptResponse parses an HTTP response from a PostOrganizationsOrgIdUsersIdAcceptWithResponse call
func ParsePostOrganizationsOrgIdUsersIdAcceptResponse(rsp *http.Response) (*PostOrganizationsOrgIdUsersIdAcceptResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsOrgIdUsersIdAcceptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostOrganizationsOrgIdUsersIdConfirmResponse parses an HTTP response from a PostOrganizationsOrgIdUsersIdConfirmWithResponse call
func ParsePostOrganizationsOrgIdUsersIdConfirmResponse(rsp *http.Response) (*PostOrganizationsOrgIdUsersIdConfirmResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsOrgIdUsersIdConfirmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostOrganizationsOrgIdUsersIdDeleteResponse parses an HTTP response from a PostOrganizationsOrgIdUsersIdDeleteWithResponse call
func ParsePostOrganizationsOrgIdUsersIdDeleteResponse(rsp *http.Response) (*PostOrganizationsOrgIdUsersIdDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsOrgIdUsersIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetOrganizationsOrgIdUsersIdEventsResponse parses an HTTP response from a GetOrganizationsOrgIdUsersIdEventsWithResponse call
func ParseGetOrganizationsOrgIdUsersIdEventsResponse(rsp *http.Response) (*GetOrganizationsOrgIdUsersIdEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsOrgIdUsersIdEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventResponseModelListResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetOrganizationsOrgIdUsersIdGroupsResponse parses an HTTP response from a GetOrganizationsOrgIdUsersIdGroupsWithResponse call
func ParseGetOrganizationsOrgIdUsersIdGroupsResponse(rsp *http.Response) (*GetOrganizationsOrgIdUsersIdGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsOrgIdUsersIdGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostOrganizationsOrgIdUsersIdGroupsResponse parses an HTTP response from a PostOrganizationsOrgIdUsersIdGroupsWithResponse call
func ParsePostOrganizationsOrgIdUsersIdGroupsResponse(rsp *http.Response) (*PostOrganizationsOrgIdUsersIdGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsOrgIdUsersIdGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutOrganizationsOrgIdUsersIdGroupsResponse parses an HTTP response from a PutOrganizationsOrgIdUsersIdGroupsWithResponse call
func ParsePutOrganizationsOrgIdUsersIdGroupsResponse(rsp *http.Response) (*PutOrganizationsOrgIdUsersIdGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutOrganizationsOrgIdUsersIdGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostOrganizationsOrgIdUsersIdReinviteResponse parses an HTTP response from a PostOrganizationsOrgIdUsersIdReinviteWithResponse call
func ParsePostOrganizationsOrgIdUsersIdReinviteResponse(rsp *http.Response) (*PostOrganizationsOrgIdUsersIdReinviteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsOrgIdUsersIdReinviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutOrganizationsOrgIdUsersIdResetPasswordResponse parses an HTTP response from a PutOrganizationsOrgIdUsersIdResetPasswordWithResponse call
func ParsePutOrganizationsOrgIdUsersIdResetPasswordResponse(rsp *http.Response) (*PutOrganizationsOrgIdUsersIdResetPasswordResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutOrganizationsOrgIdUsersIdResetPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetOrganizationsOrgIdUsersIdResetPasswordDetailsResponse parses an HTTP response from a GetOrganizationsOrgIdUsersIdResetPasswordDetailsWithResponse call
func ParseGetOrganizationsOrgIdUsersIdResetPasswordDetailsResponse(rsp *http.Response) (*GetOrganizationsOrgIdUsersIdResetPasswordDetailsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsOrgIdUsersIdResetPasswordDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationUserResetPasswordDetailsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentResponse parses an HTTP response from a PutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentWithResponse call
func ParsePutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentResponse(rsp *http.Response) (*PutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutOrganizationsOrgIdUsersUserIdResetPasswordEnrollmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPlansResponse parses an HTTP response from a GetPlansWithResponse call
func ParseGetPlansResponse(rsp *http.Response) (*GetPlansResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPlansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlanResponseModelListResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetPlansSalesTaxRatesResponse parses an HTTP response from a GetPlansSalesTaxRatesWithResponse call
func ParseGetPlansSalesTaxRatesResponse(rsp *http.Response) (*GetPlansSalesTaxRatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPlansSalesTaxRatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaxRateResponseModelListResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutPushAddOrganizationResponse parses an HTTP response from a PutPushAddOrganizationWithResponse call
func ParsePutPushAddOrganizationResponse(rsp *http.Response) (*PutPushAddOrganizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutPushAddOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutPushDeleteOrganizationResponse parses an HTTP response from a PutPushDeleteOrganizationWithResponse call
func ParsePutPushDeleteOrganizationResponse(rsp *http.Response) (*PutPushDeleteOrganizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutPushDeleteOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPushRegisterResponse parses an HTTP response from a PostPushRegisterWithResponse call
func ParsePostPushRegisterResponse(rsp *http.Response) (*PostPushRegisterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPushRegisterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostPushSendResponse parses an HTTP response from a PostPushSendWithResponse call
func ParsePostPushSendResponse(rsp *http.Response) (*PostPushSendResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostPushSendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeletePushIdResponse parses an HTTP response from a DeletePushIdWithResponse call
func ParseDeletePushIdResponse(rsp *http.Response) (*DeletePushIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeletePushIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSendsResponse parses an HTTP response from a GetSendsWithResponse call
func ParseGetSendsResponse(rsp *http.Response) (*GetSendsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSendsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SendResponseModelListResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostSendsResponse parses an HTTP response from a PostSendsWithResponse call
func ParsePostSendsResponse(rsp *http.Response) (*PostSendsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostSendsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SendResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostSendsAccessIdResponse parses an HTTP response from a PostSendsAccessIdWithResponse call
func ParsePostSendsAccessIdResponse(rsp *http.Response) (*PostSendsAccessIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostSendsAccessIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostSendsFileResponse parses an HTTP response from a PostSendsFileWithResponse call
func ParsePostSendsFileResponse(rsp *http.Response) (*PostSendsFileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostSendsFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SendResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostSendsFileV2Response parses an HTTP response from a PostSendsFileV2WithResponse call
func ParsePostSendsFileV2Response(rsp *http.Response) (*PostSendsFileV2Response, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostSendsFileV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SendFileUploadDataResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostSendsFileValidateAzureResponse parses an HTTP response from a PostSendsFileValidateAzureWithResponse call
func ParsePostSendsFileValidateAzureResponse(rsp *http.Response) (*PostSendsFileValidateAzureResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostSendsFileValidateAzureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostSendsEncodedSendIdAccessFileFileIdResponse parses an HTTP response from a PostSendsEncodedSendIdAccessFileFileIdWithResponse call
func ParsePostSendsEncodedSendIdAccessFileFileIdResponse(rsp *http.Response) (*PostSendsEncodedSendIdAccessFileFileIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostSendsEncodedSendIdAccessFileFileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteSendsIdResponse parses an HTTP response from a DeleteSendsIdWithResponse call
func ParseDeleteSendsIdResponse(rsp *http.Response) (*DeleteSendsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteSendsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSendsIdResponse parses an HTTP response from a GetSendsIdWithResponse call
func ParseGetSendsIdResponse(rsp *http.Response) (*GetSendsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSendsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SendResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutSendsIdResponse parses an HTTP response from a PutSendsIdWithResponse call
func ParsePutSendsIdResponse(rsp *http.Response) (*PutSendsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutSendsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SendResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetSendsIdFileFileIdResponse parses an HTTP response from a GetSendsIdFileFileIdWithResponse call
func ParseGetSendsIdFileFileIdResponse(rsp *http.Response) (*GetSendsIdFileFileIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSendsIdFileFileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SendFileUploadDataResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostSendsIdFileFileIdResponse parses an HTTP response from a PostSendsIdFileFileIdWithResponse call
func ParsePostSendsIdFileFileIdResponse(rsp *http.Response) (*PostSendsIdFileFileIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostSendsIdFileFileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutSendsIdRemovePasswordResponse parses an HTTP response from a PutSendsIdRemovePasswordWithResponse call
func ParsePutSendsIdRemovePasswordResponse(rsp *http.Response) (*PutSendsIdRemovePasswordResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutSendsIdRemovePasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SendResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetSettingsDomainsResponse parses an HTTP response from a GetSettingsDomainsWithResponse call
func ParseGetSettingsDomainsResponse(rsp *http.Response) (*GetSettingsDomainsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsDomainsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DomainsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostSettingsDomainsResponse parses an HTTP response from a PostSettingsDomainsWithResponse call
func ParsePostSettingsDomainsResponse(rsp *http.Response) (*PostSettingsDomainsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostSettingsDomainsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DomainsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutSettingsDomainsResponse parses an HTTP response from a PutSettingsDomainsWithResponse call
func ParsePutSettingsDomainsResponse(rsp *http.Response) (*PutSettingsDomainsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsDomainsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DomainsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostSetupPaymentResponse parses an HTTP response from a PostSetupPaymentWithResponse call
func ParsePostSetupPaymentResponse(rsp *http.Response) (*PostSetupPaymentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostSetupPaymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetSyncResponse parses an HTTP response from a GetSyncWithResponse call
func ParseGetSyncResponse(rsp *http.Response) (*GetSyncResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SyncResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetTwoFactorResponse parses an HTTP response from a GetTwoFactorWithResponse call
func ParseGetTwoFactorResponse(rsp *http.Response) (*GetTwoFactorResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTwoFactorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TwoFactorProviderResponseModelListResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostTwoFactorAuthenticatorResponse parses an HTTP response from a PostTwoFactorAuthenticatorWithResponse call
func ParsePostTwoFactorAuthenticatorResponse(rsp *http.Response) (*PostTwoFactorAuthenticatorResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostTwoFactorAuthenticatorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TwoFactorAuthenticatorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutTwoFactorAuthenticatorResponse parses an HTTP response from a PutTwoFactorAuthenticatorWithResponse call
func ParsePutTwoFactorAuthenticatorResponse(rsp *http.Response) (*PutTwoFactorAuthenticatorResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutTwoFactorAuthenticatorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TwoFactorAuthenticatorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostTwoFactorDisableResponse parses an HTTP response from a PostTwoFactorDisableWithResponse call
func ParsePostTwoFactorDisableResponse(rsp *http.Response) (*PostTwoFactorDisableResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostTwoFactorDisableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TwoFactorProviderResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutTwoFactorDisableResponse parses an HTTP response from a PutTwoFactorDisableWithResponse call
func ParsePutTwoFactorDisableResponse(rsp *http.Response) (*PutTwoFactorDisableResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutTwoFactorDisableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TwoFactorProviderResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostTwoFactorDuoResponse parses an HTTP response from a PostTwoFactorDuoWithResponse call
func ParsePostTwoFactorDuoResponse(rsp *http.Response) (*PostTwoFactorDuoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostTwoFactorDuoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TwoFactorDuoResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutTwoFactorDuoResponse parses an HTTP response from a PutTwoFactorDuoWithResponse call
func ParsePutTwoFactorDuoResponse(rsp *http.Response) (*PutTwoFactorDuoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutTwoFactorDuoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TwoFactorDuoResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostTwoFactorEmailResponse parses an HTTP response from a PostTwoFactorEmailWithResponse call
func ParsePostTwoFactorEmailResponse(rsp *http.Response) (*PostTwoFactorEmailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostTwoFactorEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TwoFactorEmailResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutTwoFactorEmailResponse parses an HTTP response from a PutTwoFactorEmailWithResponse call
func ParsePutTwoFactorEmailResponse(rsp *http.Response) (*PutTwoFactorEmailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutTwoFactorEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TwoFactorEmailResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostTwoFactorGetAuthenticatorResponse parses an HTTP response from a PostTwoFactorGetAuthenticatorWithResponse call
func ParsePostTwoFactorGetAuthenticatorResponse(rsp *http.Response) (*PostTwoFactorGetAuthenticatorResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostTwoFactorGetAuthenticatorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TwoFactorAuthenticatorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostTwoFactorGetDuoResponse parses an HTTP response from a PostTwoFactorGetDuoWithResponse call
func ParsePostTwoFactorGetDuoResponse(rsp *http.Response) (*PostTwoFactorGetDuoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostTwoFactorGetDuoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TwoFactorDuoResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostTwoFactorGetEmailResponse parses an HTTP response from a PostTwoFactorGetEmailWithResponse call
func ParsePostTwoFactorGetEmailResponse(rsp *http.Response) (*PostTwoFactorGetEmailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostTwoFactorGetEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TwoFactorEmailResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostTwoFactorGetRecoverResponse parses an HTTP response from a PostTwoFactorGetRecoverWithResponse call
func ParsePostTwoFactorGetRecoverResponse(rsp *http.Response) (*PostTwoFactorGetRecoverResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostTwoFactorGetRecoverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TwoFactorRecoverResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostTwoFactorGetWebauthnResponse parses an HTTP response from a PostTwoFactorGetWebauthnWithResponse call
func ParsePostTwoFactorGetWebauthnResponse(rsp *http.Response) (*PostTwoFactorGetWebauthnResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostTwoFactorGetWebauthnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TwoFactorWebAuthnResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostTwoFactorGetWebauthnChallengeResponse parses an HTTP response from a PostTwoFactorGetWebauthnChallengeWithResponse call
func ParsePostTwoFactorGetWebauthnChallengeResponse(rsp *http.Response) (*PostTwoFactorGetWebauthnChallengeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostTwoFactorGetWebauthnChallengeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CredentialCreateOptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostTwoFactorGetYubikeyResponse parses an HTTP response from a PostTwoFactorGetYubikeyWithResponse call
func ParsePostTwoFactorGetYubikeyResponse(rsp *http.Response) (*PostTwoFactorGetYubikeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostTwoFactorGetYubikeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TwoFactorYubiKeyResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostTwoFactorRecoverResponse parses an HTTP response from a PostTwoFactorRecoverWithResponse call
func ParsePostTwoFactorRecoverResponse(rsp *http.Response) (*PostTwoFactorRecoverResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostTwoFactorRecoverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostTwoFactorSendEmailResponse parses an HTTP response from a PostTwoFactorSendEmailWithResponse call
func ParsePostTwoFactorSendEmailResponse(rsp *http.Response) (*PostTwoFactorSendEmailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostTwoFactorSendEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostTwoFactorSendEmailLoginResponse parses an HTTP response from a PostTwoFactorSendEmailLoginWithResponse call
func ParsePostTwoFactorSendEmailLoginResponse(rsp *http.Response) (*PostTwoFactorSendEmailLoginResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostTwoFactorSendEmailLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteTwoFactorWebauthnResponse parses an HTTP response from a DeleteTwoFactorWebauthnWithResponse call
func ParseDeleteTwoFactorWebauthnResponse(rsp *http.Response) (*DeleteTwoFactorWebauthnResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteTwoFactorWebauthnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TwoFactorWebAuthnResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostTwoFactorWebauthnResponse parses an HTTP response from a PostTwoFactorWebauthnWithResponse call
func ParsePostTwoFactorWebauthnResponse(rsp *http.Response) (*PostTwoFactorWebauthnResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostTwoFactorWebauthnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TwoFactorWebAuthnResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutTwoFactorWebauthnResponse parses an HTTP response from a PutTwoFactorWebauthnWithResponse call
func ParsePutTwoFactorWebauthnResponse(rsp *http.Response) (*PutTwoFactorWebauthnResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutTwoFactorWebauthnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TwoFactorWebAuthnResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostTwoFactorYubikeyResponse parses an HTTP response from a PostTwoFactorYubikeyWithResponse call
func ParsePostTwoFactorYubikeyResponse(rsp *http.Response) (*PostTwoFactorYubikeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostTwoFactorYubikeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TwoFactorYubiKeyResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutTwoFactorYubikeyResponse parses an HTTP response from a PutTwoFactorYubikeyWithResponse call
func ParsePutTwoFactorYubikeyResponse(rsp *http.Response) (*PutTwoFactorYubikeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutTwoFactorYubikeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TwoFactorYubiKeyResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetUsersIdPublicKeyResponse parses an HTTP response from a GetUsersIdPublicKeyWithResponse call
func ParseGetUsersIdPublicKeyResponse(rsp *http.Response) (*GetUsersIdPublicKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUsersIdPublicKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserKeyResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetVersionResponse parses an HTTP response from a GetVersionWithResponse call
func ParseGetVersionResponse(rsp *http.Response) (*GetVersionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VersionResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}
